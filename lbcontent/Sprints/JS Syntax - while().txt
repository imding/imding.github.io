5##STEP_1####INST_1##Overview\n\n\nComputers can do things very quickly, this is one of the many reasons why coding is useful to us.\n\nThis ability to do things fast is especially useful when we want to repeat certain things over and over again.\n\nIn this sprint you will learn one of the many ways we can do things on a loop.\n\nClick Next Step to get started.##INST_1E####CODE_1####HTML####HTML_E####CSS####CSS_E####JS####JS_E####CODE_1E####TEST_1####TEST_1E####STEP_1E####STEP_2####INST_2##The syntax\n\n\nThere are two components to the while loop:\n\n- A *series of actions*, in the form of code, to be performed repeatedly\n\n- *A condition* that will keep the loop running as long as its return value is *true*\n\nAnd here is the syntax for defining those components so the computer can understand:\n\n- while (condition) { actions_to_loop }\n\n- the *condition* must return a boolean ( true / false )\n\nLet's write one and see how it works\n\n[JS LINE ##LINE('script.js','var')+2##]\n1. Create a *while* loop\n2. Use the condition *counter < 5*\n\nClick Next Step to proceed##INST_2E####CODE_2####HTML####HTML_E####CSS####CSS_E####JS##var counter = 1;\n\n#BEGIN_EDITABLE# while (counter < 5) #END_EDITABLE# {		// CREATE WHILE LOOP\n	console.log('counter is ' + counter);\n	counter++;\n}##JS_E####CODE_2E####TEST_2####TEST_2E####STEP_2E####STEP_3####INST_3##Break-down\n\n\nTake a look in the console by clicking the *console tab*, you should see 4 lines of text.\n\n[pic]\n\nHere is how they have been produced by the loop we created in the last step\n\n[gif]\n\n- The value of *counter* is *1* at the beginning\n\n- *counter* is less than 5 and the loop starts\n\n- Each run-through will *update the console log* and increase *counter* by 1\n\n- 4 run-throughs later *counter* is no longer less than 5 and the loop is ended\n\nLet's make the loop run more than 4 times.\n\n[JS LINE ##LINE('script.js','CHANGE')##]\nChange the condition so the loop will run exactly *8 times*\n\nClick Next Step to proceed##INST_3E####CODE_3####HTML####HTML_E####CSS####CSS_E####JS##var counter = 1;\n\nwhile (#BEGIN_EDITABLE# counter < 5 #END_EDITABLE#) {		// CHANGE CONDITION\n	console.log('counter is ' + counter);\n	counter++;\n}##JS_E####CODE_3E####TEST_3####TEST_3E####STEP_3E####STEP_4####INST_4##Infinity\n\n\nRemember, the *condition* is the on/off switch of the while loop and thus must have the initial value of *true* and subsequently *false*.\n\nBecause:\n\n- ( 4 < 3 ) has just one possible return value of *false* so the loop will *never start*\n\n- ( 1 > 0 ) will always return *true* so the loop will *never stop*\n\nOne easy way to avoid static return values is to:\n\n- Always include at least one *variable* as part of the condition whose *value changes over time*\n\nBut you must do it in a way so that:\n\n- *condition* inevitably *becomes false*\n\nLike this:\n\n[JS LINE ##LINE('script.js','CHANGE')##]\nModify the code so that the loop will eventually end\n\nClick Next Step to proceed##INST_4E####CODE_4####HTML####HTML_E####CSS####CSS_E####JS##var counter = 1;\n\nwhile (counter < 9) {\n	console.log('counter is ' + counter);\n	#BEGIN_EDITABLE# counter = 3; #END_EDITABLE#		// CHANGE COUNTER\n}##JS_E####CODE_4E####TEST_4####TEST_4E####STEP_4E####STEP_5####INST_5##Summary\n\n\nGreat job, we hope what you learnt here can help you make better content for your own projects.##INST_5E####CODE_5####HTML####HTML_E####CSS####CSS_E####JS####JS_E####CODE_5E####TEST_5####TEST_5E####STEP_5E##