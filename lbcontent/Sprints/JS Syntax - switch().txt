3##STEP_1####INST_1##Overview\n\n\nConditional statements allow us to take a single input from the user and create branched responses, making interactivity between the user and our site richer.\n\nThe *if and else if statements* are very good at doing that, but there are situations where *an alternative* is better suited.\n\nIn this sprint we will learn how the *switch case syntax* work and its unique features.\n\nClick Next Step to get started##INST_1E####CODE_1####HTML####HTML_E####CSS####CSS_E####JS####JS_E####CODE_1E####TEST_1####TEST_1E####STEP_1E####STEP_2####INST_2##The syntax\n\nLet us first take a look at how to write a *switch case*\n\nswitch ( expression ) {\n	case a:\n		action_1;\n		break;\n	case b:\n		action_2;\n		break;\n	default:\n		action_3;\n}\n\nThe above syntax is equivalent to:\n\n- if *expression == a*, do *action_1*\n\n- if *expression == b*, do *action_2*\n\n- otherwise, do *action_3*\n\n- *break* is usually placed at the *end of each case* because it tells the computer to exit the switch case\n\nSimple, right? Let's try it out\n\n[JS LINE ##LINE('script.js','CREATE')##]\nCreate a *switch* for *x + y*\n\n[JS LINE ##LINE('script.js','DEFINE')##]\nDefine a case so *action_1* is printed to console\n\nClick Next Step to proceed##INST_2E####CODE_2####HTML####HTML_E####CSS####CSS_E####JS##var x = 2;\nvar y = 10;\n\nswitch ( x + y ) {		// CREATE SWITCH\n	case 12:		// DEFINE CASE\n		console.log("action_1");\n		break;\n	default:\n		console.log("action_2");\n}##JS_E####CODE_2E####TEST_2####TEST_2E####STEP_2E####STEP_3####INST_3##Unique features\n\n\nThe switch syntax starts with a *single expression* ( code that returns a value ), the *match and mismatch* between it and each *case value* becomes the condition for each case.\n\nUnlike an if and else if ladder, where each condition must be fully defined.\n\n[switch_case_code]\n\nBoth methods produce the same result as shown above, but what's unique about *switch case* is that it *is faster*.\n\n[pic]\n\nNot a whole lot faster but remember, 1 million is not a big number for any computer, and many 0.24 seconds added together can become a noticeable improvement.\n\n##INST_3E####CODE_3####HTML####HTML_E####CSS####CSS_E####JS####JS_E####CODE_3E####TEST_3####TEST_3E####STEP_3E##