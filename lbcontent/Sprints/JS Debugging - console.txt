4##STEP_1####INST_1##Overview\n=====\n\nWhen working with JavaScript, there are two major components in our code:\n----- NOTES -----\nstatic code\ndynamic code\n\nThe difference between the two are illustrated below:\n----- CODE -----\nvar divWidth = 250;    // divWidth is static and will always equal to 250\nvar divHeight = window.innerHeight / 2;    // divHeight is dynamic, its value is unpredictable\n\nWhen something goes wrong in our code that is caused by dynamic variables, it can become challenging to find and resolve the problem as the number of variables increase. This can be overcome with the console.log feature.\n\nIn this sprint, we will learn how it works and how to use it.\n=====\nClick Next the start this sprint.##INST_1E####CODE_1####HTML####HTML_E####CSS####CSS_E####JS####JS_E####CODE_1E####TEST_1####TEST_1E####STEP_1E####STEP_2####INST_2##Understanding the console\n=====\n\nThe word console her refers to what's called an object in JavaScript, and just like real objects in the physical world, we have many ways to interact with it. The log method is just one of them, let's take a look at the syntax:\n----- NOTE -----\nconsole.log ( 'string_to_log' );\n\nTo put it into practice, log something in the script.js tab\n----- INSTRUCTION -----\n[JS LINE 1]\nUse the console.log feature to log the string 'hello world'\n----- NOTES -----\nTo look at what you have just logged, click the console tab right next to the run code tab\n\n=====\nClick Next to proceed.##INST_2E####CODE_2####HTML####HTML_E####CSS####CSS_E####JS###BEGIN_EDITABLE#     #END_EDITABLE###JS_E####CODE_2E####TEST_2##pass.if.js.editable(0).contains('console.log("hello world");');##TEST_2E####STEP_2E####STEP_3####INST_3##Placement of console.log\n=====\n\nYour JavaScript code is evaluated one line at the time from top to bottom, and most lines will have some kind of a return value ( i.e. output, i.e. result ). The process of debugging is to clearly see those values at each step ( i.e. after each line is evaluated ), so we can see how a variable changes over time.\n\n----- INSTRUCTION -----\n[JS LINE 4, 8, 12, 16]\nAdd the code console.log('initial: ' + dynamicVar); into LINE 4\nAdd the code console.log('at LINE 8: ' + dynamicVar); into LINE 8\nAdd the code console.log('at LINE 12: ' + dynamicVar); into LINE 12\nAdd the code console.log('at LINE 16: ' + dynamicVar); into LINE 16\n----- NOTES -----\nUse console.log right after a variable has been given a new value\nCheck the console tab to see how the value of dynamicVar changed over time\n\n=====\nClick Next to proceed.##INST_3E####CODE_3####HTML####HTML_E####CSS####CSS_E####JS##var dynamicVar = Math.random() * 100;\nvar staticVar = 25;\n\n#BEGIN_EDITABLE#     #END_EDITABLE#\n\ndynamicVar = dynamicVar * staticVar;\n\n#BEGIN_EDITABLE#     #END_EDITABLE#\n\ndynamicVar = dynamicVar - staticVar;\n\n#BEGIN_EDITABLE#     #END_EDITABLE#\n\ndynamicVar = dynamicVar / staticVar;\n\n#BEGIN_EDITABLE#     #END_EDITABLE###JS_E####CODE_3E####TEST_3##pass.if.js.editable(0).contains('console.log("initial:"+dynamicVar);');\npass.if.js.editable(1).contains('console.log("at LINE 8:"+dynamicVar);');\npass.if.js.editable(2).contains('console.log("at LINE 12:"+dynamicVar);');\npass.if.js.editable(3).contains('console.log("at LINE 16:"+dynamicVar);');##TEST_3E####STEP_3E####STEP_4####INST_4##Summary\n=====\n\nThat's it, you can now utilize the console object in JavaScript to debug your code, don't forget to try it out in your own projects.##INST_4E####CODE_4####HTML####HTML_E####CSS####CSS_E####JS####JS_E####CODE_4E####TEST_4####TEST_4E####STEP_4E##