30##STEP_1####INST_1##Overview\n\nIn this project we will be creating our own version of the classic whack-a-mole game!\n\nThis project is split into the following 3 chapters:\n\n- Static components: use HTML & CSS to create the framework and visuals\n\n- Dynamic events: make the game able to interact with user input\n\n- Event timing: take your game to the next level with randomly timed events\n\nSo, are you ready?##INST_1E####CODE_1####HTML##<img src='https://app.bsdlaunchbox.com/img-proj/whack-a-mole/c4ec1e6ccc61f51ca59be8a5f97f7ded-whack-a-mole.png'>##HTML_E####CSS##img {\n    position: absolute;\n    width: 100%;\n    left: 50%; top: 50%;\n    transform: translate(-50%, -50%);\n}##CSS_E####JS####JS_E####CODE_1E####TEST_1####TEST_1E####STEP_1E####STEP_2####INST_2##Static components: general layout\n\nEvery game needs an interface, ours is made up of the following:\n\n[image: title & subtitle, game window]\n\nLet's make them now.\n\n[HTML]Add an <h1> element with id name *title*, write the word *Title* between the tags\n\n[HTML]Add an <h3> element with id name *subtitle*, write the word *Subtitle* between the tags\n\n[HTML]Add a <div> element with id name *game*\n\n- You will be able to customize everything at the end of the project##INST_2E####CODE_2####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'></div>##HTML_E####CSS####CSS_E####JS####JS_E####CODE_2E####TEST_2####TEST_2E####STEP_2E####STEP_3####INST_3##Static components: styling the layout\n\nFrom here we need to add more elements inside the game window, but before we do that, let's style what we already have.\n\n[CSS]Add selectors to target *#title and #subtitle*, centre them by using the *text-align* property\n\n[CSS]Make the game window *500px* wide and *600px* tall, center it by using the *margin* property##INST_3E####CODE_3####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'></div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}##CSS_E####JS####JS_E####CODE_3E####TEST_3####TEST_3E####STEP_3E####STEP_4####INST_4##LaunchBox Tips\n\nSince it's not always clear to us where the HTML elements begin and end, it's a good practice to style them so we can visualize what we have on the page.\n\nBut because this process does not affect the functionality of your game, LaunchBox will do it for you to save time.\n\nSo just be informed that, from time to time, your HTML elements will change the way they look. And if you're confused about what the colors mean, just refer to the helper at the bottom of your output window.\n\n[image: helper]\n\n- You will see the effect of this in the next step.##INST_4E####CODE_4####HTML####HTML_E####CSS####CSS_E####JS####JS_E####CODE_4E####TEST_4####TEST_4E####STEP_4E####STEP_5####INST_5##Static components: game window layout\n\nThe game window will be split into 3 sections:\n\n- mLeft: where the score will be displayed\n\n- mRight: where the play button will be shown\n\n- playArea: where the moles will appear and player will click to get points\n\nFew more <div> elements should do the job nicely.\n\n[HTML]Add a *<div>* element with *id* name *mLeft* and *class* name *menu*\n\n[HTML]Add a *<div>* element with *id* name *mRight* and *class* name *menu*\n\n[HTML]Add a *<div>* element with *id* name *playArea*##INST_5E####CODE_5####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'></div>\n    \n    <div id='mRight' class='menu'></div>\n        \n    <div id='playArea'></div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}##CSS_E####JS##function rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nlet elems = document.body.getElementsByTagName('*');\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i;\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\nArray.from(elems).slice(0,-1).forEach(function(e,i) {\n    let rColor = 'rgb(' + rInt(i%1) + ',' + rInt(i%2) + ',' + rInt(i%3) + ')';\n    e.style.backgroundColor = rColor;\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n});\ndocument.body.appendChild(helper);##JS_E####CODE_5E####TEST_5####TEST_5E####STEP_5E####STEP_6####INST_6##Static components: styling the menu items\n\nWe want the menu items to look like this:\n\n[image: menu layout]\n\nEach menu item is 100px tall ( CSS LINE 23 ) and should be half the width of the game window.\n\n[CSS]Make the menu items have a *width* of *50%*\n\n[CSS]Position #mLeft to be *0px* away from the *left*, and #mRight to be *0px* away from the *right*\n\nThe left and right properties are not affecting their positions, this is because of the default page flow.\n\nIn order to change their positions, we must define their position property.\n\n[CSS]Give the menu items *absolute position*\n\nNow the menu items are no longer following the default page flow, it's treating the entire page as its parent, that's why they now each take up 50% of the page width, and positioned to be 0px away from the left and right edges of the page.\n\nWe can put them back into the game window by giving game window a position property as well.\n\n[CSS]Give the game window *relative position*##INST_6E####CODE_6####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'></div>\n    \n    <div id='mRight' class='menu'></div>\n        \n    <div id='playArea'></div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n}\n\n#mRight {\n    right: 0;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n}##CSS_E####JS##function rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nlet elems = document.body.getElementsByTagName('*');\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i;\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\nArray.from(elems).slice(0,-1).forEach(function(e,i) {\n    let rColor = 'rgb(' + rInt(i%1) + ',' + rInt(i%2) + ',' + rInt(i%3) + ')';\n    e.style.backgroundColor = rColor;\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n});\ndocument.body.appendChild(helper);##JS_E####CODE_6E####TEST_6####TEST_6E####STEP_6E####STEP_7####INST_7##Static components: styling the play area\n\nWe know the game window is 600px tall, and the menu items are 100px tall, it should be simple maths to calculate how tall the play area should be.\n\n[CSS]Set the *height* so #playArea takes up the remaining space of game window\n\nSince the play area is also a child of the game window, which already has its position set to relative, we can once again use that to our advantage.\n\n[CSS]Give the play area *absolute position* and position it to be *0px* away from the *bottom*\n\n##INST_7E####CODE_7####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'></div>\n    \n    <div id='mRight' class='menu'></div>\n        \n    <div id='playArea'></div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n}\n\n#mRight {\n    right: 0;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n}##CSS_E####JS##function rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nlet elems = document.body.getElementsByTagName('*');\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i;\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\nArray.from(elems).slice(0,-1).forEach(function(e,i) {\n    let rColor = 'rgb(' + rInt(i%1) + ',' + rInt(i%2) + ',' + rInt(i%3) + ')';\n    e.style.backgroundColor = rColor;\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n});\ndocument.body.appendChild(helper);##JS_E####CODE_7E####TEST_7####TEST_7E####STEP_7E####STEP_8####INST_8##Static components: the scoreboard and play button\n\nGames are more fun when the the player is constantly rewarded for their efforts, keeping a score is the tried and true mechanic for many games, and so it should work for yours too.\n\n[HTML]Add a *<p>* element, write *Score: 0* between the tags\n\nThe play button should be self-explanatory, it allows the player to start playing.\n\n[HTML]Add a *<button>* element with *id* name *play*, write *Play* between the tags\n\n##INST_8E####CODE_8####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: 0</p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'></div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n}\n\n#mRight {\n    right: 0;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n}##CSS_E####JS##function rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nlet elems = document.body.getElementsByTagName('*');\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i;\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\nArray.from(elems).slice(0,-1).forEach(function(e,i) {\n    let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n    e.style.backgroundColor = rColor;\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n});\ndocument.body.appendChild(helper);##JS_E####CODE_8E####TEST_8####TEST_8E####STEP_8E####STEP_9####INST_9##Static components: styling the scoreboard and play button\n\nWe didn't give an id or class name to the <p> element that contains the score, but that's okay, we can style #mLeft and the effect will also apply to its children.\n\n[CSS]Set the *font size* to *2em* and align the text to center\n\nThe play button is too small right now, let's make it bigger.\n\n[CSS]Make the play button have the *width and height* of *100%*, set the *font-size* to *1.5em*\n\nSome space around the play button would be better looking.\n\n[CSS]Give #mRight a *padding* of *20px*\n\nAnd to prevent #mRight from automatically resizing itself, we can use the box-sizing property.\n\n[CSS]Maintain the size of the menu items using *box-sizing*##INST_9E####CODE_9####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: 0</p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'></div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}##CSS_E####JS##function rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nlet elems = document.body.getElementsByTagName('*');\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i;\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\nArray.from(elems).slice(0,-1).forEach(function(e,i) {\n    let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n    e.style.backgroundColor = rColor;\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n});\ndocument.body.appendChild(helper);##JS_E####CODE_9E####TEST_9####TEST_9E####STEP_9E####STEP_10####INST_10##Static components: the hole class\n\nInside the play area, there will be 9 holes where the moles will poke their heads out, we can once again create these with <div> elements.\n\n[HTML]Add 9 *<div>* elements with *class* name *hole*##INST_10E####CODE_10####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: 0</p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}##CSS_E####JS##function rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nlet elems = document.body.getElementsByTagName('*');\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i;\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\nArray.from(elems).slice(0,-1).forEach(function(e,i) {\n    let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n    e.style.backgroundColor = rColor;\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n});\ndocument.body.appendChild(helper);##JS_E####CODE_10E####TEST_10####TEST_10E####STEP_10E####STEP_11####INST_11##Static components: positioning the holes\n\nBefore we can move them, we must see them.\n\n[CSS]Set the *width and height* to *140px*\n\n- We added a 2px margin around each of the <div> so you can tell them apart.\n\nNow the <div> elements are still lined up vertically, we need to position them so that they end up forming a 3 x 3 grid.\n\nOne way to do this is by turning them into inline-block elements and then adjusting the spacing between them.\n\n[CSS]Turn the holes into *inline-block* elements by using the *display* property\n\nThe play area is 500px by 500px, how can we fit 9 140px by 140px boxes inside of it? Here is the maths:\n\n[image: hole spacing]\n\n[CSS]Use the *padding* property to space out the holes evenly inside play area\n\n##INST_11E####CODE_11####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: 0</p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}##CSS_E####JS##let elems = Array.from(document.body.getElementsByTagName('*')).slice(0,-1);\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = rColor;\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nelems.forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nelems.forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr.sort().forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr.sort()[i-1])) {\n        e.style.backgroundColor = dupArr.sort()[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_11E####TEST_11####TEST_11E####STEP_11E####STEP_12####INST_12##Static components: the mole class\n\nInside each of the boxes, there must be a mole, but the moles must be able to hide behind something - or else they would always be visible and we don't want that.\n\nWe are going to use something called a mask, for now simply add 2 <div> elements with one nested under the other, and we will learn how masks work right after this.\n\n[HTML]Add a *<div>* with *class* name *mask* inside the first hole\n\n[HTML]Add another *<div>* with *class* name *mole* inside mask\n\nDon't worry about the other holes being empty, let's just concentrate on one mole at the moment, once you understand how to make one, adding more is just a matter of copy & paste.##INST_12E####CODE_12####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: 0</p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}##CSS_E####JS##let elems = document.body.getElementsByTagName('*');\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = rColor;\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nArray.from(elems).slice(0,-1).forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nArray.from(elems).slice(0,-1).forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr.sort().forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr.sort()[i-1])) {\n        e.style.backgroundColor = dupArr.sort()[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_12E####TEST_12####TEST_12E####STEP_12E####STEP_13####INST_13##Static components: hiding the mole with a mask\n\nWe have added some styles to the mask and the mole. They both have absolute position because we need to accurately control their positions ( i.e. not default page flow ), but they don't sit inside the hole any more, do you still remember how to put them back?\n\n[CSS]Put the mask and mole back into their hole using the *position* property\n\nYou may also notice that the mole image is on top of the mask, you can see this more clearly by changing the *top* property to *100px* at *LINE 62*.\n\nBut mole is still definitely inside of mask ( HTML LINE 16), if we hide everything that is outside of the boundary of the mask, we will effectively hide the mole.\n\n[CSS]Make the mask hide all overflowing content using the *overflow* property##INST_13E####CODE_13####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: 0</p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-size: 100% auto;\n    top: 50px;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}##CSS_E####JS##let elems = document.body.getElementsByTagName('*');\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = rColor;\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nArray.from(elems).slice(0,-1).forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nArray.from(elems).slice(0,-1).forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr.sort().forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr.sort()[i-1])) {\n        e.style.backgroundColor = dupArr.sort()[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_13E####TEST_13####TEST_13E####STEP_13E####STEP_14####INST_14##Static components: the dirt class\n\nOne last static component to add before we move onto more exciting stuff in JavaScript - a pile of dirt to make it look like the mole is actually coming out of the ground.\n\n[HTML]Add a *<div>* with *class* name *dirt*\n\nSwitch over to the *style.css* tab.\n\nWe want some of the CSS rules for moles ( CSS LINE 60 - 64 ) to also apply to the dirt class, rather than writing the same rules twice, we can simply make the CSS rules have two targets.\n\n[CSS]Modify the selector to target both *.mole* and *.dirt*##INST_14E####CODE_14####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: 0</p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 50px;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##let elems = document.body.getElementsByTagName('*');\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = e.className != 'dirt' ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nArray.from(elems).slice(0,-1).forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nArray.from(elems).slice(0,-1).forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr.sort().forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr.sort()[i-1])) {\n        e.style.backgroundColor = dupArr.sort()[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_14E####TEST_14####TEST_14E####STEP_14E####STEP_15####INST_15##Dynamic event: the scoreboard [sprint: span]\n\nDynamic events are the things that happen based on the input that is received by the game, or in simple terms cause and effect.\n\nWe have only two of these events in our game, one of which is the score, which must be increased when the player clicks on a mole.\n\nIn fact, let's do this one first.\n\n[HTML]Put the number *0* in a <span> element and give it the id name *score*\n\nThis will help us update the score later.\n\n##INST_15E####CODE_15####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//=============================== HELPER =====//\nlet elems = document.body.getElementsByTagName('*');\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = e.className != 'dirt' ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nArray.from(elems).slice(0,-1).forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nArray.from(elems).slice(0,-1).forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr.sort().forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr.sort()[i-1])) {\n        e.style.backgroundColor = dupArr.sort()[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_15E####TEST_15####TEST_15E####STEP_15E####STEP_16####INST_16##Dynamic event: score variable [Sprint: getElementById]\n\nRemember, all of HTML is static, meaning there is nothing you can do with HTML that can change how your game interacts with information it receives ( e.g. mouse clicks ). JavaScript, on the other hand, is great at it.\n\nComing back to our game, .we need control over the <span> element to update the score.\n\n[JS]Create a variable called *score* and reference the <span> element by its id name\n\n- tip: document.getElementById('id_name');\n\nNow we can change the content of the <span> element in JavaScript, try it yourself.\n\n[JS]Change the score value to *10* using the *innerHTML* method##INST_16E####CODE_16####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var score = document.getElementById('score');\n\nscore.innerHTML = 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//=============================== HELPER =====//\nlet elems = document.body.getElementsByTagName('*');\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = e.className != 'dirt' ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nArray.from(elems).slice(0,-1).forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nArray.from(elems).slice(0,-1).forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr.sort().forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr.sort()[i-1])) {\n        e.style.backgroundColor = dupArr.sort()[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_16E####TEST_16####TEST_16E####STEP_16E####STEP_17####INST_17##Dynamic event: score keeping [Sprint: onclick attribute]\n\nHow many points the player will score depends on how many moles get whacked ( i.e. clicked by the player ).\n\nSo, tell the mole to update the score only when he is clicked.\n\n[HTML]Add the *onclick* attribute to the mole and set it to *updateScore()*\n\n- tip: remember the brackets\n\nWhy don't you add one more mole to the 2nd hole, so we know our code works for other moles.\n\n[HTML]Copy the code from LINE 15 - 18 and paste it into LINE 21 - 24\n\n- tip: you need to do it one line at a time.##INST_17E####CODE_17####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole' onclick='updateScore()'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole' onclick='updateScore()'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    pointer-events: none;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var score = document.getElementById('score');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//=============================== HELPER =====//\n// console.clear();\nlet elems = Array.from(document.body.getElementsByTagName('*')).slice(0,-1);\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i, excClass = /dirt|mole/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (255 - 100) + 100);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction needColor(e) {\n    return !excClass.test(e.className);\n}\n\nfunction cfunc(a,b) {       // COMPARE STRING\n    return getName(a) < getName(b) ? -1 : (getName(a) > getName(b) ? 1 : 0);\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {       // HAS DIMENSION *OR* IS IN-LINE ELEMENT\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = needColor(e) ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nelems.forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nelems.forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr = dupArr.sort(cfunc);        // SORT DUPLICATE ELEMENT ARRAY\ndupArr.forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr[i-1])) {\n        e.style.backgroundColor = dupArr[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_17E####TEST_17####TEST_17E####STEP_17E####STEP_18####INST_18##Dynamic event: adding score 1/2 [Sprint: function]\n\nThe moles will look for a function called *updateScore* every time the detect a click, let's create that function so they can actually find it.\n\n[JS]Create a function called *updateScore*\n\n- tip: don't forget the brackets\n\nEvery time this function is evaluated, we want the score value ( innerHTML ) to have a new value, this new value should be *itself plus 1*\n\n[JS]Update the score with a new value that is equal to itself plus one\n\n- Your scoreboard is not completely working yet, but soon will be.##INST_18E####CODE_18####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole' onclick='updateScore()'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole' onclick='updateScore()'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    pointer-events: none;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var score = document.getElementById('score');\n\nfunction updateScore() {\n    score.innerHTML = score.innerHTML + 1;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//=============================== HELPER =====//\n// console.clear();\nlet elems = Array.from(document.body.getElementsByTagName('*')).slice(0,-1);\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i, excClass = /dirt|mole/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (255 - 100) + 100);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction needColor(e) {\n    return !excClass.test(e.className);\n}\n\nfunction cfunc(a,b) {       // COMPARE STRING\n    return getName(a) < getName(b) ? -1 : (getName(a) > getName(b) ? 1 : 0);\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {       // HAS DIMENSION *OR* IS IN-LINE ELEMENT\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = needColor(e) ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nelems.forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nelems.forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr = dupArr.sort(cfunc);        // SORT DUPLICATE ELEMENT ARRAY\ndupArr.forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr[i-1])) {\n        e.style.backgroundColor = dupArr[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_18E####TEST_18####TEST_18E####STEP_18E####STEP_19####INST_19##Dynamic event: adding score 2/2 [Sprint: parseInt]\n\nHere is why every time you click a mole, an addition 1 is attached to the score value *as text*:\n\n- The *innerHTML* method will always return the content of an element as a *string*\n\n- And anything added to a string will also be treated as a string\n\n- So the result is two strings added together as in *'2' + 'moles' equals '2moles'*\n\nBut you just learnt how to turn a string into an integer, so try it out.\n\n[JS]Turn one of the score values into an integer##INST_19E####CODE_19####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole' onclick='updateScore()'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole' onclick='updateScore()'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    pointer-events: none;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var score = document.getElementById('score');\n\nfunction updateScore() {\n    score.innerHTML = parseInt(score.innerHTML) + 1;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//=============================== HELPER =====//\n// console.clear();\nlet elems = Array.from(document.body.getElementsByTagName('*')).slice(0,-1);\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i, excClass = /dirt|mole/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (255 - 100) + 100);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction needColor(e) {\n    return !excClass.test(e.className);\n}\n\nfunction cfunc(a,b) {       // COMPARE STRING\n    return getName(a) < getName(b) ? -1 : (getName(a) > getName(b) ? 1 : 0);\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {       // HAS DIMENSION *OR* IS IN-LINE ELEMENT\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = needColor(e) ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nelems.forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nelems.forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr = dupArr.sort(cfunc);        // SORT DUPLICATE ELEMENT ARRAY\ndupArr.forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr[i-1])) {\n        e.style.backgroundColor = dupArr[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_19E####TEST_19####TEST_19E####STEP_19E####STEP_20####INST_20##Dynamic event: score reset\n\nEveryone likes getting scores, we get it, but in the name of fun and fair mechanics, we must reset the score back to zero at some point.\n\nEvery game should start with a score of zero, and when does the game start? Yes, when you click the *play button*.\n\n[HTML]Add the *onclick* attribute and set it to *resetScore()*\n\n- Switch over to the *script.js* tab\n\n[JS]Create a function called *resetScore*\n\n[JS]Update the score with a new value that is equal to *0*\n\nYour scoreboard is mostly complete, we will further improve it later but for now let's move on to the next dynamic event: animation!##INST_20E####CODE_20####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play' onclick='resetScore()'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole' onclick='updateScore()'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole' onclick='updateScore()'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    pointer-events: none;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var score = document.getElementById('score');\n\nfunction updateScore() {\n    score.innerHTML = parseInt(score.innerHTML) + 1;\n}\n\nfunction resetScore() {\n    score.innerHTML = 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n//=============================== HELPER =====//\n// console.clear();\nlet elems = Array.from(document.body.getElementsByTagName('*')).slice(0,-1);\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i, excClass = /dirt|mole/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (255 - 100) + 100);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction needColor(e) {\n    return !excClass.test(e.className);\n}\n\nfunction cfunc(a,b) {       // COMPARE STRING\n    return getName(a) < getName(b) ? -1 : (getName(a) > getName(b) ? 1 : 0);\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {       // HAS DIMENSION *OR* IS IN-LINE ELEMENT\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = needColor(e) ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nelems.forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nelems.forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr = dupArr.sort(cfunc);        // SORT DUPLICATE ELEMENT ARRAY\ndupArr.forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr[i-1])) {\n        e.style.backgroundColor = dupArr[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_20E####TEST_20####TEST_20E####STEP_20E####STEP_21####INST_21##Dynamic event: animation\n\nThere are two separate events where animation will be triggered by the player:\n\n- Clicking the play button will set off a chain of random animation ( we will do this in chapter 3 - event timing )\n\n- Clicking each mole will send that mole back down into the hole as well\n\nTo do this we need to make some changes to our existing code.\n\n[HTML]Delete the *onclick* attribute along with its value *resetScore()* from the play button\n\n- Switch over to the *script.js* tab\n\n[JS]Create a variable called *play* and reference the element id *play*\n\n[JS]Remove the function name *resetScore* while keeping the brackets *()*\n\n[JS]Insert *play.onclick =* before the keyword *function*\n\n[image: play.onclick]\n\n- You have just recreated the dynamic click event for the play button\n\n- We will discover the difference between the two methods later##INST_21E####CODE_21####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole' onclick='updateScore()'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole' onclick='updateScore()'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    pointer-events: none;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var score = document.getElementById('score');\nvar play = document.getElementById('play');\n\nfunction updateScore() {\n    score.innerHTML = parseInt(score.innerHTML) + 1;\n}\n\nplay.onclick = function() {\n    score.innerHTML = 0;\n}\n\n\n\n\n//=============================== HELPER =====//\n// console.clear();\nlet elems = Array.from(document.body.getElementsByTagName('*')).slice(0,-1);\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i, excClass = /dirt|mole/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (255 - 100) + 100);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction needColor(e) {\n    return !excClass.test(e.className);\n}\n\nfunction cfunc(a,b) {       // COMPARE STRING\n    return getName(a) < getName(b) ? -1 : (getName(a) > getName(b) ? 1 : 0);\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {       // HAS DIMENSION *OR* IS IN-LINE ELEMENT\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = needColor(e) ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nelems.forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nelems.forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr = dupArr.sort(cfunc);        // SORT DUPLICATE ELEMENT ARRAY\ndupArr.forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr[i-1])) {\n        e.style.backgroundColor = dupArr[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_21E####TEST_21####TEST_21E####STEP_21E####STEP_22####INST_22##Dynamic event: animation set-up\n\nThe moles are the only elements in our game that require animation, so our first task is to reference them in our script.\n\nBut they do not have any id names, you say? That's okay, what they do have are class names, so we can just use those.\n\n- tip: Use *getElementsByClassName('class_name')* this time\n\n[JS]Create a variable called *moles* and reference the element class *mole*\n\nSince we have two moles in the play area, the variable *moles* now contains both of them.\n\n- *moles[0] is the first* mole and *moles[1] is the second* mole\n\nNow do what we did with the play button for *the first mole*\n\n[JS]Remove the function name *updateScore* while keeping the brackets *()*\n\n[JS]Insert *moles[0].onclick =* before the keyword *function*\n\n- Switch over to the *index.html* tab\n\n[HTML]Delete the *onclick* attribute along with its value *updateScore()* from both moles##INST_22E####CODE_22####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    pointer-events: none;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var moles = document.getElementsByClassName('mole');\nvar score = document.getElementById('score');\nvar play = document.getElementById('play');\n\nmoles[0].onclick = function() {\n    score.innerHTML = parseInt(score.innerHTML) + 1;\n}\n\nplay.onclick = function() {\n    score.innerHTML = 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//=============================== HELPER =====//\n// console.clear();\nlet elems = Array.from(document.body.getElementsByTagName('*')).slice(0,-1);\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i, excClass = /dirt|mole/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (255 - 100) + 100);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction needColor(e) {\n    return !excClass.test(e.className);\n}\n\nfunction cfunc(a,b) {       // COMPARE STRING\n    return getName(a) < getName(b) ? -1 : (getName(a) > getName(b) ? 1 : 0);\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {       // HAS DIMENSION *OR* IS IN-LINE ELEMENT\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = needColor(e) ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nelems.forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nelems.forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr = dupArr.sort(cfunc);        // SORT DUPLICATE ELEMENT ARRAY\ndupArr.forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr[i-1])) {\n        e.style.backgroundColor = dupArr[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_22E####TEST_22####TEST_22E####STEP_22E####STEP_23####INST_23##Dynamic event: hiding a mole [Sprint: object.style]\n\nThe moles currently have the *top* property set to *17px* ( CSS LINE 69 ), which is to say they're 17px away from the top boundary of their parents ( the mask elements ).\n\nSo to move the moles further down, we need to *increase* the value of the top property.\n\n[JS]Set the *top* property of *moles[0]* to *"110px"*\n\n- tip: don't forget to use quotation marks\n\nRun your code and click the first mole to see it hide itself back inside the hole.\n\nOkay, that's one down. Next we will learn how to do the same for other moles, let's add another mole to the play area now so we have more to work with.\n\n[HTML]Copy the code from LINE 15 - 18 and paste it into LINE 27 - 30\n\n- tip: you need to do it one line at a time.##INST_23E####CODE_23####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    pointer-events: none;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var moles = document.getElementsByClassName('mole');\nvar score = document.getElementById('score');\nvar play = document.getElementById('play');\n\nmoles[0].onclick = function() {\n    score.innerHTML = parseInt(score.innerHTML) + 1;\n    moles[0].style.top = '110px';\n}\n\nplay.onclick = function() {\n    score.innerHTML = 0;\n}\n\n\n\n\n//=============================== HELPER =====//\n// console.clear();\nlet elems = Array.from(document.body.getElementsByTagName('*')).slice(0,-1);\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i, excClass = /dirt|mole/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (255 - 100) + 100);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction needColor(e) {\n    return !excClass.test(e.className);\n}\n\nfunction cfunc(a,b) {       // COMPARE STRING\n    return getName(a) < getName(b) ? -1 : (getName(a) > getName(b) ? 1 : 0);\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {       // HAS DIMENSION *OR* IS IN-LINE ELEMENT\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = needColor(e) ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nelems.forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nelems.forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr = dupArr.sort(cfunc);        // SORT DUPLICATE ELEMENT ARRAY\ndupArr.forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr[i-1])) {\n        e.style.backgroundColor = dupArr[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_23E####TEST_23####TEST_23E####STEP_23E####STEP_24####INST_24##Dynamic event: hiding 3 moles [Sprint: for loop]\n\nWe could manually write one onclick function for every mole, after all we will only have 9 in total. But there will come a time when you simply have too many elements to do it that way, so why not start doing it the smart way now?\n\n- Remember, our 3 moles will be represented by *moles[0]* to *moles[2]*\n\n[JS]Put the onclick function in a *for loop*\n\n- tip: the loop counter should *start from 0* and *run 3 times*\n\n- tip: *moles[0].onclick* should now become *moles[i].onclick*\n\n[JS]Change *moles[0].style.top* to *this.style.top*\n\nVariable scoping is a topic we will explore in the future, for now you can understand it as the following:\n\n- this = Whichever mole that was clicked and triggered this function\n\n##INST_24E####CODE_24####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    pointer-events: none;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var moles = document.getElementsByClassName('mole');\nvar score = document.getElementById('score');\nvar play = document.getElementById('play');\n\nfor (i = 0; i < 3; i++) {\n    moles[i].onclick = function() {\n        score.innerHTML = parseInt(score.innerHTML) + 1;\n        this.style.top = '110px';\n    };\n}\n\nplay.onclick = function() {\n    score.innerHTML = 0;\n};\n\n\n\n\n\n\n//=============================== HELPER =====//\n// console.clear();\nlet elems = Array.from(document.body.getElementsByTagName('*')).slice(0,-1);\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i, excClass = /dirt|mole/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (255 - 100) + 100);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction needColor(e) {\n    return !excClass.test(e.className);\n}\n\nfunction cfunc(a,b) {       // COMPARE STRING\n    return getName(a) < getName(b) ? -1 : (getName(a) > getName(b) ? 1 : 0);\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {       // HAS DIMENSION *OR* IS IN-LINE ELEMENT\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = needColor(e) ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nelems.forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nelems.forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr = dupArr.sort(cfunc);        // SORT DUPLICATE ELEMENT ARRAY\ndupArr.forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr[i-1])) {\n        e.style.backgroundColor = dupArr[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_24E####TEST_24####TEST_24E####STEP_24E####STEP_25####INST_25##Dynamic event: position transition [Sprint: transition]\n\nWe already coded the positions where the moles should be depending on different state of the game, now we can add the animation to make the look nice.\n\n[JS]Set the *transition* property so the moles are animated over a duration of *o.5 second*\n\n- tip: which property of the moles do we want to animate? top, left, right or bottom?\n\n##INST_25E####CODE_25####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    transition: top 0.5s;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    pointer-events: none;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var moles = document.getElementsByClassName('mole');\nvar score = document.getElementById('score');\nvar play = document.getElementById('play');\n\nfor (i = 0; i < 3; i++) {\n    moles[i].onclick = function() {\n        score.innerHTML = parseInt(score.innerHTML) + 1;\n        this.style.top = '110px';\n    };\n}\n\nplay.onclick = function() {\n    score.innerHTML = 0;\n};\n\n\n\n\n//=============================== HELPER =====//\n// console.clear();\nlet elems = Array.from(document.body.getElementsByTagName('*')).slice(0,-1);\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i, excClass = /dirt|mole/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (255 - 100) + 100);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction needColor(e) {\n    return !excClass.test(e.className);\n}\n\nfunction cfunc(a,b) {       // COMPARE STRING\n    return getName(a) < getName(b) ? -1 : (getName(a) > getName(b) ? 1 : 0);\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {       // HAS DIMENSION *OR* IS IN-LINE ELEMENT\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = needColor(e) ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nelems.forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nelems.forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr = dupArr.sort(cfunc);        // SORT DUPLICATE ELEMENT ARRAY\ndupArr.forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr[i-1])) {\n        e.style.backgroundColor = dupArr[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_25E####TEST_25####TEST_25E####STEP_25E####STEP_26####INST_26##Dynamic event: game loop\n\nAs mentioned at the beginner of this chapter, the play button will activate a series of animations, where a random mole is selector to emerge from its hole, maintaining the position for a short amount of time before it goes back into hiding. Players must click the mole during this time to score a point.\n\nWe will begin setting a few things up now.\n\n[JS]Create a variable called *timer* that is equal to *5*\n\n[JS]Fill the gaps in the function *gameLoop* so that the following is true\n\n- When *timer* is greater or equal to 0, decrease its value by 1\n\n- When *timer* is less than 0, set its value to 5\n\n[JS]Call the *gameLoop* function\n\n- tip: don't forget the brackets *()*\n\n- Run your code and click the play button to see the result##INST_26E####CODE_26####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    transition: top 0.5s;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    pointer-events: none;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var moles = document.getElementsByClassName('mole');\nvar score = document.getElementById('score');\nvar play = document.getElementById('play');\n\nvar timer = 5;\n\nfunction gameLoop() {\n    play.innerHTML = 'Time Left: ' + timer + 's';\n    \n    if (timer >= 0) {\n        timer--;\n    } else {\n        timer = 5;\n        play.innerHTML = 'Play';\n    }\n}\n\nfor (i = 0; i < 3; i++) {\n    moles[i].onclick = function() {\n        score.innerHTML = parseInt(score.innerHTML) + 1;\n        this.style.top = '110px';\n    };\n}\n\nplay.onclick = function() {\n    score.innerHTML = 0;\n    gameLoop();\n};\n\n\n\n\n//=============================== HELPER =====//\n// console.clear();\nlet elems = Array.from(document.body.getElementsByTagName('*')).slice(0,-1);\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i, excClass = /dirt|mole/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (255 - 100) + 100);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction needColor(e) {\n    return !excClass.test(e.className);\n}\n\nfunction cfunc(a,b) {       // COMPARE STRING\n    return getName(a) < getName(b) ? -1 : (getName(a) > getName(b) ? 1 : 0);\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {       // HAS DIMENSION *OR* IS IN-LINE ELEMENT\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = needColor(e) ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nelems.forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nelems.forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr = dupArr.sort(cfunc);        // SORT DUPLICATE ELEMENT ARRAY\ndupArr.forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr[i-1])) {\n        e.style.backgroundColor = dupArr[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_26E####TEST_26####TEST_26E####STEP_26E####STEP_27####INST_27##Event timing: game mechanic\n\nThe code you have been writing so far does not pay special attention to the aspect of time, that is to say they are executed as fast as your computer can handle.\n\nBeing able to control the timing of events is the key to creating games that are fun and challenging, without it things quickly become predictable and repetitive.\n\nIn the last step, we started setting up ##INST_27E####CODE_27####HTML####HTML_E####CSS####CSS_E####JS####JS_E####CODE_27E####TEST_27####TEST_27E####STEP_27E####STEP_28####INST_28##Event timing: the timer [Sprint: setTimeout]\n\nWhat we have created is a loop that will be completed after 7 iterations ( repeats ) of the *gameLoop* function ( i.e. every 7 clicks will take you back to the same place ).\n\nBut no player is going to click that button once every second just to reduce the timer by 1, we must make it loop itself every second until time runs out.\n\n[JS]Call the *gameLoop* function with a *1000* millisecond delay\n\nAnd we need to disable the play button during countdown so the game loop is not interrupted.\n\n[JS]Fill in the condition so the following is true:\n\n- the function *gameLoop* will only run when the play button displays *Play*\n\nOkay, that's your first timed event done!##INST_28E####CODE_28####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    transition: top 0.5s;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    pointer-events: none;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var moles = document.getElementsByClassName('mole');\nvar score = document.getElementById('score');\nvar play = document.getElementById('play');\n\nvar timer = 5;\n\nfunction gameLoop() {\n    play.innerHTML = 'Time Left: ' + timer + 's';\n    \n    if (timer >= 0) {\n        timer--;\n        setTimeout(gameLoop, 1000);\n    } else {\n        timer = 5;\n        play.innerHTML = 'Play';\n    }\n}\n\nfor (i = 0; i < 3; i++) {\n    moles[i].onclick = function() {\n        score.innerHTML = parseInt(score.innerHTML) + 1;\n        this.style.top = '110px';\n    };\n}\n\nplay.onclick = function() {\n    if (play.innerHTML == 'Play') {\n        score.innerHTML = 0;\n        gameLoop();\n    }\n};\n\n\n\n\n//=============================== HELPER =====//\n// console.clear();\nlet elems = Array.from(document.body.getElementsByTagName('*')).slice(0,-1);\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i, excClass = /dirt|mole/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (255 - 100) + 100);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction needColor(e) {\n    return !excClass.test(e.className);\n}\n\nfunction cfunc(a,b) {       // COMPARE STRING\n    return getName(a) < getName(b) ? -1 : (getName(a) > getName(b) ? 1 : 0);\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {       // HAS DIMENSION *OR* IS IN-LINE ELEMENT\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = needColor(e) ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nelems.forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nelems.forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr = dupArr.sort(cfunc);        // SORT DUPLICATE ELEMENT ARRAY\ndupArr.forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr[i-1])) {\n        e.style.backgroundColor = dupArr[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_28E####TEST_28####TEST_28E####STEP_28E####STEP_29####INST_29##Event timing: the moles\n\nHere are a few things to note:\n\n- We have added two functions: *randomTime(min, max)* and *randomMole()*\n\n- *randomTime(min, max)* is equal to a random integer between *min* and *max*\n\n- *randomMole()* will give you a randomly selected mole\n\n[JS]Fill in the gaps so the following is true:\n\n- the function *peep* will summon a mole every second\n\n- every mole will stay outside for at least half a second\n\n- some moles may stay up to 1.5 seconds##INST_29E####CODE_29####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n        <div class='hole'></div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 17px;\n    transition: top 0.5s;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    pointer-events: none;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var moles = document.getElementsByClassName('mole');\nvar score = document.getElementById('score');\nvar play = document.getElementById('play');\n\nvar timer = 5;\nvar lastMole;\n\nfunction peep() {\n    var rMole = randomMole();\n    \n    rMole.style.top = '17px';\n    setTimeout(hideMole, randomTime(500, 1500));\n    \n    function hideMole() {\n        rMole.style.top = '110px';\n    }\n}\n\nfunction gameLoop() {\n    peep();\n    play.innerHTML = 'Time Left: ' + timer + 's';\n    \n    if (timer >= 0) {\n        timer--;\n        setTimeout(gameLoop, 1000);\n    } else {\n        timer = 5;\n        play.innerHTML = 'Play';\n    }\n}\n\nfor (i = 0; i < 3; i++) {\n    moles[i].onclick = function() {\n        score.innerHTML = parseInt(score.innerHTML) + 1;\n        this.style.top = '110px';\n    };\n}\n\nplay.onclick = function() {\n    if (play.innerHTML == 'Play') {\n        score.innerHTML = 0;\n        gameLoop();\n    }\n};\n\nfunction randomTime(min, max) {\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction randomMole() {\n    var rNum = Math.floor(Math.random() * moles.length);\n    var mole = moles[rNum];\n\n    if (mole === lastMole) {\n         return randomMole();\n    }\n    lastMole = mole;\n    return mole;\n}\n\n\n//=============================== HELPER =====//\n// console.clear();\nlet elems = Array.from(document.body.getElementsByTagName('*')).slice(0,-1);\nlet helper = document.createElement('div');\nlet inline = /span|u|em|strong|b/i, excClass = /dirt|mole/i;\nlet str = '', dupArr = [];\n\nfunction rInt(v) {\n    let max = v == 1 ? 255 : 185, min = v == 1 ? 175 : 105;\n    return Math.round(Math.random() * (255 - 100) + 100);\n}\n\nfunction getClassName(arr) {\n    let output = [];\n    arr.forEach(function(item) {\n        output.push('.' + item);\n    });\n    return output.join(' ');\n}\n\nfunction get(e,p) {\n    return parseFloat(window.getComputedStyle(e).getPropertyValue(p));\n}\n\nfunction getName(e) {\n    return '[ ' + (e.id ? ('#' + e.id) + (e.classList.length > 0 ? ' ' + getClassName(e.classList) : '') : e.classList.length > 0 ? getClassName(e.classList) : e.tagName) + ' ]';\n}\n\nfunction needColor(e) {\n    return !excClass.test(e.className);\n}\n\nfunction cfunc(a,b) {       // COMPARE STRING\n    return getName(a) < getName(b) ? -1 : (getName(a) > getName(b) ? 1 : 0);\n}\n\nfunction attachCard(e,i) {\n    if (get(e,'width') * get(e,'height') > 0 || inline.test(e.tagName)) {       // HAS DIMENSION *OR* IS IN-LINE ELEMENT\n        let rColor = 'rgb(' + rInt(i%2) + ',' + rInt(i%2) + ',' + rInt(i%2) + ')';\n        e.style.backgroundColor = needColor(e) ? rColor : 'none';\n        helper.innerHTML += '<strong><p style="padding: 0 2px;box-shadow: 0 0 3px 1px rgba(0,0,0,0.5);margin: 4px 2px 0 2px;display: inline-block;background:' + rColor + '">' + getName(e) + '</p></strong>';\n    }\n}\nelems.forEach(function(e) { str += getName(e); });      // STORE ID/CLASS/TAG NAMES OF ALL ELEMENTS\nelems.forEach(function(e, i) {\n    let key = getName(e).replace(/\[/g,'\\[').replace(/\]/g,'\\]').replace(/\./g,'\\.');        // SEARCH TERM FOR EACH ELEMENT\n    if (str.match(new RegExp(key,'g')).length == 1) {       // UNIQUE ELEMENT\n        attachCard(e,i);\n    } else {\n        dupArr.push(e);     // ADD TO DUPLATE ELEMENT ARRAY\n    }\n});\ndupArr = dupArr.sort(cfunc);        // SORT DUPLICATE ELEMENT ARRAY\ndupArr.forEach(function(e,i) {       // COLOUR DUPLICATE ELEMENTS\n    if (i > 0 && getName(e) == getName(dupArr[i-1])) {\n        e.style.backgroundColor = dupArr[i-1].style.backgroundColor;\n    } else {\n        attachCard(e,i);\n    }\n});\nhelper.style.position = 'fixed';\nhelper.style.width = '80%';\nhelper.style.fontSize = '1em';\nhelper.style.textAlign = 'center';\nhelper.style.left = '50%';\nhelper.style.bottom = '0';\nhelper.style.transform = 'translateX(-50%)';\nhelper.style.userSelect = 'none';\nhelper.style.cursor = 'default';\ndocument.body.appendChild(helper);##JS_E####CODE_29E####TEST_29####TEST_29E####STEP_29E####STEP_30####INST_30##Summary\n\nThat's a wrap for this project.\n\nWe have removed the visual helper so you can add your own colours and images.\n\nIf you don't already know, this is how to export your game to Sandbox Mode:\n\n##INST_30E####CODE_30####HTML##<h1 id='title'>Title</h1>\n<h3 id='subtitle'>Subtitle</h3>\n\n<div id='game'>\n    <div id='mLeft' class='menu'>\n        <p>Score: <span id='score'>0</span></p>\n    </div>\n    \n    <div id='mRight' class='menu'>\n        <button id='play'>Play</button>\n    </div>\n        \n    <div id='playArea'>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n        <div class='hole'>\n            <div class='mask'>\n                <div class='mole'></div>\n            </div>\n            <div class='dirt'></div>\n        </div>\n    </div>\n</div>##HTML_E####CSS###title, #subtitle {\n    text-align: center;\n}\n\n#game {\n    position: relative;\n    width: 500px;\n    height: 600px;\n    margin: 0 auto;\n}\n\n#mLeft {\n    left: 0;\n    font-size: 2em;\n    text-align: center;\n}\n\n#mRight {\n    right: 0;\n    padding: 20px;\n}\n\n#playArea {\n    position: absolute;\n    width: 100%;\n    height: 500px;\n    bottom: 0;\n    font-size: 0;\n}\n\n#play {\n    width: 100%;\n    height: 100%;\n    font-size: 1.5em;\n}\n\n.menu {\n    position: absolute;\n    width: 50%;\n    height: 100px;\n    box-sizing: border-box;\n}\n\n.hole {\n    position: relative;\n    width: 140px;\n    height: 140px;\n    margin: 20px 0 0 20px;\n    display: inline-block;\n}\n\n.mask {\n    position: absolute;\n    width: 80%; height: 80%;\n    left: 12px;\n    border-radius: 50%;\n    overflow: hidden;\n}\n\n.mole, .dirt {\n    position: absolute;\n    width: 100%; height: 100%;\n    background-position: bottom;\n    background-size: 100% auto;\n    background-repeat: no-repeat;\n}\n\n.mole {\n    top: 110px;\n    transition: top 0.5s;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/mole.png');\n}\n\n.dirt {\n    pointer-events: none;\n    background-image: url('http://bsdacademysandbox.com/curriculum/wp-content/uploads/2017/06/whackamoledirt.png');\n}##CSS_E####JS##var moles = document.getElementsByClassName('mole');\nvar score = document.getElementById('score');\nvar play = document.getElementById('play');\n\nvar timer = 15;\nvar lastMole;\n\nfunction peep() {\n    var rMole = randomMole();\n    \n    rMole.style.top = '17px';\n    setTimeout(hideMole, randomTime(500, 1500));\n    \n    function hideMole() {\n        rMole.style.top = '110px';\n    }\n}\n\nfunction gameLoop() {\n    peep();\n    play.innerHTML = 'Time Left: ' + timer + 's';\n    \n    if (timer >= 0) {\n        timer--;\n        setTimeout(gameLoop, 1000);\n    } else {\n        timer = 15;\n        play.innerHTML = 'Play';\n    }\n}\n\nfor (i = 0; i < 9; i++) {\n    moles[i].onclick = function() {\n        score.innerHTML = parseInt(score.innerHTML) + 1;\n        this.style.top = '110px';\n    };\n}\n\nplay.onclick = function() {\n    if (play.innerHTML == 'Play') {\n        score.innerHTML = 0;\n        gameLoop();\n    }\n};\n\nfunction randomTime(min, max) {\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction randomMole() {\n    var rNum = Math.floor(Math.random() * moles.length);\n    var mole = moles[rNum];\n\n    if (mole === lastMole) {\n         return randomMole();\n    }\n    lastMole = mole;\n    return mole;\n}##JS_E####CODE_30E####TEST_30####TEST_30E####STEP_30E##