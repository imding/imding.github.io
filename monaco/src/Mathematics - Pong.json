{
  "missionUuid": "e92dd1b8-1af0-405f-80e0-ff01dd00cd2e",
  "settings": {
    "revision": "(4,1)",
    "level": 1,
    "title": "Mathematics - Pong",
    "description": "This is a project that illustrates how various mathematical concepts, such as trigonometry and algebra, come together to program a game using JavaScript. You will apply your understanding of algebra, trigonometry, and problem solving to create a classic arcade game - Pong!",
    "duration": null,
    "type": "project",
    "status": "exclusive",
    "resources": [
      {
        "path": "/resources/_TechConnected Library/Mathematics Projects/Mathematics - Pong - Teacher Prep Guide.pdf",
        "type": "res"
      }
    ],
    "recommended": false,
    "tags": [
      "48cd092f-bf0d-4f26-8ac2-ad1ebce69e79"
    ],
    "missionName": "mathematics---pong",
    "majorRevision": 4,
    "minorRevision": 2,
    "changeInfo": "(1315b022-3715-4e54-aa31-e917c53fb0be,\"2019-08-26 06:48:53.277679\")",
    "objectivesVersion": 2,
    "authorName": "Siuling Ding",
    "authorId": "1315b022-3715-4e54-aa31-e917c53fb0be",
    "ownerId": "1315b022-3715-4e54-aa31-e917c53fb0be",
    "ownerName": "Siuling Ding",
    "ownerEmail": "sd@bsd.education",
    "lastModified": "2019-08-26T06:48:53.277Z",
    "atEnd": "export",
    "cardImage": "/resources/project cards/project_placeholder.png",
    "cardLinks": [],
    "webOutput": true,
    "mobileView": {
      "mobileViewEnabled": false
    },
    "bodyLocking": false,
    "consoleType": null,
    "codeUnlocked": false,
    "missionVideo": "",
    "sandboxDefault": false,
    "imageUploadOnHtml": false
  },
  "steps": {
    "2081984618343952": {
      "title": "Deleted by merging process",
      "type": "interactive",
      "content": {
        "instructions": "<p>Pong is one of the oldest games ever made.</p>\n\n<p>In this project, we will be creating some of the game mechanics of this classic arcade game.</p>"
      },
      "deleted": true,
      "stepId": "2081984618343952",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 1000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n    <link href=\"style.css\" rel=\"stylesheet\">\r\n</head>\r\n\r\n<body>\r\n    <div id=\"game\">\r\n        <h1>Pong</h1>\r\n\r\n        <div id=\"gameArea\">\r\n            <div id=\"ball\"></div>\r\n            <div id=\"playerPad\"></div>\r\n            <div id=\"aiPad\"></div>\r\n            <span id=\"playerScore\">0</span>\r\n            <span id=\"aiScore\">0</span>\r\n        </div>\r\n\r\n        <button id=\"playPause\">PLAY</button>\r\n        <p>Move mouse in the game area to control your pad</p>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n\r\n</html>\r\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        },
        "script.js": {
          "contents": "var gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar maxSpeed = 14;\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar aiError = 60;\nvar aiTurn;\n\nvar playing = false;\nvar paused = false;\nvar lostBall = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n\n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n\n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n\n    checkWallRebound();\n    checkPadRebound();\n    updateAiPad();\n    checkLoss();\n\n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction updateAiPad() {\n    if (aiTurn) {\n        //  determine whether ball has moved pass 80% across its container\n        var inRange = ballX > gameWidth * 0.8;\n\n        if (inRange) {\n            var maxTop = gameHeight - padHeight;\n            var distance = aiPadX - ballX - ballSize;\n            var eta = distance / speedX;\n            var estimate = ballY + speedY * eta;\n            var aiPadY = estimate - padHeight / 2;\n\n            aiPadY = aiPadY + randomRange(aiError, -aiError);\n            aiPadY = Math.max(aiPadY, 5);\n            aiPadY = Math.min(aiPadY, maxTop - 5);\n\n            aiPad.setPosition(aiPadX, aiPadY);\n            aiTurn = false;\n\n            console.log(`AI moves to ${Math.round(aiPadY)}px.`);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkLoss() {\n  \tvar playerScore = document.querySelector('#playerScore');\n    if (ballX <= -ballSize) {\n        aiScore.innerText = parseInt(aiScore.innerText) + 1;\n        aiError /= 0.9;\n        resetGame();\n    }\n    else if (ballX >= gameWidth) {\n        playerScore.innerText = parseInt(playerScore.innerText) + 1;\n        aiError *= 0.9;\n        resetGame();\n    }\n}\n\nfunction resetGame() {\n    ballX = (gameWidth - ballSize) / 2;\n    ballY = (gameHeight - ballSize) / 2;\n\n    playing = false;\n    lostBall = false;\n\n    playPause.innerText = 'PLAY';\n}\n\nfunction checkPadCollision(pad) {\n    var minY = pad.offsetTop - ballSize;\n    var maxY = pad.offsetTop + padHeight;\n    var contact = ballY >= minY && ballY <= maxY;\n\n    if (contact) {\n        var ballRadius = ballSize / 2;\n        //  determine whether contact if a valid catch\n        var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;\n        \n        if (lostBall) {\n            //  reverse vertical movement\n            speedY *= -1;\n        }\n        else if (validCatch) {\n            randomizeVelocity();\n            //  reverse horizontal movement\n            speedX *= -1;\n\n            if (pad == playerPad) {\n                //  increase ball movement velocity\n                velocity += 0.2;\n                //  clamp at maximum velocity\n                velocity = Math.min(velocity, maxSpeed);\n                //  correct any clipping by the player pad\n                ballX = playerPadX + padWidth;\n                aiTurn = true;\n            }\n            else if (pad == aiPad) {\n                //  correct any clipping by the AI pad\n                ballX = aiPadX - ballSize;\n            }\n        }\n    }\n    else {\n        lostBall = true;\n    }\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        },
        "style.css": {
          "contents": "@import url(\"https://fonts.googleapis.com/css?family=VT323\");\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n    user-select: none;\r\n}\r\n\r\nbody, html {\r\n    height: 100vh;\r\n    font-family: \"VT323\";\r\n    text-align: center;\r\n    background-color: #333;\r\n}\r\n\r\nh1 {\r\n    color: ghostwhite;\r\n    font-size: 60px;\r\n    font-weight: normal;\r\n}\r\n\r\np {\r\n    margin-top: 10px;\r\n    color: gray;\r\n    font-size: 18px;\r\n}\r\n\r\nspan {\r\n    font-size: 36px;\r\n}\r\n\r\nbutton {\r\n    padding: 5px 20px;\r\n    border-radius: 10px;\r\n    color: silver;\r\n    font-family: \"VT323\";\r\n    font-size: 36px;\r\n    background-color: #111;\r\n    cursor: pointer;\r\n    border: none;\r\n    outline: none;\r\n}\r\n\r\n#gameArea {\r\n    position: relative;\r\n    margin: 10px auto;\r\n    padding: 0 10px;\r\n    background-color: black;\r\n    overflow: hidden;\r\n    cursor: none;\r\n}\r\n\r\n#playerPad, #aiPad, #ball {\r\n    position: absolute;\r\n}\r\n\r\n#playerScore {\r\n    margin-right: 10px;\r\n    color: dodgerblue;\r\n}\r\n\r\n#aiScore {\r\n    color: tomato;\r\n}\r\n\r\n#playerPad, #aiPad {\r\n    border-radius: 5px;\r\n}\r\n\r\n#playerPad {\r\n    background-color: dodgerblue;\r\n}\r\n\r\n#aiPad {\r\n    background-color: tomato;\r\n    transition: top 0.2s linear;\r\n}\r\n\r\n#ball {\r\n    background-color: silver;\r\n    border-radius: 50%;\r\n}\r\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        }
      },
      "tests": {
        "857180053209132": {
          "title": "Play the game and score at least 1 point against the AI.",
          "stepId": "2081984618343952",
          "testId": "857180053209132",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.on(`checkLoss`).var(`playerScore.innerText >= 1`);",
          "failureMessage": ""
        }
      }
    },
    "2360210548039334": {
      "title": "Introduction",
      "type": "interactive",
      "content": {
        "instructions": "<p>Pong is one of the oldest video games ever made.</p>\n\n<p>In this project, we will be creating some of the game mechanics of this classic arcade game.</p>"
      },
      "deleted": false,
      "stepId": "2360210548039334",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 1000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n    <link href=\"style.css\" rel=\"stylesheet\">\r\n</head>\r\n\r\n<body>\r\n    <div id=\"game\">\r\n        <h1>Pong</h1>\r\n\r\n        <div id=\"gameArea\">\r\n            <div id=\"ball\"></div>\r\n            <div id=\"playerPad\"></div>\r\n            <div id=\"aiPad\"></div>\r\n            <span id=\"playerScore\">0</span>\r\n            <span id=\"aiScore\">0</span>\r\n        </div>\r\n\r\n        <button id=\"playPause\">PLAY</button>\r\n        <p>Move mouse in the game area to control your pad</p>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n\r\n</html>\r\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        },
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar maxSpeed = 14;\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar aiError = 60;\nvar aiTurn;\n\nvar playing = false;\nvar paused = false;\nvar lostBall = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n\n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n\n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n\n    checkWallRebound();\n    checkPadRebound();\n    updateAiPad();\n    checkLoss();\n\n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction updateAiPad() {\n    if (aiTurn) {\n        //  determine whether ball has moved pass 80% across its container\n        var inRange = ballX > gameWidth * 0.8;\n\n        if (inRange) {\n            var maxTop = gameHeight - padHeight;\n            var distance = aiPadX - ballX - ballSize;\n            var eta = distance / speedX;\n            var estimate = ballY + speedY * eta;\n            var aiPadY = estimate - padHeight / 2;\n\n            aiPadY = aiPadY + randomRange(aiError, -aiError);\n            aiPadY = Math.max(aiPadY, 5);\n            aiPadY = Math.min(aiPadY, maxTop - 5);\n\n            aiPad.setPosition(aiPadX, aiPadY);\n            aiTurn = false;\n\n            console.log(`AI moves to ${Math.round(aiPadY)}px.`);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkLoss() {\n  \tconst playerScore = document.querySelector('#playerScore');\n  \n    if (ballX <= -ballSize) {\n        aiScore.innerText = parseInt(aiScore.innerText) + 1;\n        aiError /= 0.9;\n        resetGame();\n    }\n    else if (ballX >= gameWidth) {\n        playerScore.innerText = parseInt(playerScore.innerText) + 1;\n        aiError *= 0.9;\n        resetGame();\n    }\n}\n\nfunction resetGame() {\n    ballX = (gameWidth - ballSize) / 2;\n    ballY = (gameHeight - ballSize) / 2;\n\n    playing = false;\n    lostBall = false;\n\n    playPause.innerText = 'PLAY';\n}\n\nfunction checkPadCollision(pad) {\n    var minY = pad.offsetTop - ballSize;\n    var maxY = pad.offsetTop + padHeight;\n    var contact = ballY >= minY && ballY <= maxY;\n\n    if (contact) {\n        var ballRadius = ballSize / 2;\n        //  determine whether contact if a valid catch\n        var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;\n        \n        if (lostBall) {\n            //  reverse vertical movement\n            speedY *= -1;\n        }\n        else if (validCatch) {\n            randomizeVelocity();\n            //  reverse horizontal movement\n            speedX *= -1;\n\n            if (pad == playerPad) {\n                //  increase ball movement velocity\n                velocity += 0.2;\n                //  clamp at maximum velocity\n                velocity = Math.min(velocity, maxSpeed);\n                //  correct any clipping by the player pad\n                ballX = playerPadX + padWidth;\n                aiTurn = true;\n            }\n            else if (pad == aiPad) {\n                //  correct any clipping by the AI pad\n                ballX = aiPadX - ballSize;\n            }\n        }\n    }\n    else {\n        lostBall = true;\n    }\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        },
        "style.css": {
          "contents": "@import url(\"https://fonts.googleapis.com/css?family=VT323\");\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n    user-select: none;\r\n}\r\n\r\nbody, html {\r\n    height: 100vh;\r\n    font-family: \"VT323\";\r\n    text-align: center;\r\n    background-color: #333;\r\n}\r\n\r\nh1 {\r\n    color: ghostwhite;\r\n    font-size: 60px;\r\n    font-weight: normal;\r\n}\r\n\r\np {\r\n    margin-top: 10px;\r\n    color: gray;\r\n    font-size: 18px;\r\n}\r\n\r\nspan {\r\n    font-size: 36px;\r\n}\r\n\r\nbutton {\r\n    padding: 5px 20px;\r\n    border-radius: 10px;\r\n    color: silver;\r\n    font-family: \"VT323\";\r\n    font-size: 36px;\r\n    background-color: #111;\r\n    cursor: pointer;\r\n    border: none;\r\n    outline: none;\r\n}\r\n\r\n#gameArea {\r\n    position: relative;\r\n    margin: 10px auto;\r\n    padding: 0 10px;\r\n    background-color: black;\r\n    overflow: hidden;\r\n    cursor: none;\r\n}\r\n\r\n#playerPad, #aiPad, #ball {\r\n    position: absolute;\r\n}\r\n\r\n#playerScore {\r\n    margin-right: 10px;\r\n    color: dodgerblue;\r\n}\r\n\r\n#aiScore {\r\n    color: tomato;\r\n}\r\n\r\n#playerPad, #aiPad {\r\n    border-radius: 5px;\r\n}\r\n\r\n#playerPad {\r\n    background-color: dodgerblue;\r\n}\r\n\r\n#aiPad {\r\n    background-color: tomato;\r\n    transition: top 0.2s linear;\r\n}\r\n\r\n#ball {\r\n    background-color: silver;\r\n    border-radius: 50%;\r\n}\r\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        }
      },
      "tests": {
        "5146682293001380": {
          "title": "Play the game and score at least 1 point against the AI.",
          "stepId": "2360210548039334",
          "testId": "5146682293001380",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.on(`checkLoss`).var(`playerScore.innerText >= 1`);",
          "failureMessage": ""
        }
      }
    },
    "1987367171397066": {
      "title": "Giving game area a size",
      "type": "code",
      "content": {
        "instructions": "<p>Having played the game, let's start making it.</p>\n\n<p>First of all, we need to create a bigger arena for the game.</p>\n\n<p>We have created a function called <strong>setSize</strong> for every HTML element in this project. You can use it to change the size of any element.</p>\n\n<p>For example, to change the width and height of <strong>gameArea</strong>:</p>\n\n<pre class=\"language-javascript\"><code class=\"snippet\">gameArea.setSize(width, height);</code></pre>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variables</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>functions</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "1987367171397066",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 2000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n    <link href=\"style.css\" rel=\"stylesheet\">\r\n</head>\r\n\r\n<body>\r\n    <div id=\"game\">\r\n        <h1>Pong</h1>\r\n\r\n        <div id=\"gameArea\">\r\n            <div id=\"ball\"></div>\r\n            <div id=\"playerPad\"></div>\r\n            <div id=\"aiPad\"></div>\r\n            <span id=\"playerScore\">0</span>\r\n            <span id=\"aiScore\">0</span>\r\n        </div>\r\n\r\n        <button id=\"playPause\">PLAY</button>\r\n        <p>Move mouse in the game area to control your pad</p>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n\r\n</html>\r\n",
          "mode": "new_contents",
          "answers": []
        },
        "script.js": {
          "contents": "\n#BEGIN_EDITABLE#    #END_EDITABLE#\n#BEGIN_EDITABLE#    #END_EDITABLE#\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    \n    playPause.onclick = startGame;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n    }   \n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n\n\n",
          "mode": "new_contents",
          "answers": [
            "var gameWidth = 500;",
            "var gameHeight = 400;",
            "gameArea.setSize(gameWidth, gameHeight);"
          ]
        },
        "style.css": {
          "contents": "@import url(\"https://fonts.googleapis.com/css?family=VT323\");\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n    user-select: none;\r\n}\r\n\r\nbody, html {\r\n    height: 100vh;\r\n    font-family: \"VT323\";\r\n    text-align: center;\r\n    background-color: #333;\r\n}\r\n\r\nh1 {\r\n    color: ghostwhite;\r\n    font-size: 60px;\r\n    font-weight: normal;\r\n}\r\n\r\np {\r\n    margin-top: 10px;\r\n    color: gray;\r\n    font-size: 18px;\r\n}\r\n\r\nspan {\r\n    font-size: 36px;\r\n}\r\n\r\nbutton {\r\n    padding: 5px 20px;\r\n    border-radius: 10px;\r\n    color: silver;\r\n    font-family: \"VT323\";\r\n    font-size: 36px;\r\n    background-color: #111;\r\n    cursor: pointer;\r\n    border: none;\r\n    outline: none;\r\n}\r\n\r\n#gameArea {\r\n    position: relative;\r\n    margin: 10px auto;\r\n    padding: 0 10px;\r\n    background-color: black;\r\n    overflow: hidden;\r\n    cursor: none;\r\n}\r\n\r\n#playerPad, #aiPad, #ball {\r\n    position: absolute;\r\n}\r\n\r\n#playerScore {\r\n    margin-right: 10px;\r\n    color: dodgerblue;\r\n}\r\n\r\n#aiScore {\r\n    color: tomato;\r\n}\r\n\r\n#playerPad, #aiPad {\r\n    border-radius: 5px;\r\n}\r\n\r\n#playerPad {\r\n    background-color: dodgerblue;\r\n}\r\n\r\n#aiPad {\r\n    background-color: tomato;\r\n    transition: top 0.2s linear;\r\n}\r\n\r\n#ball {\r\n    background-color: silver;\r\n    border-radius: 50%;\r\n}\r\n",
          "mode": "new_contents",
          "answers": []
        }
      },
      "tests": {
        "780890267666012": {
          "title": "On <strong>JS line ##LINE('script.js','onload')-13##</strong>, create a variable called <strong>gameWidth</strong> to store the number <strong>500</strong>.",
          "stepId": "1987367171397066",
          "testId": "780890267666012",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var gameWidth = 500;`);",
          "failureMessage": ""
        },
        "520727340099314": {
          "title": "On <strong>JS line ##LINE('script.js','onload')-12##</strong>, create a variable called <strong>gameHeight</strong> to store the number <strong>400</strong>.",
          "stepId": "1987367171397066",
          "testId": "520727340099314",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`var gameHeight = 400;`);",
          "failureMessage": ""
        },
        "6826209337905851": {
          "title": "On <strong>JS line ##LINE('script.js','on init')+5##</strong>, change the width and height of <strong>gameArea</strong> to <strong>gameWidth</strong> and <strong>gameHeight</strong>.",
          "stepId": "1987367171397066",
          "testId": "6826209337905851",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`gameArea.setSize(gameWidth, gameHeight);`);",
          "failureMessage": ""
        }
      }
    },
    "6837389163564843": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>Having played the game, now let's start making it.</p>\n\n<p>To play the Pong game, we need a bigger arena.</p>\n\n<p>We created a function called <strong>setSize</strong> for every HTML element in this project, you can use it to change the size of any element.</p>\n\n<p>For example, to change the width and height of <strong>gameArea</strong>:</p>\n\n<pre class=\"language-javascript\"><code class=\"snippet\">gameArea.setSize(width, height);</code></pre>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variables</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>functions</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "6837389163564843",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 2000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n    <link href=\"style.css\" rel=\"stylesheet\">\r\n</head>\r\n\r\n<body>\r\n    <div id=\"game\">\r\n        <h1>Pong</h1>\r\n\r\n        <div id=\"gameArea\">\r\n            <div id=\"ball\"></div>\r\n            <div id=\"playerPad\"></div>\r\n            <div id=\"aiPad\"></div>\r\n            <span id=\"playerScore\">0</span>\r\n            <span id=\"aiScore\">0</span>\r\n        </div>\r\n\r\n        <button id=\"playPause\">PLAY</button>\r\n        <p>Move mouse in the game area to control your pad</p>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n\r\n</html>\r\n",
          "mode": "new_contents",
          "answers": []
        },
        "script.js": {
          "contents": "\n#BEGIN_EDITABLE#    #END_EDITABLE#\n#BEGIN_EDITABLE#    #END_EDITABLE#\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    \n    playPause.onclick = startGame;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n    }   \n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n\n\n",
          "mode": "new_contents",
          "answers": [
            "var gameWidth = 500;",
            "var gameHeight = 400;",
            "gameArea.setSize(gameWidth, gameHeight);"
          ]
        },
        "style.css": {
          "contents": "@import url(\"https://fonts.googleapis.com/css?family=VT323\");\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n    user-select: none;\r\n}\r\n\r\nbody, html {\r\n    height: 100vh;\r\n    font-family: \"VT323\";\r\n    text-align: center;\r\n    background-color: #333;\r\n}\r\n\r\nh1 {\r\n    color: ghostwhite;\r\n    font-size: 60px;\r\n    font-weight: normal;\r\n}\r\n\r\np {\r\n    margin-top: 10px;\r\n    color: gray;\r\n    font-size: 18px;\r\n}\r\n\r\nspan {\r\n    font-size: 36px;\r\n}\r\n\r\nbutton {\r\n    padding: 5px 20px;\r\n    border-radius: 10px;\r\n    color: silver;\r\n    font-family: \"VT323\";\r\n    font-size: 36px;\r\n    background-color: #111;\r\n    cursor: pointer;\r\n    border: none;\r\n    outline: none;\r\n}\r\n\r\n#gameArea {\r\n    position: relative;\r\n    margin: 10px auto;\r\n    padding: 0 10px;\r\n    background-color: black;\r\n    overflow: hidden;\r\n    cursor: none;\r\n}\r\n\r\n#playerPad, #aiPad, #ball {\r\n    position: absolute;\r\n}\r\n\r\n#playerScore {\r\n    margin-right: 10px;\r\n    color: dodgerblue;\r\n}\r\n\r\n#aiScore {\r\n    color: tomato;\r\n}\r\n\r\n#playerPad, #aiPad {\r\n    border-radius: 5px;\r\n}\r\n\r\n#playerPad {\r\n    background-color: dodgerblue;\r\n}\r\n\r\n#aiPad {\r\n    background-color: tomato;\r\n    transition: top 0.2s linear;\r\n}\r\n\r\n#ball {\r\n    background-color: silver;\r\n    border-radius: 50%;\r\n}\r\n",
          "mode": "new_contents",
          "answers": []
        }
      },
      "tests": {
        "584965732040776": {
          "title": "On <strong>JS line ##LINE('script.js','onload')-13##</strong>, create a variable called <strong>gameWidth</strong> to store the number <strong>500</strong>.",
          "stepId": "6837389163564843",
          "testId": "584965732040776",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var gameWidth = 500;`);",
          "failureMessage": ""
        },
        "3239707315653772": {
          "title": "On <strong>JS line ##LINE('script.js','onload')-12##</strong>, create a variable called <strong>gameHeight</strong> to store the number <strong>400</strong>.",
          "stepId": "6837389163564843",
          "testId": "3239707315653772",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`var gameHeight = 400;`);",
          "failureMessage": ""
        },
        "8860387304279913": {
          "title": "On <strong>JS line ##LINE('script.js','on init')+5##</strong>, change the width and height of <strong>gameArea</strong> to <strong>gameWidth</strong> and <strong>gameHeight</strong>.",
          "stepId": "6837389163564843",
          "testId": "8860387304279913",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`gameArea.setSize(gameWidth, gameHeight);`);",
          "failureMessage": ""
        }
      }
    },
    "6086247161083864": {
      "title": "Storing the ball position",
      "type": "code",
      "content": {
        "instructions": "<p>Now we have an arena, we can continue working on our game.</p>\n\n<p>The ball is currently sitting at the corner of the arena. Let's put it in the middle.</p>\n\n<p>Before we can do that, we'll need two variables to store the x and y positions for the ball. Let’s add those now. </p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variables</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "6086247161083864",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 3000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\n#BEGIN_EDITABLE#    #END_EDITABLE#\n#BEGIN_EDITABLE#    #END_EDITABLE#\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    \n    playPause.onclick = startGame;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n\n    }   \n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "var ballX;",
            "var ballY;"
          ]
        }
      },
      "tests": {
        "4912472886193530": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-8##</strong>, create a variable called <strong>ballX</strong>.",
          "stepId": "6086247161083864",
          "testId": "4912472886193530",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var ballX;`);",
          "failureMessage": ""
        },
        "3427894223316100": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-7##</strong>, create a variable called <strong>ballY</strong>.",
          "stepId": "6086247161083864",
          "testId": "3427894223316100",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`var ballY;`);",
          "failureMessage": ""
        }
      }
    },
    "7351778698647375": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>Now we have an arena, we can continue working on our game.</p>\n\n<p>The ball is currently sitting at the corner, let's put it in the middle of the arena.</p>\n\n<p>Before we can do that, we'll need two variables to store the x and y positions for the ball.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variables</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "7351778698647375",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 3000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\n#BEGIN_EDITABLE#    #END_EDITABLE#\n#BEGIN_EDITABLE#    #END_EDITABLE#\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    \n    playPause.onclick = startGame;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n\n    }   \n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "var ballX;",
            "var ballY;"
          ]
        }
      },
      "tests": {
        "4480258981868450": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-8##</strong>, create a variable called <strong>ballX</strong>.",
          "stepId": "7351778698647375",
          "testId": "4480258981868450",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var ballX;`);",
          "failureMessage": ""
        },
        "1998528374775080": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-7##</strong>, create a variable called <strong>ballY</strong>.",
          "stepId": "7351778698647375",
          "testId": "1998528374775080",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`var ballY;`);",
          "failureMessage": ""
        }
      }
    },
    "4688039950651966": {
      "title": "Positioning the ball in the middle of the arena",
      "type": "code",
      "content": {
        "instructions": "<p>When the ball is in the middle, its x position is equal to half the width of the game area minus half the ball size, as shown below:</p>\n\n<center><p class=\"notes\"><a href=\"https://app.bsd.education/resources/mathematics_pong_ballX_ballY.png\" target=\"_blank\"><img src=\"https://app.bsd.education/resources/mathematics_pong_ballX_ballY.png\" style=\"width: auto; max-width: 100%; max-height: 15vh\"></a><br>Click the image to open it in a new tab</p></center>\n\n<p>Now you know how the positioning works, can you work out how you can set the x and y position using arithmetic operators? </p>\n\n<p>After you work out the expressions for both axes, you can set the ball position using the <strong>setPosition</strong> function. For example, to move the ball to (x, y):</p>\n\n<pre class=\"language-javascript\"><code class=\"snippet\">ball.setPosition(x, y);</code></pre>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/6bc23e90-67a4-4ba5-a27c-35d5f3add4a1'>arithmetic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>functions</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "4688039950651966",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 4000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = #BEGIN_EDITABLE#    #END_EDITABLE#;\nvar ballY = #BEGIN_EDITABLE#    #END_EDITABLE#;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    \n    playPause.onclick = startGame;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n\n    }   \n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "(gameWidth - ballSize) / 2",
            "(gameHeight - ballSize) / 2",
            "ball.setPosition(ballX, ballY);"
          ]
        }
      },
      "tests": {
        "2268574497025220": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-8##</strong>, write down the expression for the ball's x position when it's in the middle of the game area.",
          "stepId": "4688039950651966",
          "testId": "2268574497025220",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`(gameWidth - ballSize) / 2`).or(`gameWidth / 2 - ballSize / 2`).or(`(gameWidth / 2) - (ballSize / 2)`).or(`(gameWidth / 2) - ballSize / 2`).or(`gameWidth / 2 - (ballSize / 2)`);",
          "failureMessage": ""
        },
        "8636375201782991": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-7##</strong>, write down the expression for the ball's y position when it's in the middle of the game area.",
          "stepId": "4688039950651966",
          "testId": "8636375201782991",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`(gameHeight - ballSize) / 2`).or(`gameHeightt / 2 - ballSize / 2`).or(`(gameHeightt / 2) - (ballSize / 2)`).or(`(gameHeightt / 2) - ballSize / 2`).or(`gameHeightt / 2 - (ballSize / 2)`);",
          "failureMessage": ""
        },
        "3643391575369228": {
          "title": "On <strong>JS line ##LINE('script.js','on startG')-5##</strong>, move the ball to <strong>(ballX, ballY)</strong>.",
          "stepId": "4688039950651966",
          "testId": "3643391575369228",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`ball.setPosition(ballX, ballY);`);",
          "failureMessage": ""
        }
      }
    },
    "5111762528826234": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>When the ball is in the middle, its x position is equal to half the width of the game area minus half the ball size, as shown below:</p>\n\n<center><p class=\"notes\"><a href=\"https://app.bsd.education/resources/mathematics_pong_ballX_ballY.png\" target=\"_blank\"><img src=\"https://app.bsd.education/resources/mathematics_pong_ballX_ballY.png\" style=\"width: auto; max-width: 100%; max-height: 15vh\"></a><br>Click the image to open it in a new tab</p></center>\n\n<p>Now you know about the x position, can you work out the y position?</p>\n\n<p>After you work out the expressions for both axis, you can set the ball position using the <strong>setPosition</strong> function, for example, to move the ball to (x, y):</p>\n\n<pre class=\"language-javascript\"><code class=\"snippet\">ball.setPosition(x, y);</code></pre>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/6bc23e90-67a4-4ba5-a27c-35d5f3add4a1'>arithmetic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>functions</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "5111762528826234",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 4000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = #BEGIN_EDITABLE#    #END_EDITABLE#;\nvar ballY = #BEGIN_EDITABLE#    #END_EDITABLE#;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    \n    playPause.onclick = startGame;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n\n    }   \n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "(gameWidth - ballSize) / 2",
            "(gameHeight - ballSize) / 2",
            "ball.setPosition(ballX, ballY);"
          ]
        }
      },
      "tests": {
        "8828309921857455": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-8##</strong>, write down the expression for the ball's x position when it's in the middle of the game area.",
          "stepId": "5111762528826234",
          "testId": "8828309921857455",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`(gameWidth - ballSize) / 2`).or(`gameWidth / 2 - ballSize / 2`).or(`(gameWidth / 2) - (ballSize / 2)`).or(`(gameWidth / 2) - ballSize / 2`).or(`gameWidth / 2 - (ballSize / 2)`);",
          "failureMessage": ""
        },
        "5241362263134662": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-7##</strong>, write down the expression for the ball's y position when it's in the middle of the game area.",
          "stepId": "5111762528826234",
          "testId": "5241362263134662",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`(gameHeight - ballSize) / 2`).or(`gameHeightt / 2 - ballSize / 2`).or(`(gameHeightt / 2) - (ballSize / 2)`).or(`(gameHeightt / 2) - ballSize / 2`).or(`gameHeightt / 2 - (ballSize / 2)`);",
          "failureMessage": ""
        },
        "793801730065952": {
          "title": "On <strong>JS line ##LINE('script.js','on startG')-5##</strong>, move the ball to <strong>(ballX, ballY)</strong>.",
          "stepId": "5111762528826234",
          "testId": "793801730065952",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`ball.setPosition(ballX, ballY);`);",
          "failureMessage": ""
        }
      }
    },
    "2249721844480466": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>Our ball is now in the center and we have a game area with multiple elements, such as the blue player pad and the red AI pad.</p>\n\n<p>The problem with the blue player pad is that right now, it doesn't move when we move our mouse.</p>\n\n<p>To make this pad controllable by the player, we need to call the <strong>updatePlayerPad</strong> function when there is mouse movement inside the game area, and then work out the y position for the player pad.</p>\n \n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/fcc587a2-1b05-413f-931d-3bd8096538b1'>onmousemove</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variables</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "2249721844480466",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 5000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n    <link href=\"style.css\" rel=\"stylesheet\">\r\n</head>\r\n\r\n<body>\r\n    <div id=\"game\">\r\n        <h1>Pong</h1>\r\n\r\n\r\n        <div id=\"gameArea\">\r\n            <div id=\"ball\"></div>\r\n            <div id=\"playerPad\"></div>\r\n            <div id=\"aiPad\"></div>\r\n            <span id=\"playerScore\">0</span>\r\n            <span id=\"aiScore\">0</span>\r\n        </div>\r\n\r\n        <button id=\"playPause\">PLAY</button>\r\n        <p>Move mouse in the game area to control your pad</p>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n\r\n</html>",
          "mode": "new_contents",
          "answers": []
        },
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n\n    }   \n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            #BEGIN_EDITABLE#    #END_EDITABLE#\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n\n\n",
          "mode": "new_contents",
          "answers": [
            "gameArea.onmousemove = updatePlayerPad;",
            "var playerPadY = mouseY - padHeight / 2;"
          ]
        }
      },
      "tests": {
        "314899626662750": {
          "title": "On <strong>JS line ##LINE('script.js','on start')-3##</strong>, handle the <code class=\"syntax\">gameArea.onmousemove</code> event using the <strong>updatePlayerPadPosition</strong> function.",
          "stepId": "2249721844480466",
          "testId": "314899626662750",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`gameArea.onmousemove = updatePlayerPad;`);",
          "failureMessage": ""
        },
        "1646317981028514": {
          "title": "On <strong>JS line ##LINE('script.js','on update')+5##</strong>, create a variable called <strong>playerPadY</strong> to store the expression <code class=\"syntax\">mouseY - padHeight / 2</code>.",
          "stepId": "2249721844480466",
          "testId": "1646317981028514",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`var playerPadY = mouseY - padHeight / 2;`).or(`var playerPadY = mouseY - (padHeight / 2);`);",
          "failureMessage": ""
        }
      }
    },
    "8763881220163995": {
      "title": "Player pad control",
      "type": "code",
      "content": {
        "instructions": "<p>Our ball is now in the center and we have a game area with multiple elements, such as the blue player pad and the red AI pad.</p>\n\n<p>The problem with the blue player pad is that right now, it doesn't move when we move our mouse.</p>\n\n<p>To make this pad controllable by the player, we need to call the <strong>updatePlayerPad</strong> function when there is mouse movement inside the game area, and then work out the y position for the player pad.</p>\n \n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/fcc587a2-1b05-413f-931d-3bd8096538b1'>onmousemove</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variables</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "8763881220163995",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 5000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n    <link href=\"style.css\" rel=\"stylesheet\">\r\n</head>\r\n\r\n<body>\r\n    <div id=\"game\">\r\n        <h1>Pong</h1>\r\n\r\n\r\n        <div id=\"gameArea\">\r\n            <div id=\"ball\"></div>\r\n            <div id=\"playerPad\"></div>\r\n            <div id=\"aiPad\"></div>\r\n            <span id=\"playerScore\">0</span>\r\n            <span id=\"aiScore\">0</span>\r\n        </div>\r\n\r\n        <button id=\"playPause\">PLAY</button>\r\n        <p>Move mouse in the game area to control your pad</p>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n\r\n</html>",
          "mode": "new_contents",
          "answers": []
        },
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n\n    }   \n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            #BEGIN_EDITABLE#    #END_EDITABLE#\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n\n\n",
          "mode": "new_contents",
          "answers": [
            "gameArea.onmousemove = updatePlayerPad;",
            "var playerPadY = mouseY - padHeight / 2;"
          ]
        }
      },
      "tests": {
        "6084429124317848": {
          "title": "On <strong>JS line ##LINE('script.js','on start')-3##</strong>, handle the <code class=\"syntax\">gameArea.onmousemove</code> event using the <strong>updatePlayerPad</strong> function.",
          "stepId": "8763881220163995",
          "testId": "6084429124317848",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`gameArea.onmousemove = updatePlayerPad;`);",
          "failureMessage": ""
        },
        "605892398611770": {
          "title": "On <strong>JS line ##LINE('script.js','on update')+5##</strong>, create a variable called <strong>playerPadY</strong> to store the expression <code class=\"syntax\">mouseY - padHeight / 2</code>.",
          "stepId": "8763881220163995",
          "testId": "605892398611770",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`var playerPadY = mouseY - padHeight / 2;`).or(`var playerPadY = mouseY - (padHeight / 2);`);",
          "failureMessage": ""
        }
      }
    },
    "5311508926438420": {
      "title": "Ball movement",
      "type": "code",
      "content": {
        "instructions": "<p>Click 'play' and move your mouse to see your pad move! Now, its time to get the ball to move as well.</p>\n\n<p>Since the ball moves up & down (along <strong>y</strong> axis) and left & right (along <strong>x</strong> axis), we need to give the ball a speed in both the <strong>x</strong> and <strong>y</strong> direction. The total speed taking into account both directions is known as <strong>velocity</strong>.</p>\n\n<p class=\"notes\"><strong>Note</strong>: we will set the velocity of the ball to 10, meaning it will move 10 pixels per second. Using Pythagoras Theorem we can give the x and y speed the value of 6 and 8, because 6^2 + 8^2 is equal to 10^2.</p>\n\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variable</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "5311508926438420",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 6000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\n#BEGIN_EDITABLE#    #END_EDITABLE#\n#BEGIN_EDITABLE#    #END_EDITABLE#\n#BEGIN_EDITABLE#    #END_EDITABLE#\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "var velocity = 10;",
            "var speedX = 6;",
            "var speedY = 8;"
          ]
        }
      },
      "tests": {
        "8772338089153143": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-9##</strong>, create a variable called <strong>velocity</strong> to store the number <strong>10</strong>.",
          "stepId": "5311508926438420",
          "testId": "8772338089153143",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var velocity = 10;`);",
          "failureMessage": ""
        },
        "3679379327390546": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-8##</strong>, create a variable called <strong>speedX</strong> to store the number <strong>6</strong>.",
          "stepId": "5311508926438420",
          "testId": "3679379327390546",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`var speedX = 6;`);",
          "failureMessage": ""
        },
        "7079242495756717": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-7##</strong>, create a variable called <strong>speedY</strong> to store the number <strong>8</strong>.",
          "stepId": "5311508926438420",
          "testId": "7079242495756717",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`var speedY = 8;`);",
          "failureMessage": ""
        }
      }
    },
    "1820935229155794": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>Click 'play' and move your mouse to see your pad move! Now, its time to get the ball to move as well.</p>\n\n<p>Since the ball moves up & down (along <strong>y</strong> axis) and left & right (along <strong>x</strong> axis), we need to give the ball a speed in both the <strong>x</strong> and <strong>y</strong> direction. The total speed taking into account both directions is known as <strong>velocity</strong>.</p>\n\n<p class=\"notes\"><strong>Note</strong>: we will set the velocity of the ball to 10, meaning it will move 10 pixels per second. Using Pythagoras Theorem we can give the x and y speed the value of 6 and 8, because 6^2 + 8^2 is equal to 10^2.</p>\n\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variable</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "1820935229155794",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 6000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\n#BEGIN_EDITABLE#    #END_EDITABLE#\n#BEGIN_EDITABLE#    #END_EDITABLE#\n#BEGIN_EDITABLE#    #END_EDITABLE#\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "var velocity = 10;",
            "var speedX = 6;",
            "var speedY = 8;"
          ]
        }
      },
      "tests": {
        "3370127973210116": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-9##</strong>, create a variable called <strong>velocity</strong> to store the number <strong>10</strong>.",
          "stepId": "1820935229155794",
          "testId": "3370127973210116",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var velocity = 10;`);",
          "failureMessage": ""
        },
        "6583347174538564": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-8##</strong>, create a variable called <strong>speedX</strong> to store the number <strong>6</strong>.",
          "stepId": "1820935229155794",
          "testId": "6583347174538564",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`var speedX = 6;`);",
          "failureMessage": ""
        },
        "2707817597784718": {
          "title": "On <strong>JS line ##LINE('script.js','on init')-7##</strong>, create a variable called <strong>speedY</strong> to store the number <strong>8</strong>.",
          "stepId": "1820935229155794",
          "testId": "2707817597784718",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`var speedY = 8;`);",
          "failureMessage": ""
        }
      }
    },
    "8633761867595067": {
      "title": "Updating ball location",
      "type": "code",
      "content": {
        "instructions": "<p>We have now created the variables that are required for the ball to move. </p>\n\n<p>However, the ball needs to move at its <strong>velocity</strong> from its current position (initially the middle).</p>\n\n<p>To do this, we will add the x and y speeds of the ball to its current x and y location.</p>\n\n<p>Then we can set the new position of the ball using the <code class=\"syntax\">ball.setPosition</code> function.</p>\n\n<p class=\"notes\"><strong>Note</strong>: We are writing this code inside the <strong>animatePong</strong> function. This function runs 30 times every second meaning the position of the ball constantly updates at 30 times a second.</p>\n\n<p>To do this, we will add the x and y speeds of the ball to its x and y location using arithmetic operators. </p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/6bc23e90-67a4-4ba5-a27c-35d5f3add4a1'>arithmetic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>function</a></p></li>\n\t\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "8633761867595067",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 7000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 0;\nvar speedY = 0;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    \n    #BEGIN_EDITABLE#    #END_EDITABLE#\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "ballX += speedX;",
            "ballY += speedY;",
            "ball.setPosition(ballX, ballY);"
          ]
        }
      },
      "tests": {
        "8820242310382431": {
          "title": "On <strong>JS line ##LINE('script.js','on anim')+1##</strong>, increase the variable speedX by ballX. .",
          "stepId": "8633761867595067",
          "testId": "8820242310382431",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`ballX += speedX;`).or(`ballX = ballX + speedX;`).or(`ballX = speedX + ballX;`);",
          "failureMessage": ""
        },
        "995796839304246": {
          "title": "On <strong>JS line ##LINE('script.js','on anim')+2##</strong>, increase the variable speedY by ballY. .",
          "stepId": "8633761867595067",
          "testId": "995796839304246",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`ballY += speedY;`).or(`ballY = ballY + speedY;`).or(`ballY = speedY + ballY;`);",
          "failureMessage": ""
        },
        "6226191111801244": {
          "title": "On <strong>JS line ##LINE('script.js','on anim')+4##</strong>, move the ball to <strong>(ballX, ballY)</strong> using the <code class=\"syntax\">setPosition</code> function.",
          "stepId": "8633761867595067",
          "testId": "6226191111801244",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`ball.setPosition(ballX, ballY);`);",
          "failureMessage": ""
        }
      }
    },
    "5911548291408360": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>We have now created the variables that are required for the ball to move. </p>\n\n<p>However, the ball needs to move at its <strong>velocity</strong> from its current position (initially the middle).</p>\n\n<p>To do this, we will add the x and y speeds of the ball to its current x and y location.</p>\n\n<p>Then we can set the new position of the ball using the <code class=\"syntax\">ball.setPosition</code> function.</p>\n\n<p class=\"notes\"><strong>Note</strong>: We are writing this code inside the <strong>animatePong</strong> function. This function runs 30 times every second meaning the position of the ball constantly updates at 30 times a second.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/6bc23e90-67a4-4ba5-a27c-35d5f3add4a1'>arithmetic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>function</a></p></li>\n\t\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "5911548291408360",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 7000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 0;\nvar speedY = 0;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    \n    #BEGIN_EDITABLE#    #END_EDITABLE#\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "ballX += speedX;",
            "ballY += speedY;",
            "ball.setPosition(ballX, ballY);"
          ]
        }
      },
      "tests": {
        "5232240226273750": {
          "title": "On <strong>JS line ##LINE('script.js','on anim')+1##</strong>, add the value of <strong>speedX</strong> to <strong>ballX</strong>.",
          "stepId": "5911548291408360",
          "testId": "5232240226273750",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`ballX += speedX;`).or(`ballX = ballX + speedX;`).or(`ballX = speedX + ballX;`);",
          "failureMessage": ""
        },
        "8237561342617185": {
          "title": "On <strong>JS line ##LINE('script.js','on anim')+2##</strong>, add the value of <strong>speedY</strong> to <strong>ballY</strong>.",
          "stepId": "5911548291408360",
          "testId": "8237561342617185",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`ballY += speedY;`).or(`ballY = ballY + speedY;`).or(`ballY = speedY + ballY;`);",
          "failureMessage": ""
        },
        "8399977383075141": {
          "title": "On <strong>JS line ##LINE('script.js','on anim')+4##</strong>, move the ball to <strong>(ballX, ballY)</strong> using the <code class=\"syntax\">setPosition</code> function.",
          "stepId": "5911548291408360",
          "testId": "8399977383075141",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`ball.setPosition(ballX, ballY);`);",
          "failureMessage": ""
        }
      }
    },
    "1280093666085806": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>Our ball now moves when we click play!</p>\n\n<p>However, the ball keeps going and doesn't stop at the edges of the game area. </p>\n\n<p>We can fix this by constantly checking through the <strong>animatePong</strong> function whether the ball has gone too high or low.</p>\n\n<p>We know the ball is touching the top edge when its y position is 0, and the bottom edge when the y position is equal to the height of the game area minus the ball size.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659'>if</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/164d32e9-c3c8-4b4d-9255-4210153b421b'>logic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variable</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "1280093666085806",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 8000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    \n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "var maxY = gameHeight - ballSize;",
            "if (ballY < 0 || ballY > maxY) {}"
          ]
        }
      },
      "tests": {
        "2793624457611714": {
          "title": "On <strong>JS line ##LINE('script.js','on checkW')+1##</strong>, create a variable called <strong>maxY</strong> to store the expression for when the ball is touching the bottom edge of the game area.",
          "stepId": "1280093666085806",
          "testId": "2793624457611714",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var maxY = gameHeight - ballSize;`);",
          "failureMessage": ""
        },
        "2224398275693980": {
          "title": "On <strong>JS line ##LINE('script.js','on checkW')+3##</strong>, create an <code class=\"syntax\">if</code> statement to check whether <strong>ballY</strong> is less than 0, or whether <strong>ballY</strong> is greater than <strong>maxY</strong>.",
          "stepId": "1280093666085806",
          "testId": "2224398275693980",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`if (ballY < 0 || ballY > maxY) {}`);",
          "failureMessage": ""
        }
      }
    },
    "8133559200314905": {
      "title": "Checking for wall rebound - 1/2",
      "type": "code",
      "content": {
        "instructions": "<p>Our ball now moves when we click play!</p>\n\n<p>However, the ball keeps going and doesn't stop at the edges of the game area. </p>\n\n<p>We can fix this by constantly checking through the <strong>animatePong</strong> function whether the ball has gone too high or low.</p>\n\n<p>We know the ball is touching the top edge when its y position is 0, and the bottom edge when the y position is equal to the height of the game area minus the ball size.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659'>if</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/164d32e9-c3c8-4b4d-9255-4210153b421b'>logic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variable</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "8133559200314905",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 8000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    \n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "var maxY = gameHeight - ballSize;",
            "if (ballY < 0 || ballY > maxY) {}"
          ]
        }
      },
      "tests": {
        "8523369737116199": {
          "title": "On <strong>JS line ##LINE('script.js','on checkW')+1##</strong>, create a variable called <strong>maxY</strong> to store the expression for when the ball is touching the bottom edge of the game area.",
          "stepId": "8133559200314905",
          "testId": "8523369737116199",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var maxY = gameHeight - ballSize;`);",
          "failureMessage": ""
        },
        "2829914514302968": {
          "title": "On <strong>JS line ##LINE('script.js','on checkW')+3##</strong>, create an <code class=\"syntax\">if</code> statement to check whether <strong>ballY</strong> is less than 0, or whether <strong>ballY</strong> is greater than <strong>maxY</strong>.",
          "stepId": "8133559200314905",
          "testId": "2829914514302968",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`if (ballY < 0 || ballY > maxY) {}`);",
          "failureMessage": ""
        }
      }
    },
    "3984590416402784": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>At this point, we know when the ball moves above or below the game area. </p>\n\n<p>However, in order to successfully rebound the ball, we still need to invert the vertical ball speed. This is because once the ball bounces off the wall, it will be travelling in the opposite direction on the Y-Axis.</p>\n\n<p>We are also going to randomize the velocity of the ball rebound - to make the game more challenging and exciting to play.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/6bc23e90-67a4-4ba5-a27c-35d5f3add4a1'>arithmetic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>function</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "3984590416402784",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 9000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n    \n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n\n    checkWallRebound();\n\n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "randomizeVelocity();",
            "speedY *= -1;"
          ]
        }
      },
      "tests": {
        "5635440472949274": {
          "title": "On <strong>JS line ##LINE('script.js','on checkW')+4##</strong>, randomize the ball speed by calling the function <strong>randomizeVelocity</strong>.",
          "stepId": "3984590416402784",
          "testId": "5635440472949274",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`randomizeVelocity();`);",
          "failureMessage": ""
        },
        "5452986360518010": {
          "title": "On <strong>JS line ##LINE('script.js','on checkW')+5##</strong>, invert the vertical direction of the ball by multiplying the variable <strong>speedY</strong> by <strong>-1</strong>.",
          "stepId": "3984590416402784",
          "testId": "5452986360518010",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`speedY *= -1;`).or(`speedY = speedY * -1;`).or(`speedY = -1 * speedY;`).or(`speedY = -speedY;`);",
          "failureMessage": ""
        }
      }
    },
    "6531384863607264": {
      "title": "Checking for wall rebound - 2/2",
      "type": "code",
      "content": {
        "instructions": "<p>At this point, we know when the ball moves above or below the game area. </p>\n\n<p>However, in order to successfully rebound the ball, we still need to invert the vertical ball speed. This is because once the ball bounces off the wall, it will be travelling in the opposite direction on the Y-Axis.</p>\n\n<p>We should also randomize the velocity of the ball rebound to make the game more challenging and exciting to play.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/6bc23e90-67a4-4ba5-a27c-35d5f3add4a1'>arithmetic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>function</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "6531384863607264",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 9000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n    \n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n\n    checkWallRebound();\n\n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "randomizeVelocity();",
            "speedY *= -1;"
          ]
        }
      },
      "tests": {
        "5654419607153630": {
          "title": "On <strong>JS line ##LINE('script.js','on checkW')+4##</strong>, randomize the ball speed by calling the function <strong>randomizeVelocity</strong>.",
          "stepId": "6531384863607264",
          "testId": "5654419607153630",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`randomizeVelocity();`);",
          "failureMessage": ""
        },
        "3840700903842774": {
          "title": "On <strong>JS line ##LINE('script.js','on checkW')+5##</strong>, invert the vertical direction of the ball by multiplying the variable <strong>speedY</strong> by <strong>-1</strong>.",
          "stepId": "6531384863607264",
          "testId": "3840700903842774",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`speedY *= -1;`).or(`speedY = speedY * -1;`).or(`speedY = -1 * speedY;`).or(`speedY = -speedY;`);",
          "failureMessage": ""
        }
      }
    },
    "4449893496810146": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>In the last step, we got the ball to bounce off the upper and lower edges of the game area.</p>\n\n<p>The next step is to get the ball to bounce off the player and AI pads as right now, the ball just goes straight through. This will take a few steps.</p>\n\n<p>To solve this, we need to first check when the ball past the <strong>x</strong> positions of the front of the pads.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659'>if</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>function</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "4449893496810146",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 10000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n    \n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    //  check whether ball has moved passed the AI pad\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "if (ballX <= playerPadX + padWidth) {}",
            "else if (ballX >= aiPadX - ballSize) {}"
          ]
        }
      },
      "tests": {
        "6266900961546810": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPa')+2##</strong>, create an <code class=\"syntax\">if</code> statement to check whether <strong>ballX</strong> is less than or equal to <strong>playerPadX</strong> plus <strong>padWidth</strong>.",
          "stepId": "4449893496810146",
          "testId": "6266900961546810",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`if (ballX <= playerPadX + padWidth) {}`);",
          "failureMessage": ""
        },
        "8759665477584531": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPa')+4##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>ballX</strong> is greater than or equal to <strong>aiPadX</strong> minus <strong>ballSize</strong>.",
          "stepId": "4449893496810146",
          "testId": "8759665477584531",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`else if (ballX >= aiPadX - ballSize) {}`);",
          "failureMessage": ""
        }
      }
    },
    "6158823528442350": {
      "title": "Checking for potential pad collision - 1/2",
      "type": "code",
      "content": {
        "instructions": "<p>In the last step, we got the ball to bounce off the upper and lower edges of the game area.</p>\n\n<p>The next step is to get the ball to bounce off the player and AI pads because at the moment the ball just goes straight through. This will take a few steps.</p>\n\n<p>To solve this, we need to first check when the ball passes the x positions of the front of the pads.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659'>if</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/faca0fa5-3b57-423b-98be-8dd2273f97e1'>relational operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>function</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "6158823528442350",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 10000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n    \n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    //  check whether ball has moved passed the AI pad\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "if (ballX <= playerPadX + padWidth) {}",
            "else if (ballX >= aiPadX - ballSize) {}"
          ]
        }
      },
      "tests": {
        "6612595510657528": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPa')+2##</strong>, create an <code class=\"syntax\">if</code> statement to check whether <strong>ballX</strong> is less than or equal to <strong>playerPadX</strong> plus <strong>padWidth</strong>.",
          "stepId": "6158823528442350",
          "testId": "6612595510657528",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`if (ballX <= playerPadX + padWidth) {}`);",
          "failureMessage": ""
        },
        "7430472501369337": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPa')+4##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>ballX</strong> is greater than or equal to <strong>aiPadX</strong> minus <strong>ballSize</strong>.",
          "stepId": "6158823528442350",
          "testId": "7430472501369337",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`else if (ballX >= aiPadX - ballSize) {}`);",
          "failureMessage": ""
        }
      }
    },
    "7202161555104793": {
      "title": "Checking for potential pad collision - 2/2",
      "type": "code",
      "content": {
        "instructions": "<p>We now know when the ball moves past the <strong>x</strong> value of the player pad or AI pad respectively.</p>\n\n<p>The ball could hit one of the pads, but it doesn’t always so we need to check whether the ball collides with the pad.</p>\n\n<p>The function <strong>checkPadCollision</strong> can do that. Let's call this function with the arguments <strong>playerPad</strong> and <strong>aiPad</strong> in our <code class=\"syntax\">if</code> and <code class=\"syntax\">else if</code> statements. The arguments are needed because the pads are two separate entities.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/c7d23919-b71c-429d-b41c-d9fd7f73ddc5'>function arguments</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>function</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "7202161555104793",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 11000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n    \n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n    }\n}\n\nfunction checkPadCollision(pad) {}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "checkPadCollision(playerPad);",
            "checkPadCollision(aiPad);"
          ]
        }
      },
      "tests": {
        "8254476125313715": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadR')+3##</strong>, call the function <code class=\"syntax\">checkPadCollision</code> with the argument <code class=\"syntax\">playerPad</code>.",
          "stepId": "7202161555104793",
          "testId": "8254476125313715",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`checkPadCollision(playerPad);`);",
          "failureMessage": ""
        },
        "2988818830905306": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadR')+7##</strong>, call the function <code class=\"syntax\">checkPadCollision</code> with the argument <code class=\"syntax\">aiPad</code>.",
          "stepId": "7202161555104793",
          "testId": "2988818830905306",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`checkPadCollision(aiPad);`);",
          "failureMessage": ""
        }
      }
    },
    "3606025737702388": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>We now know when the ball moves past the <strong>x</strong> value of the player pad or AI pad respectively.</p>\n\n<p>This is where the ball could hit one of the pads, but not always, we still need to check whether the pad actually collides with the ball and doesn't miss.</p>\n\n<p>The function <strong>checkPadCollision</strong> can do that. Let's call this function with the arguments <strong>playerPad</strong> and <strong>aiPad</strong> in our <code class=\"syntax\">if</code> and <code class=\"syntax\">else if</code> statements. The arguments are needed because the pads are two separate entities.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/c7d23919-b71c-429d-b41c-d9fd7f73ddc5'>function arguments</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>function</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "3606025737702388",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 11000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n    \n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n    }\n}\n\nfunction checkPadCollision(pad) {}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "checkPadCollision(playerPad);",
            "checkPadCollision(aiPad);"
          ]
        }
      },
      "tests": {
        "6838854266204659": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadR')+3##</strong>, call the function <code class=\"syntax\">checkPadCollision</code> with the arguement <code class=\"syntax\">playerPad</code>.",
          "stepId": "3606025737702388",
          "testId": "6838854266204659",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`checkPadCollision(playerPad);`);",
          "failureMessage": ""
        },
        "5001996398632868": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadR')+7##</strong>, call the function <code class=\"syntax\">checkPadCollision</code> with the arguement <code class=\"syntax\">aiPad</code>.",
          "stepId": "3606025737702388",
          "testId": "5001996398632868",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`checkPadCollision(aiPad);`);",
          "failureMessage": ""
        }
      }
    },
    "4771554399595558": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>Now the <strong>checkPadCollision</strong> function will run when the ball could potentially collide with one of the pads.</p>\n\n<p>To find out whether the ball actually collided with a pad, we need to know two things:</p>\n<ul>\n\t<li><p class=\"notes\">the ball's y position is greater than or equal to the pad's y position minus the ball size</p></li>\n\t<li><p class=\"notes\">the ball's y position is less than or equal to the pad's y position plus the pad's height</p></li>\n</ul>\n\n<p>If both of the above conditions are true, we know the ball is in contact with the pads, below is an illustration of this logic for the player pad:</p>\n\n<center><p class=\"notes\"><a href=\"https://app.bsd.education/resources/mathematics_pong_minX_maxY.png\" target=\"_blank\"><img src=\"https://app.bsd.education/resources/mathematics_pong_minX_maxY.png\" style=\"width: auto; max-width: 100%; max-height: 15vh\"></a><br>Click the image to open it in a new tab</p></center>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/164d32e9-c3c8-4b4d-9255-4210153b421b'>logic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/f1312685-0a69-4a56-9ef8-84c48b36ed36'>offsetHeight</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variable</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "4771554399595558",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 12000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n    \n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkPadCollision(pad) {\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "var minY = pad.offsetTop - ballSize;",
            "var maxY = pad.offsetTop + padHeight;",
            "var contact = ballY >= minY && ballY <= maxY;"
          ]
        }
      },
      "tests": {
        "2458988084544342": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+1##</strong>, create a variable called <strong>minY</strong> to store the minimum y position of the ball when it's in contact with a pad.",
          "stepId": "4771554399595558",
          "testId": "2458988084544342",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var minY = pad.offsetTop - ballSize;`);",
          "failureMessage": ""
        },
        "5183202306793286": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+2##</strong>, create a variable called <strong>maxY</strong> to store the maximum y position of the ball when it's in contact with a pad.",
          "stepId": "4771554399595558",
          "testId": "5183202306793286",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`var maxY = pad.offsetTop + padHeight;`);",
          "failureMessage": ""
        },
        "4850636606387286": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+3##</strong>, create a variable called <strong>contact</strong> to store whether both <code class=\"syntax\">ballY >= minY</code> and <code class=\"syntax\">ballY &lt;= maxY</code> are true.",
          "stepId": "4771554399595558",
          "testId": "4850636606387286",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`var contact = ballY >= minY && ballY <= maxY;`);",
          "failureMessage": ""
        }
      }
    },
    "8654652549940141": {
      "title": "Checking for contact with the pad",
      "type": "code",
      "content": {
        "instructions": "<p>Now the <strong>checkPadCollision</strong> function will run when the ball could potentially collide with one of the pads.</p>\n\n<p>To find out whether the ball actually collided with a pad, we need to know two things:</p>\n<ul>\n\t<li><p class=\"notes\">the ball's y position is greater than or equal to the pad's y position minus the ball size</p></li>\n\t<li><p class=\"notes\">the ball's y position is less than or equal to the pad's y position plus the pad's height</p></li>\n</ul>\n\n<p>If both of the above conditions are true, we know the ball is in contact with the pads, below is an illustration of this logic for the player pad:</p>\n\n<center><p class=\"notes\"><a href=\"https://app.bsd.education/resources/mathematics_pong_minX_maxY.png\" target=\"_blank\"><img src=\"https://app.bsd.education/resources/mathematics_pong_minX_maxY.png\" style=\"width: auto; max-width: 100%; max-height: 15vh\"></a><br>Click the image to open it in a new tab</p></center>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/164d32e9-c3c8-4b4d-9255-4210153b421b'>logic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/f1312685-0a69-4a56-9ef8-84c48b36ed36'>offsetHeight</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variable</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "8654652549940141",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 12000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n    \n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkPadCollision(pad) {\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "var minY = pad.offsetTop - ballSize;",
            "var maxY = pad.offsetTop + padHeight;",
            "var contact = ballY >= minY && ballY <= maxY;"
          ]
        }
      },
      "tests": {
        "4330036618741726": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+1##</strong>, create a variable called <strong>minY</strong> to store the minimum y position of the ball when it's in contact with a pad.",
          "stepId": "8654652549940141",
          "testId": "4330036618741726",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var minY = pad.offsetTop - ballSize;`);",
          "failureMessage": ""
        },
        "7323148344252859": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+2##</strong>, create a variable called <strong>maxY</strong> to store the maximum y position of the ball when it's in contact with a pad.",
          "stepId": "8654652549940141",
          "testId": "7323148344252859",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`var maxY = pad.offsetTop + padHeight;`);",
          "failureMessage": ""
        },
        "971123985126256": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+3##</strong>, create a variable called <strong>contact</strong> to store whether both <code class=\"syntax\">ballY >= minY</code> and <code class=\"syntax\">ballY &lt;= maxY</code> are true.",
          "stepId": "8654652549940141",
          "testId": "971123985126256",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`var contact = ballY >= minY && ballY <= maxY;`).or(`var contact = (ballY >= minY) && (ballY <= maxY);`);",
          "failureMessage": ""
        }
      }
    },
    "8367539001689251": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>In the last step, we defined the variable <strong>contact</strong> that becomes true when the ball makes contact with the pads.</p>\n\n<p>However, if less than half the ball is in contact with the pad, it seems unfair to allow the ball to rebound forwards.</p>\n\n<p>Therefore, we will create a variable called <strong>validCatch</strong> that is only true when at least half the ball is in contact with the pad. </p>\n\n<p>Moreover, when the pad misses the ball, we need to change the variable <strong>lostBall</strong> from <strong>false</strong> to <strong>true</strong>, to indicate that the ball can no longer be saved.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/6bc23e90-67a4-4ba5-a27c-35d5f3add4a1'>arithmetic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variable</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/164d32e9-c3c8-4b4d-9255-4210153b421b'>logic operators</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "8367539001689251",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 13000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\nvar lostBall = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n    \n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkPadCollision(pad) {\n    var minY = pad.offsetTop - ballSize;\n    var maxY = pad.offsetTop + padHeight;\n    var contact = ballY >= minY && ballY <= maxY;\n    \n    if (contact) {\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        //  determine whether contact if a valid catch\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n    }\n    \n    else {\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n    }\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "var ballRadius = ballSize / 2;",
            "var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;",
            "lostBall = true;"
          ]
        }
      },
      "tests": {
        "1344090965793018": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+6##</strong>, create a variable called <strong>ballRadius</strong> to store half of <strong>ballSize</strong>. ",
          "stepId": "8367539001689251",
          "testId": "1344090965793018",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var ballRadius = ballSize / 2;`).or(`var ballRadius = ballSize * 0.5;`);",
          "failureMessage": ""
        },
        "6728508067256606": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+8##</strong>, create a variable called <strong>validCatch</strong> to store whether both <code class=\"syntax\">ballY >= minY + ballRadius</code> and <code class=\"syntax\">ballY &lt;= maxY - ballRadius</code> are true.",
          "stepId": "8367539001689251",
          "testId": "6728508067256606",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;`);",
          "failureMessage": ""
        },
        "8048963587612429": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+12##</strong>, change the value of <strong>lostBall</strong> to <strong>true</strong>.",
          "stepId": "8367539001689251",
          "testId": "8048963587612429",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`lostBall = true;`);",
          "failureMessage": ""
        }
      }
    },
    "825564507366510": {
      "title": "Checking for a valid contact",
      "type": "code",
      "content": {
        "instructions": "<p>In the last step, we defined the variable <strong>contact</strong> that becomes true when the ball makes contact with the pads.</p>\n\n<p>If less than half the ball is in contact with the pad, it seems unfair to let the ball rebound.</p>\n\n<p>We will create a variable called <strong>validCatch</strong> that is only true when at least half of the ball makes contact with the pad.</p>\n\n<p>When the pad misses the ball, we need to change the variable <strong>lostBall</strong> from false to true to show that the ball can no longer be saved.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/6bc23e90-67a4-4ba5-a27c-35d5f3add4a1'>arithmetic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variable</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/164d32e9-c3c8-4b4d-9255-4210153b421b'>logic operators</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "825564507366510",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 13000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\nvar lostBall = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n    \n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkPadCollision(pad) {\n    var minY = pad.offsetTop - ballSize;\n    var maxY = pad.offsetTop + padHeight;\n    var contact = ballY >= minY && ballY <= maxY;\n    \n    if (contact) {\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        //  determine whether contact if a valid catch\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n    }\n    \n    else {\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n    }\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "var ballRadius = ballSize / 2;",
            "var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;",
            "lostBall = true;"
          ]
        }
      },
      "tests": {
        "3813307519835034": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+6##</strong>, create a variable called <strong>ballRadius</strong> to store half of <strong>ballSize</strong>. ",
          "stepId": "825564507366510",
          "testId": "3813307519835034",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var ballRadius = ballSize / 2;`).or(`var ballRadius = ballSize * 0.5;`);",
          "failureMessage": ""
        },
        "4608211046607558": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+8##</strong>, create a variable called <strong>validCatch</strong> to store whether both <code class=\"syntax\">ballY >= minY + ballRadius</code> and <code class=\"syntax\">ballY &lt;= maxY - ballRadius</code> are true.",
          "stepId": "825564507366510",
          "testId": "4608211046607558",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;`).or(`var validCatch = (ballY >= minY + ballRadius) && (ballY <= maxY - ballRadius);`);",
          "failureMessage": ""
        },
        "8274521881398675": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+12##</strong>, change the value of <strong>lostBall</strong> to <strong>true</strong>.",
          "stepId": "825564507366510",
          "testId": "8274521881398675",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`lostBall = true;`);",
          "failureMessage": ""
        }
      }
    },
    "4138590877322564": {
      "title": "Checking for catch or no-catch",
      "type": "code",
      "content": {
        "instructions": "<p>In the last step we added the code to determine what is a valid rebound and changed <strong>lostBall</strong> to true when it's not a rebound catch.</p>\n\n<p>The <strong>lostBall</strong> was necessary because when the ball is in contact with a pad, there are two scenarios:</p>\n<ul>\n\t<li><p class=\"notes\">the ball is in contact with a pad on its top and bottom side, i.e. it is a lost ball</p></li>\n\t<li><p class=\"notes\">the ball is in contact with a pad on its longer side and it's a valid catch</p></li>\n</ul>\n\n<p>We need to check which one of these is true inside the <code class=\"syntax\">if (contact) {}</code> statement.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659'>if</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "4138590877322564",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 14000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\nvar lostBall = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n    \n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    ball.setPosition(ballX, ballY);\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkPadCollision(pad) {\n    var minY = pad.offsetTop - ballSize;\n    var maxY = pad.offsetTop + padHeight;\n    var contact = ballY >= minY && ballY <= maxY;\n    \n    if (contact) {\n        var ballRadius = ballSize / 2;\n        //  determine whether contact if a valid catch\n        var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;\n        \n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        \n        #BEGIN_EDITABLE#    #END_EDITABLE#\n    }\n    else {\n        lostBall = true;\n    }\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "if (lostBall) {}",
            "else if (validCatch) {}"
          ]
        }
      },
      "tests": {
        "7883904776660963": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadColl')+10##</strong>, create an <code class=\"syntax\">if</code> statement to check whether <strong>lostBall</strong> is true.",
          "stepId": "4138590877322564",
          "testId": "7883904776660963",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`if (lostBall) {}`).or(`if (lostBall == true) {}`);",
          "failureMessage": ""
        },
        "850947431956302": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadColl')+12##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>validCatch</strong> is true.",
          "stepId": "4138590877322564",
          "testId": "850947431956302",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`else if (validCatch) {}`).or(`else if (validCatch == true) {}`);",
          "failureMessage": ""
        }
      }
    },
    "5891802836157450": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>In the last step we determined when it is considered a valid catch and changed <strong>lostBall</strong> to true when it's not a valid catch.</p>\n\n<p>The <strong>lostBall</strong> was necessary because when the ball is in contact with a pad, there are two scenarios:</p>\n<ul>\n\t<li><p class=\"notes\">the ball is in contact with a pad but it is already lost</p></li>\n\t<li><p class=\"notes\">the ball is in contact with a pad and it's a valid catch</p></li>\n</ul>\n\n<p>We need to check which one of these is true inside the <code class=\"syntax\">if (contact) {}</code> statement.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659'>if</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "5891802836157450",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 14000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar playing = false;\nvar paused = false;\nvar lostBall = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n    \n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    ball.setPosition(ballX, ballY);\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkPadCollision(pad) {\n    var minY = pad.offsetTop - ballSize;\n    var maxY = pad.offsetTop + padHeight;\n    var contact = ballY >= minY && ballY <= maxY;\n    \n    if (contact) {\n        var ballRadius = ballSize / 2;\n        //  determine whether contact if a valid catch\n        var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;\n        \n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        \n        #BEGIN_EDITABLE#    #END_EDITABLE#\n    }\n    else {\n        lostBall = true;\n    }\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "if (lostBall) {}",
            "else if (validCatch) {}"
          ]
        }
      },
      "tests": {
        "1804166984634372": {
          "title": "On <strong>JS line ##LINE('script.js','var valid')+2##</strong>, create an <code class=\"syntax\">if</code> statement to check whether <strong>lostBall</strong> is true.",
          "stepId": "5891802836157450",
          "testId": "1804166984634372",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`if (lostBall) {}`).or(`if (lostBall == true) {}`);",
          "failureMessage": ""
        },
        "927534218468484": {
          "title": "On <strong>JS line ##LINE('script.js','var valid')+4##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>validCatch</strong> is true.",
          "stepId": "5891802836157450",
          "testId": "927534218468484",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`else if (validCatch) {}`).or(`else if (validCatch == true) {}`);",
          "failureMessage": ""
        }
      }
    },
    "3802156595609214": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>The previous few steps have set us up for this step where we finally get the ball to rebound!</p>\n\n<p>There are two types of rebounds with the pads that will occur.  If more than half of the ball is in contact with the pad, the ball will rebound horizontally. However, if the ball contacts with the pad but the contact is less than half the ball, the ball will rebound vertically. </p>\n\n<p>We will rebound the ball off the pad the same way we rebounded the ball off the wall - by multiplying the directional speed by <strong>-1</strong>. We will also again randomize the velocity of the ball after collision.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/6bc23e90-67a4-4ba5-a27c-35d5f3add4a1'>arithmetic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>function</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "3802156595609214",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 15000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar maxSpeed = 14;\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar aiError = 60;\nvar aiTurn;\n\nvar playing = false;\nvar paused = false;\nvar lostBall = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    updateAiPad();\n    \n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction updateAiPad() {\n    if (aiTurn) {\n        //  determine whether ball has moved pass 80% across its container\n        var inRange = ballX > gameWidth * 0.8;\n\n        if (inRange) {\n            var maxTop = gameHeight - padHeight;\n            var distance = aiPadX - ballX - ballSize;\n            var eta = distance / speedX;\n            var estimate = ballY + speedY * eta;\n            var aiPadY = estimate - padHeight / 2;\n\n            aiPadY = aiPadY + randomRange(aiError, -aiError);\n            aiPadY = Math.max(aiPadY, 5);\n            aiPadY = Math.min(aiPadY, maxTop - 5);\n\n            aiPad.setPosition(aiPadX, aiPadY);\n            aiTurn = false;\n\n            console.log(`AI moves to ${Math.round(aiPadY)}px.`);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkPadCollision(pad) {\n    var minY = pad.offsetTop - ballSize;\n    var maxY = pad.offsetTop + padHeight;\n    var contact = ballY >= minY && ballY <= maxY;\n    \n    if (contact) {\n        var ballRadius = ballSize / 2;\n        //  determine whether contact if a valid catch\n        var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;\n        \n        if (lostBall) {\n            //  reverse vertical movement\n            #BEGIN_EDITABLE#    #END_EDITABLE#\n        }\n        else if (validCatch) {\n            #BEGIN_EDITABLE#    #END_EDITABLE#\n            //  reverse horizontal movement\n            #BEGIN_EDITABLE#    #END_EDITABLE#\n\n            if (pad == playerPad) {\n                //  increase ball movement velocity\n                velocity += 0.2;\n                //  clamp at maximum velocity\n                velocity = Math.min(velocity, maxSpeed);\n                //  correct any clipping by the player pad\n                ballX = playerPadX + padWidth;\n                aiTurn = true;\n            }\n            else if (pad == aiPad) {\n                //  correct any clipping by the AI pad\n                ballX = aiPadX - ballSize;\n            }\n        }\n    }\n    \n    else {\n        lostBall = true;\n    }\n        \n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "speedY *= -1;",
            "randomizeVelocity();",
            "speedX *= -1;"
          ]
        }
      },
      "tests": {
        "8230733187951331": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+12##</strong>, invert the ball vertically by multiplying the variable <strong>speedY</strong> by <strong>-1</strong>.",
          "stepId": "3802156595609214",
          "testId": "8230733187951331",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`speedY *= -1;`).or(`speedY = speedY * -1;`).or(`speedY = -1 * speedY;`).or(`speedY = -speedY;`);",
          "failureMessage": ""
        },
        "4272960942891042": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+15##</strong>, call the function <strong>randomizeVelocity</strong>.",
          "stepId": "3802156595609214",
          "testId": "4272960942891042",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`randomizeVelocity();`);",
          "failureMessage": ""
        },
        "6444020921167030": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+17##</strong>, invert the ball horizontally by multiplying the variable <strong>speedX</strong> by <strong>-1</strong>.",
          "stepId": "3802156595609214",
          "testId": "6444020921167030",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`speedX *= -1;`).or(`speedX = speedX * -1;`).or(`speedX = -1 * speedX;`).or(`speedX = -speedX;`);",
          "failureMessage": ""
        }
      }
    },
    "7799393405402347": {
      "title": "Setting collision outcome",
      "type": "code",
      "content": {
        "instructions": "<p>The previous few steps have set us up for this step where we finally get the ball to rebound!</p>\n\n<p>There are two types of rebounds with the pads that will occur:</p>\n<ul>\n\t<li><p class=\"notes\">If more than half of the ball is in contact with the pad, the ball will rebound horizontally, i.e. return the ball to the other side of the game area.</p></li>\n\t<li><p class=\"notes\">However, if the ball contacts with the pad but the contact is less than half the ball, the ball will rebound vertically, i.e. continue to the edge of the game area until it's complete out of bound.</p></li>\n</ul>\n\n<p>We will rebound the ball off the pad the same way we rebounded the ball off the wall - by multiplying the directional speed by <strong>-1</strong>. We will also again randomize the velocity of the ball after collision.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/6bc23e90-67a4-4ba5-a27c-35d5f3add4a1'>arithmetic operators</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>function</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "7799393405402347",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 15000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar maxSpeed = 14;\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar aiError = 60;\nvar aiTurn;\n\nvar playing = false;\nvar paused = false;\nvar lostBall = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    updateAiPad();\n    \n    ball.setPosition(ballX, ballY);\n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction updateAiPad() {\n    if (aiTurn) {\n        //  determine whether ball has moved pass 80% across its container\n        var inRange = ballX > gameWidth * 0.8;\n\n        if (inRange) {\n            var maxTop = gameHeight - padHeight;\n            var distance = aiPadX - ballX - ballSize;\n            var eta = distance / speedX;\n            var estimate = ballY + speedY * eta;\n            var aiPadY = estimate - padHeight / 2;\n\n            aiPadY = aiPadY + randomRange(aiError, -aiError);\n            aiPadY = Math.max(aiPadY, 5);\n            aiPadY = Math.min(aiPadY, maxTop - 5);\n\n            aiPad.setPosition(aiPadX, aiPadY);\n            aiTurn = false;\n\n            console.log(`AI moves to ${Math.round(aiPadY)}px.`);\n        }\n    }\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkPadCollision(pad) {\n    var minY = pad.offsetTop - ballSize;\n    var maxY = pad.offsetTop + padHeight;\n    var contact = ballY >= minY && ballY <= maxY;\n    \n    if (contact) {\n        var ballRadius = ballSize / 2;\n        //  determine whether contact if a valid catch\n        var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;\n        \n        if (lostBall) {\n            //  reverse vertical movement\n            #BEGIN_EDITABLE#    #END_EDITABLE#\n        }\n        else if (validCatch) {\n            #BEGIN_EDITABLE#    #END_EDITABLE#\n            //  reverse horizontal movement\n            #BEGIN_EDITABLE#    #END_EDITABLE#\n\n            if (pad == playerPad) {\n                //  increase ball movement velocity\n                velocity += 0.2;\n                //  clamp at maximum velocity\n                velocity = Math.min(velocity, maxSpeed);\n                //  correct any clipping by the player pad\n                ballX = playerPadX + padWidth;\n                aiTurn = true;\n            }\n            else if (pad == aiPad) {\n                //  correct any clipping by the AI pad\n                ballX = aiPadX - ballSize;\n            }\n        }\n    }\n    \n    else {\n        lostBall = true;\n    }\n        \n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "speedY *= -1;",
            "randomizeVelocity();",
            "speedX *= -1;"
          ]
        }
      },
      "tests": {
        "3677934766447038": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+12##</strong>, invert the ball vertically by multiplying the variable <strong>speedY</strong> by <strong>-1</strong>.",
          "stepId": "7799393405402347",
          "testId": "3677934766447038",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`speedY *= -1;`).or(`speedY = speedY * -1;`).or(`speedY = -1 * speedY;`).or(`speedY = -speedY;`);",
          "failureMessage": ""
        },
        "308769216573240": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+15##</strong>, call the function <strong>randomizeVelocity</strong>.",
          "stepId": "7799393405402347",
          "testId": "308769216573240",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`randomizeVelocity();`);",
          "failureMessage": ""
        },
        "4903900155712116": {
          "title": "On <strong>JS line ##LINE('script.js','on checkPadCo')+17##</strong>, invert the ball horizontally by multiplying the variable <strong>speedX</strong> by <strong>-1</strong>.",
          "stepId": "7799393405402347",
          "testId": "4903900155712116",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`speedX *= -1;`).or(`speedX = speedX * -1;`).or(`speedX = -1 * speedX;`).or(`speedX = -speedX;`);",
          "failureMessage": ""
        }
      }
    },
    "1291406098603012": {
      "title": "Check for lost ball",
      "type": "code",
      "content": {
        "instructions": "<p>In the last step, we successfully got the pads to rebound the ball. Now we can check when the ball has gone outside the game area completely.</p>\n\n<p>If the ball left the game area on the left side, it's x position will be less than it's own negative width.</p>\n\n<center><p class=\"notes\"><a href=\"https://app.bsd.education/resources/mathematics_pong_out.png\" target=\"_blank\"><img src=\"https://app.bsd.education/resources/mathematics_pong_out.png\" style=\"width: auto; max-width: 100%; max-height: 15vh\"></a><br>Click the image to open it in a new tab</p></center>\n\n<p>Similarly, if it has gone out on the right side, its x position is bigger than the width of the game area.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>function</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659'>if</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "1291406098603012",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 16000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar maxSpeed = 14;\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar aiError = 60;\nvar aiTurn;\n\nvar playing = false;\nvar paused = false;\nvar lostBall = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction updateAiPad() {\n    if (aiTurn) {\n        //  determine whether ball has moved pass 80% across its container\n        var inRange = ballX > gameWidth * 0.8;\n\n        if (inRange) {\n            var maxTop = gameHeight - padHeight;\n            var distance = aiPadX - ballX - ballSize;\n            var eta = distance / speedX;\n            var estimate = ballY + speedY * eta;\n            var aiPadY = estimate - padHeight / 2;\n\n            aiPadY = aiPadY + randomRange(aiError, -aiError);\n            aiPadY = Math.max(aiPadY, 5);\n            aiPadY = Math.min(aiPadY, maxTop - 5);\n\n            aiPad.setPosition(aiPadX, aiPadY);\n            aiTurn = false;\n\n            console.log(`AI moves to ${Math.round(aiPadY)}px.`);\n        }\n    }\n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    updateAiPad();\n    checkLoss();\n    \n    ball.setPosition(ballX, ballY);\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkPadCollision(pad) {\n    var minY = pad.offsetTop - ballSize;\n    var maxY = pad.offsetTop + padHeight;\n    var contact = ballY >= minY && ballY <= maxY;\n    \n    if (contact) {\n        var ballRadius = ballSize / 2;\n        //  determine whether contact if a valid catch\n        var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;\n        \n        if (lostBall) {\n            //  reverse vertical movement\n            speedY *= -1;\n        }\n        else if (validCatch) {\n            randomizeVelocity();\n            //  reverse horizontal movement\n            speedX *= -1;\n\n            if (pad == playerPad) {\n                //  increase ball movement velocity\n                velocity += 0.2;\n                //  clamp at maximum velocity\n                velocity = Math.min(velocity, maxSpeed);\n                //  correct any clipping by the player pad\n                ballX = playerPadX + padWidth;\n                aiTurn = true;\n            }\n            else if (pad == aiPad) {\n                //  correct any clipping by the AI pad\n                ballX = aiPadX - ballSize;\n            }\n        }\n    }\n    else {\n        lostBall = true;\n    }   \n}\n\nfunction checkLoss() {\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    \n    #BEGIN_EDITABLE#    #END_EDITABLE#\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "if (ballX < -ballSize) {}",
            "else if (ballX > gameWidth) {}"
          ]
        }
      },
      "tests": {
        "7998131369261175": {
          "title": "On <strong>JS line ##LINE('script.js','on checkLoss')+1##</strong>, create an <code class=\"syntax\">if</code> statement to check whether <strong>ballX</strong> is smaller than <strong>-ballSize</strong>.",
          "stepId": "1291406098603012",
          "testId": "7998131369261175",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`if (ballX < -ballSize) {}`);",
          "failureMessage": ""
        },
        "5765710547408180": {
          "title": "On <strong>JS line ##LINE('script.js','on checkLoss')+3##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>ballX</strong> is greater than <strong>gameWidth</strong>.",
          "stepId": "1291406098603012",
          "testId": "5765710547408180",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`else if (ballX > gameWidth) {}`);",
          "failureMessage": ""
        }
      }
    },
    "3951950529918194": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>In the last step, we successfully got the pads to rebound the ball. Now we can check when the ball has gone outside the game area completely.</p>\n\n<p>If the ball left the game area on the left side, it's x position will be less than it's own negative width.</p>\n\n<center><p class=\"notes\"><a href=\"https://app.bsd.education/resources/mathematics_pong_out.png\" target=\"_blank\"><img src=\"https://app.bsd.education/resources/mathematics_pong_out.png\" style=\"width: auto; max-width: 100%; max-height: 15vh\"></a><br>Click the image to open it in a new tab</p></center>\n\n<p>Similarly, if it has gone out on the right side, its x position is bigger than the width of the game area.</p>\n\n<p><strong>Required Syntax:</strong></p>\n\n<ul>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>function</a></p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659'>if</a></p></li>\n</ul>\n\n<hr><center><p class=\"highlight\"><strong style=\"letter-spacing: 2px\">OBJECTIVES</strong></p></center>",
        "startTab": "script.js"
      },
      "deleted": true,
      "stepId": "3951950529918194",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 16000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar maxSpeed = 14;\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar aiError = 60;\nvar aiTurn;\n\nvar playing = false;\nvar paused = false;\nvar lostBall = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction updateAiPad() {\n    if (aiTurn) {\n        //  determine whether ball has moved pass 80% across its container\n        var inRange = ballX > gameWidth * 0.8;\n\n        if (inRange) {\n            var maxTop = gameHeight - padHeight;\n            var distance = aiPadX - ballX - ballSize;\n            var eta = distance / speedX;\n            var estimate = ballY + speedY * eta;\n            var aiPadY = estimate - padHeight / 2;\n\n            aiPadY = aiPadY + randomRange(aiError, -aiError);\n            aiPadY = Math.max(aiPadY, 5);\n            aiPadY = Math.min(aiPadY, maxTop - 5);\n\n            aiPad.setPosition(aiPadX, aiPadY);\n            aiTurn = false;\n\n            console.log(`AI moves to ${Math.round(aiPadY)}px.`);\n        }\n    }\n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    updateAiPad();\n    checkLoss();\n    \n    ball.setPosition(ballX, ballY);\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkPadCollision(pad) {\n    var minY = pad.offsetTop - ballSize;\n    var maxY = pad.offsetTop + padHeight;\n    var contact = ballY >= minY && ballY <= maxY;\n    \n    if (contact) {\n        var ballRadius = ballSize / 2;\n        //  determine whether contact if a valid catch\n        var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;\n        \n        if (lostBall) {\n            //  reverse vertical movement\n            speedY *= -1;\n        }\n        else if (validCatch) {\n            randomizeVelocity();\n            //  reverse horizontal movement\n            speedX *= -1;\n\n            if (pad == playerPad) {\n                //  increase ball movement velocity\n                velocity += 0.2;\n                //  clamp at maximum velocity\n                velocity = Math.min(velocity, maxSpeed);\n                //  correct any clipping by the player pad\n                ballX = playerPadX + padWidth;\n                aiTurn = true;\n            }\n            else if (pad == aiPad) {\n                //  correct any clipping by the AI pad\n                ballX = aiPadX - ballSize;\n            }\n        }\n    }\n    else {\n        lostBall = true;\n    }   \n}\n\nfunction checkLoss() {\n    #BEGIN_EDITABLE#    #END_EDITABLE#\n    \n    #BEGIN_EDITABLE#    #END_EDITABLE#\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n",
          "mode": "new_contents",
          "answers": [
            "if (ballX < -ballSize) {}",
            "else if (ballX > gameWidth) {}"
          ]
        }
      },
      "tests": {
        "2201148165378264": {
          "title": "On <strong>JS line ##LINE('script.js','on checkLoss')+1##</strong>, create an <code class=\"syntax\">if</code> statement to check whether <strong>ballX</strong> is smaller than <strong>-ballSize</strong>.",
          "stepId": "3951950529918194",
          "testId": "2201148165378264",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`if (ballX < -ballSize) {}`);",
          "failureMessage": ""
        },
        "3891677518475626": {
          "title": "On <strong>JS line ##LINE('script.js','on checkLoss')+3##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>ballX</strong> is greater than <strong>gameWidth</strong>.",
          "stepId": "3951950529918194",
          "testId": "3891677518475626",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`else if (ballX > gameWidth) {}`);",
          "failureMessage": ""
        }
      }
    },
    "3016428570273514": {
      "title": "Deleted by merging process",
      "type": "code",
      "content": {
        "instructions": "<p>Amazing work! The game now knows when a ball has left the game area and on which side, this means the score is now working.</p>\n<p>Pong is now completely finished! Here is a recap of what we used:</p>\n<ul>\n<li>\n<p class=\"notes\">We used <a href=\"#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52\">variables</a> to store information required for the many calculations.</p>\n</li>\n<li>\n<p class=\"notes\">We created and called <a href=\"#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1\">functions</a> to solve specific problems.</p>\n</li>\n<li>\n<p class=\"notes\">The control for the player pad was achieved using the <a href=\"#glossary/javascript/fcc587a2-1b05-413f-931d-3bd8096538b1\">onmousemove</a> event listener.</p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/164d32e9-c3c8-4b4d-9255-4210153b421b\">logic operators</a> were used to determine what was a valid contact on the pad.</p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659\">if</a> statements were used to run different code depending on which conditions were met.</p>\n</li>\n</ul>"
      },
      "deleted": true,
      "stepId": "3016428570273514",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 17000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar maxSpeed = 14;\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar aiError = 60;\nvar aiTurn;\n\nvar playing = false;\nvar paused = false;\nvar lostBall = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction updateAiPad() {\n    if (aiTurn) {\n        //  determine whether ball has moved pass 80% across its container\n        var inRange = ballX > gameWidth * 0.8;\n\n        if (inRange) {\n            var maxTop = gameHeight - padHeight;\n            var distance = aiPadX - ballX - ballSize;\n            var eta = distance / speedX;\n            var estimate = ballY + speedY * eta;\n            var aiPadY = estimate - padHeight / 2;\n\n            aiPadY = aiPadY + randomRange(aiError, -aiError);\n            aiPadY = Math.max(aiPadY, 5);\n            aiPadY = Math.min(aiPadY, maxTop - 5);\n\n            aiPad.setPosition(aiPadX, aiPadY);\n            aiTurn = false;\n\n            console.log(`AI moves to ${Math.round(aiPadY)}px.`);\n        }\n    }\n}\n\nfunction checkLoss() {\n    if (ballX <= -ballSize) {\n        aiScore.innerText = parseInt(aiScore.innerText) + 1;\n        aiError /= 0.9;\n        resetGame();\n    }\n    else if (ballX >= gameWidth) {\n        playerScore.innerText = parseInt(playerScore.innerText) + 1;\n        aiError *= 0.9;\n        resetGame();\n    }\n}\n\nfunction resetGame() {\n    ballX = (gameWidth - ballSize) / 2;\n    ballY = (gameHeight - ballSize) / 2;\n\n    playing = false;\n    lostBall = false;\n\n    playPause.innerText = 'PLAY';\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkPadCollision(pad) {\n    var minY = pad.offsetTop - ballSize;\n    var maxY = pad.offsetTop + padHeight;\n    var contact = ballY >= minY && ballY <= maxY;\n    \n    if (contact) {\n        var ballRadius = ballSize / 2;\n        //  determine whether contact if a valid catch\n        var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;\n        \n        if (lostBall) {\n            //  reverse vertical movement\n            speedY *= -1;\n        }\n        else if (validCatch) {\n            randomizeVelocity();\n            //  reverse horizontal movement\n            speedX *= -1;\n\n            if (pad == playerPad) {\n                //  increase ball movement velocity\n                velocity += 0.2;\n                //  clamp at maximum velocity\n                velocity = Math.min(velocity, maxSpeed);\n                //  correct any clipping by the player pad\n                ballX = playerPadX + padWidth;\n                aiTurn = true;\n            }\n            else if (pad == aiPad) {\n                //  correct any clipping by the AI pad\n                ballX = aiPadX - ballSize;\n            }\n        }\n    }\n    \n    else {\n        lostBall = true;\n    }\n        \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    updateAiPad();\n    checkLoss();\n    \n    ball.setPosition(ballX, ballY);\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        }
      },
      "tests": {}
    },
    "1542473530144314": {
      "title": "Summary",
      "type": "code",
      "content": {
        "instructions": "<p>Amazing work! The game now knows when a ball has left the game area and on which side. This means the score is now working and Pong is completely finished! </p>\n\n<p>Here is a recap of what we used:</p>\n\n<ul>\n\t<li><p class=\"notes\">We used <a href='#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52'>variables</a> to store information required for the many calculations.</p></li>\n\t<li><p class=\"notes\">We created and called <a href='#glossary/javascript/37322df6-fd28-4a7e-992f-05f0e06ecfe1'>functions</a> to solve specific problems.</p></li>\n\t<li><p class=\"notes\">The control for the player pad was achieved using the <a href='#glossary/javascript/fcc587a2-1b05-413f-931d-3bd8096538b1'>onmousemove</a> event listener.</p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/164d32e9-c3c8-4b4d-9255-4210153b421b'>logic operators</a> were used to determine what was a valid contact on the pad.</p></li>\n\t<li><p class=\"notes\"><a href='#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659'>if</a> statements were used to run different code depending on which conditions were met.</p></li>\n</ul>"
      },
      "deleted": false,
      "stepId": "1542473530144314",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 17000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "#BEGIN_EDITABLE#\nvar gameWidth = 500;\nvar gameHeight = 400;\n\nvar padWidth = 10;\nvar padHeight = 80;\nvar playerPadX = 10;\nvar aiPadX = gameWidth - padWidth - playerPadX;\n\nvar ballSize = 18;\nvar ballX = (gameWidth - ballSize) / 2;\nvar ballY = (gameHeight - ballSize) / 2;\n\nvar maxSpeed = 14;\nvar velocity = 10;\nvar speedX = 6;\nvar speedY = 8;\n\nvar aiError = 60;\nvar aiTurn;\n\nvar playing = false;\nvar paused = false;\nvar lostBall = false;\n\nwindow.onload = initGame;\n\nfunction initGame() {\n    simplifyElementStyling();\n\n    var padStartingY = (gameHeight - padHeight) / 2;\n    \n    gameArea.setSize(gameWidth, gameHeight);\n    playerPad.setSize(padWidth, padHeight);\n    aiPad.setSize(padWidth, padHeight);\n    ball.setSize(ballSize);\n\n    playerPad.setPosition(playerPadX, padStartingY);\n    aiPad.setPosition(aiPadX, padStartingY);\n    ball.setPosition(ballX, ballY);\n    \n    playPause.onclick = startGame;\n    gameArea.onmousemove = updatePlayerPad;\n}\n\nfunction startGame() {\n    if (playing) {\n        if (paused) {\n            playPause.innerText = 'PAUSE';\n        }\n        else {\n            playPause.innerText = 'RESUME';\n        }\n        paused = !paused;\n    }\n    else {\n        playing = true;\n        playPause.innerText = 'PAUSE';\n        \n        randomizeVelocity();\n        randomizeDir();\n        render();\n    }   \n}\n\nfunction updatePlayerPad() {\n    if (playing && !paused) {\n        var mouseY = event.offsetY;\n\n        if (mouseY > 0 && mouseY < gameHeight) {\n            var playerPadY = mouseY - padHeight / 2;\n            playerPadY = Math.max(playerPadY, 5);\n            playerPadY = Math.min(playerPadY, gameHeight - padHeight - 5);\n            playerPad.setPosition(playerPadX, playerPadY);\n        }\n    }\n}\n\nfunction updateAiPad() {\n    if (aiTurn) {\n        //  determine whether ball has moved pass 80% across its container\n        var inRange = ballX > gameWidth * 0.8;\n\n        if (inRange) {\n            var maxTop = gameHeight - padHeight;\n            var distance = aiPadX - ballX - ballSize;\n            var eta = distance / speedX;\n            var estimate = ballY + speedY * eta;\n            var aiPadY = estimate - padHeight / 2;\n\n            aiPadY = aiPadY + randomRange(aiError, -aiError);\n            aiPadY = Math.max(aiPadY, 5);\n            aiPadY = Math.min(aiPadY, maxTop - 5);\n\n            aiPad.setPosition(aiPadX, aiPadY);\n            aiTurn = false;\n\n            console.log(`AI moves to ${Math.round(aiPadY)}px.`);\n        }\n    }\n}\n\nfunction checkLoss() {\n    if (ballX <= -ballSize) {\n        aiScore.innerText = parseInt(aiScore.innerText) + 1;\n        aiError /= 0.9;\n        resetGame();\n    }\n    else if (ballX >= gameWidth) {\n        playerScore.innerText = parseInt(playerScore.innerText) + 1;\n        aiError *= 0.9;\n        resetGame();\n    }\n}\n\nfunction resetGame() {\n    ballX = (gameWidth - ballSize) / 2;\n    ballY = (gameHeight - ballSize) / 2;\n\n    playing = false;\n    lostBall = false;\n\n    playPause.innerText = 'PLAY';\n}\n\nfunction checkWallRebound() {\n    var maxY = gameHeight - ballSize;\n\n    if (ballY < 0 || ballY > maxY) {\n        randomizeVelocity();\n        speedY *= -1;\n        ballY = ballY > 0 ? maxY : 0;\n    }\n}\n\nfunction checkPadRebound() {\n    //  check whether ball has moved passed the player pad\n    if (ballX <= playerPadX + padWidth) {\n        checkPadCollision(playerPad);\n    }\n    //  check whether ball has moved passed the AI pad\n    else if (ballX >= aiPadX - ballSize) {\n        checkPadCollision(aiPad);\n    }\n}\n\nfunction checkPadCollision(pad) {\n    var minY = pad.offsetTop - ballSize;\n    var maxY = pad.offsetTop + padHeight;\n    var contact = ballY >= minY && ballY <= maxY;\n    \n    if (contact) {\n        var ballRadius = ballSize / 2;\n        //  determine whether contact if a valid catch\n        var validCatch = ballY >= minY + ballRadius && ballY <= maxY - ballRadius;\n        \n        if (lostBall) {\n            //  reverse vertical movement\n            speedY *= -1;\n        }\n        else if (validCatch) {\n            randomizeVelocity();\n            //  reverse horizontal movement\n            speedX *= -1;\n\n            if (pad == playerPad) {\n                //  increase ball movement velocity\n                velocity += 0.2;\n                //  clamp at maximum velocity\n                velocity = Math.min(velocity, maxSpeed);\n                //  correct any clipping by the player pad\n                ballX = playerPadX + padWidth;\n                aiTurn = true;\n            }\n            else if (pad == aiPad) {\n                //  correct any clipping by the AI pad\n                ballX = aiPadX - ballSize;\n            }\n        }\n    }\n    \n    else {\n        lostBall = true;\n    }\n        \n}\n\nfunction animatePong() {\n    ballX += speedX;\n    ballY += speedY;\n    \n    checkWallRebound();\n    checkPadRebound();\n    updateAiPad();\n    checkLoss();\n    \n    ball.setPosition(ballX, ballY);\n}\n\nfunction randomizeVelocity() {\n    //  store current vertical direction of the ball\n    var xDir = speedX / Math.abs(speedX);\n    var yDir = speedY / Math.abs(speedY);\n\n    speedX = xDir * randomize(velocity / 1.5, 30);\n    speedY = yDir * Math.sqrt(velocity ** 2 - speedX ** 2);\n}\n\nfunction randomizeDir() {\n    var randomDir = n => n * (Math.random() >= 0.5 ? 1 : -1);\n    speedX = randomDir(speedX);\n    speedY = randomDir(speedY);\n    aiTurn = speedX > 0;\n}\n\nvar timePrevFrame = Date.now();\n\nfunction render() {\n    if (!playing) return;\n\n    var timeThisFrame = Date.now();\n    var elapsed = timeThisFrame - timePrevFrame;\n\n    if (elapsed > 33) {\n        timePrevFrame = timeThisFrame - (elapsed % 33);\n\n        if (!paused) {\n            requestAnimationFrame(animatePong);\n        }\n    }\n\n    requestAnimationFrame(render);\n}\n\nfunction randomize(n, perc) {\n    const sign = Math.random() >= 0.5 ? 1 : -1;\n    const noise = n * Math.random() * perc / 100;\n    return n + (noise * sign);\n}\n\nfunction randomRange(min, max, int = false) {\n    const r = Math.random() * (max - min) + min;\n    return int ? Math.round(r) : r;\n}\n\nfunction simplifyElementStyling() {\n    document.querySelectorAll('*').forEach(el => {\n        el.setPosition = (x, y) => {\n            el.style.left = `${x}px`;\n            el.style.top = `${(y)}px`;\n        };\n        el.setSize = (w, h) => {\n            el.style.width = `${w}px`;\n            el.style.height = `${Number.isFinite(h) ? h : w}px`;\n        };\n    });\n}\n#END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        }
      },
      "tests": {}
    }
  }
}