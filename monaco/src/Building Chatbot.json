{
  "missionUuid": "e131879d-d403-42cd-9635-b3de8f143d0f",
  "settings": {
    "revision": "(5,3)",
    "level": 1,
    "title": "Building AI - Chatbot",
    "description": "",
    "duration": null,
    "type": "project",
    "status": "exclusive",
    "resources": [],
    "searchable": true,
    "recommended": false,
    "tags": [],
    "missionName": "building-ai---chatbot",
    "majorRevision": 6,
    "minorRevision": 1,
    "changeInfo": "(1315b022-3715-4e54-aa31-e917c53fb0be,\"2019-05-15 15:52:10.330748\")",
    "objectivesVersion": 2,
    "authorName": "Ding Siuling",
    "authorId": "1315b022-3715-4e54-aa31-e917c53fb0be",
    "ownerId": "1315b022-3715-4e54-aa31-e917c53fb0be",
    "ownerName": "Ding Siuling",
    "ownerEmail": "sd@bsd.education",
    "lastModified": "2019-05-15T15:52:10.330Z",
    "atEnd": "export",
    "cardImage": "/resources/ai_car_cover5.png",
    "cardLinks": [],
    "webOutput": true,
    "mobileView": {
      "mobileViewEnabled": false
    },
    "bodyLocking": false,
    "consoleType": null,
    "codeUnlocked": false,
    "missionVideo": "",
    "sandboxDefault": false,
    "serialControls": false,
    "imageUploadOnHtml": false
  },
  "steps": {
    "2755670874491644": {
      "title": "Introduction",
      "type": "text",
      "content": {
        "text": "<p>In the&nbsp;<strong>Navigation Algorithm</strong>&nbsp;project, our smart car moved based on what we input into the chatbot.</p><p><br></p><p>In this project, a chatbot is added to the user interface, currently, it can't understand anything. But throughout the week, we will be teaching it how to complete requests and talk back about topics of your choice.</p>"
      },
      "deleted": false,
      "stepId": "2755670874491644",
      "majorRevision": 5,
      "minorRevision": 2,
      "orderNo": 500,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n    \n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.1/seedrandom.min.js\"></script>\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        },
        "script.js": {
          "contents": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 8;\nvar nRow = 6;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nMath.seedrandom(`${localStorage.id_token}${nColumn}${nRow}`);\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = `${cellSize}vw`;\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n        \n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        \n        displayBotMessage(`Sorry, I didn't understand your command: ${command}`);\n    }\n    \n    userInput.focus();\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    btnSend.enable();\n    \n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    //  make sure the path to the current cell is valid\n    if (prevCell.reachableRoads.includes(currentCell)) {\n        if (currentCell.id == 'finish') {\n            displayBotMessage('You have reached the finish line!');\n        }\n        else {\n            displayBotMessage(`Arrived at ${currentCell.location}`);\n        }\n    }\n    else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n        displayBotMessage('You drove the car off road.');\n    }\n    else {\n        displayBotMessage('The car is back on the road.');\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var anitClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            anitClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            anitClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (anitClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = `rotate(${car.rotation}deg)`;\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n        \n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n        \n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = `${cellSize}vw`;\n            cell.style.height = cell.style.width;\n            cell.style.top = `${(100 / nRow) * rowIndex}%`;\n            cell.style.left = `${(100 / nColumn) * cellIndex}%`;\n            cell.endOfRow = cellIndex == nColumn - 1;      \n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = `(x: ${nthColumn + 1}, y: ${nthRow + 1})`;\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = `url('${imagePath}/road_${type}.png')`;\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var text = document.createElement('p');\n    \n    text.className = type;\n    text.textContent = message;\n    messages.appendChild(text);\n\n    userInput.value = '';\n    messages.scrollTo(0, messages.scrollHeight);\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = `${90 * (nRow / nColumn)}vw`;\n    title.style.fontSize = `${grid.offsetHeight * 0.2}px`;\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = `${(window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2}px`;\n    content.style.transform = `scale(${scaleRatio})`;\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n",
          "mode": "new_contents",
          "answers": [
            "if (command == 'hello') {}",
            " "
          ]
        },
        "style.css": {
          "contents": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        }
      },
      "tests": {}
    },
    "884925774973586": {
      "title": "Testing the chatbot",
      "type": "interactive",
      "content": {
        "instructions": "<p>Let's try using the newly added chatbot.</p>\n<p>Type a message into the chatbot (where it says Type message here) and click send.</p>\n<p>&nbsp;</p>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"notes\"><strong>Tip</strong>: Simply press \"Enter\" on your keyboard to send the message instead of clicking</p>"
      },
      "deleted": false,
      "stepId": "884925774973586",
      "majorRevision": 5,
      "minorRevision": 2,
      "orderNo": 1000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n    \n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.1/seedrandom.min.js\"></script>\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        },
        "script.js": {
          "contents": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 8;\nvar nRow = 6;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nMath.seedrandom(`${localStorage.id_token}${nColumn}${nRow}`);\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = `${cellSize}vw`;\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n        displayBotMessage(`Sorry, I didn't understand your command: ${command}`);\n    }\n    \n    userInput.focus();\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    btnSend.enable();\n    \n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    //  make sure the path to the current cell is valid\n    if (prevCell.reachableRoads.includes(currentCell)) {\n        if (currentCell.id == 'finish') {\n            displayBotMessage('You have reached the finish line!');\n        }\n        else {\n            displayBotMessage(`Arrived at ${currentCell.location}`);\n        }\n    }\n    else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n        displayBotMessage('You drove the car off road.');\n    }\n    else {\n        displayBotMessage('The car is back on the road.');\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var anitClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            anitClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            anitClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (anitClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = `rotate(${car.rotation}deg)`;\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n        \n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n        \n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = `${cellSize}vw`;\n            cell.style.height = cell.style.width;\n            cell.style.top = `${(100 / nRow) * rowIndex}%`;\n            cell.style.left = `${(100 / nColumn) * cellIndex}%`;\n            cell.endOfRow = cellIndex == nColumn - 1;      \n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = `(x: ${nthColumn + 1}, y: ${nthRow + 1})`;\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = `url('${imagePath}/road_${type}.png')`;\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var text = document.createElement('p');\n    \n    text.className = type;\n    text.textContent = message;\n    messages.appendChild(text);\n\n    userInput.value = '';\n    messages.scrollTo(0, messages.scrollHeight);\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = `${90 * (nRow / nColumn)}vw`;\n    title.style.fontSize = `${grid.offsetHeight * 0.2}px`;\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = `${(window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2}px`;\n    content.style.transform = `scale(${scaleRatio})`;\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n",
          "mode": "new_contents",
          "answers": []
        },
        "style.css": {
          "contents": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        }
      },
      "tests": {
        "736199237241814": {
          "title": "Type a message into the chatbot and click send.",
          "stepId": "884925774973586",
          "testId": "736199237241814",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.on('displayBotMessage');",
          "failureMessage": ""
        }
      }
    },
    "8577098000314133": {
      "title": "Adding chat-bot's first command",
      "type": "code",
      "content": {
        "instructions": "<p>&nbsp;We will now program the chatbot to learn</p>\n<p>First, let's make our chat-bot able to respond to the greeting.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659\">if</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/faca0fa5-3b57-423b-98be-8dd2273f97e1\">relational operators</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">1. On <strong>JS line</strong> <strong>##LINE('script.js','on read')+6##</strong>, create an <code class=\"syntax\">if</code> statement to check whether <strong>command</strong> is equal to <strong>\"hello\"</strong>.</p>\n<p class=\"highlight\">2. On <strong>JS line</strong> <strong>##LINE('script.js','on read')+7##</strong>, create an <code class=\"syntax\">else</code> statement.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "8577098000314133",
      "majorRevision": 5,
      "minorRevision": 2,
      "orderNo": 2000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n    \n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.1/seedrandom.min.js\"></script>\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        },
        "script.js": {
          "contents": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 8;\nvar nRow = 6;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nMath.seedrandom(`${localStorage.id_token}${nColumn}${nRow}`);\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = `${cellSize}vw`;\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n        \n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        \n        displayBotMessage(`Sorry, I didn't understand your command: ${command}`);\n    }\n    \n    userInput.focus();\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    btnSend.enable();\n    \n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    //  make sure the path to the current cell is valid\n    if (prevCell.reachableRoads.includes(currentCell)) {\n        if (currentCell.id == 'finish') {\n            displayBotMessage('You have reached the finish line!');\n        }\n        else {\n            displayBotMessage(`Arrived at ${currentCell.location}`);\n        }\n    }\n    else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n        displayBotMessage('You drove the car off road.');\n    }\n    else {\n        displayBotMessage('The car is back on the road.');\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var anitClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            anitClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            anitClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (anitClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = `rotate(${car.rotation}deg)`;\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n        \n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n        \n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = `${cellSize}vw`;\n            cell.style.height = cell.style.width;\n            cell.style.top = `${(100 / nRow) * rowIndex}%`;\n            cell.style.left = `${(100 / nColumn) * cellIndex}%`;\n            cell.endOfRow = cellIndex == nColumn - 1;      \n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = `(x: ${nthColumn + 1}, y: ${nthRow + 1})`;\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = `url('${imagePath}/road_${type}.png')`;\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var text = document.createElement('p');\n    \n    text.className = type;\n    text.textContent = message;\n    messages.appendChild(text);\n\n    userInput.value = '';\n    messages.scrollTo(0, messages.scrollHeight);\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = `${90 * (nRow / nColumn)}vw`;\n    title.style.fontSize = `${grid.offsetHeight * 0.2}px`;\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = `${(window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2}px`;\n    content.style.transform = `scale(${scaleRatio})`;\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n",
          "mode": "new_contents",
          "answers": [
            "if (command == 'hello') {}",
            " "
          ]
        },
        "style.css": {
          "contents": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        }
      },
      "tests": {
        "8962720152862369": {
          "title": "Create an <code class=\"syntax\">else</code> statement.",
          "stepId": "8577098000314133",
          "testId": "8962720152862369",
          "orderNo": -1,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`else {}`);",
          "failureMessage": ""
        },
        "5304052086381136": {
          "title": "Create an <code class=\"syntax\">if</code> statement to check whether <strong>command</strong> is equal to <strong>\"hello\"</strong>.",
          "stepId": "8577098000314133",
          "testId": "5304052086381136",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`if (command == 'hello') {}`);",
          "failureMessage": ""
        }
      }
    },
    "1765889067400024": {
      "title": "Adding chat-bot's first response",
      "type": "code",
      "content": {
        "instructions": "<p>When <strong>command</strong> is \"hello\", we want the chat-bot to say something back.</p>\n<p>We can make the chat-bot say something using the <strong>displayBotMessage</strong> function. Just remember the message has to go between the brackets in quotes, like this:</p>\n<pre class=\"language-javascript\"><code>displayBotMessage(\"Hello.\");</code></pre>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/c7d23919-b71c-429d-b41c-d9fd7f73ddc5\">function arguments</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/4abbff41-b31c-4ef1-a42b-4b64470a5f4b\">string</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','hello')+1##</strong>, make the chat-bot say <strong>\"Hi, how can I help you?\"</strong>.</p>\n<p class=\"notes\"><strong>Tip</strong>: use the <strong>displayBotMessage</strong> function.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "1765889067400024",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 3000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 8;\nvar nRow = 6;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nMath.seedrandom(`${localStorage.id_token}${nColumn}${nRow}`);\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = `${cellSize}vw`;\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n        \n        if (command == 'hello') {\n            #BEGIN_EDITABLE#    #END_EDITABLE#\n        }\n        else {\n            displayBotMessage(`Sorry, I didn't understand your command: ${command}`);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    btnSend.enable();\n    \n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    //  make sure the path to the current cell is valid\n    if (prevCell.reachableRoads.includes(currentCell)) {\n        if (currentCell.id == 'finish') {\n            displayBotMessage('You have reached the finish line!');\n        }\n        else {\n            displayBotMessage(`Arrived at ${currentCell.location}`);\n        }\n    }\n    else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n        displayBotMessage('You drove the car off road.');\n    }\n    else {\n        displayBotMessage('The car is back on the road.');\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var anitClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            anitClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            anitClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (anitClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = `rotate(${car.rotation}deg)`;\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n        \n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n        \n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = `${cellSize}vw`;\n            cell.style.height = cell.style.width;\n            cell.style.top = `${(100 / nRow) * rowIndex}%`;\n            cell.style.left = `${(100 / nColumn) * cellIndex}%`;\n            cell.endOfRow = cellIndex == nColumn - 1;      \n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = `(x: ${nthColumn + 1}, y: ${nthRow + 1})`;\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = `url('${imagePath}/road_${type}.png')`;\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var text = document.createElement('p');\n    \n    text.className = type;\n    text.textContent = message;\n    messages.appendChild(text);\n\n    userInput.value = '';\n    messages.scrollTo(0, messages.scrollHeight);\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = `${90 * (nRow / nColumn)}vw`;\n    title.style.fontSize = `${grid.offsetHeight * 0.2}px`;\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = `${(window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2}px`;\n    content.style.transform = `scale(${scaleRatio})`;\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n",
          "mode": "new_contents",
          "answers": [
            "displayBotMessage('Hi, how can I help you?');"
          ]
        }
      },
      "tests": {
        "4071975543491884": {
          "title": "Make the chat-bot say <strong>\"Hi, how can I help you?\"</strong>.",
          "stepId": "1765889067400024",
          "testId": "4071975543491884",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`displayBotMessage('Hi, how can I help you?');`);",
          "failureMessage": ""
        }
      }
    },
    "181488425954150": {
      "title": "Testing chat-bot's first response",
      "type": "interactive",
      "content": {
        "instructions": "<p>Before we move on, let's make sure what we have so far is working.</p>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>"
      },
      "deleted": false,
      "stepId": "181488425954150",
      "majorRevision": 4,
      "minorRevision": 3,
      "orderNo": 4000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n    \n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.1/seedrandom.min.js\"></script>\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        },
        "script.js": {
          "contents": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 8;\nvar nRow = 6;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nMath.seedrandom(`${localStorage.id_token}${nColumn}${nRow}`);\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = `${cellSize}vw`;\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n        \n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else {\n            displayBotMessage(`Sorry, I didn't understand your command: ${command}`);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    btnSend.enable();\n    \n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    //  make sure the path to the current cell is valid\n    if (prevCell.reachableRoads.includes(currentCell)) {\n        if (currentCell.id == 'finish') {\n            displayBotMessage('You have reached the finish line!');\n        }\n        else {\n            displayBotMessage(`Arrived at ${currentCell.location}`);\n        }\n    }\n    else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n        displayBotMessage('You drove the car off road.');\n    }\n    else {\n        displayBotMessage('The car is back on the road.');\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var anitClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            anitClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            anitClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (anitClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = `rotate(${car.rotation}deg)`;\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n        \n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n        \n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = `${cellSize}vw`;\n            cell.style.height = cell.style.width;\n            cell.style.top = `${(100 / nRow) * rowIndex}%`;\n            cell.style.left = `${(100 / nColumn) * cellIndex}%`;\n            cell.endOfRow = cellIndex == nColumn - 1;      \n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = `(x: ${nthColumn + 1}, y: ${nthRow + 1})`;\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = `url('${imagePath}/road_${type}.png')`;\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var text = document.createElement('p');\n    \n    text.className = type;\n    text.textContent = message;\n    messages.appendChild(text);\n\n    userInput.value = '';\n    messages.scrollTo(0, messages.scrollHeight);\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = `${90 * (nRow / nColumn)}vw`;\n    title.style.fontSize = `${grid.offsetHeight * 0.2}px`;\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = `${(window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2}px`;\n    content.style.transform = `scale(${scaleRatio})`;\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        },
        "style.css": {
          "contents": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        }
      },
      "tests": {
        "2559641855408560": {
          "title": "Type <strong>\"hello\"</strong> into the chat-bot and test the chat-bot's response.",
          "stepId": "181488425954150",
          "testId": "2559641855408560",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.on('readUserInput').var(`command == 'hello'`);",
          "failureMessage": ""
        }
      }
    },
    "7931536158408411": {
      "title": "Adding the \"go up\" command",
      "type": "code",
      "content": {
        "instructions": "<p>Next we'll do something slightly more complex - adding commands that will have the chat-bot steer the smart car for us.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659\">else if</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','on read')+9##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"go up\"</strong>.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "7931536158408411",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 5000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n    \n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.1/seedrandom.min.js\"></script>\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        },
        "script.js": {
          "contents": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 8;\nvar nRow = 6;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nMath.seedrandom(`${localStorage.id_token}${nColumn}${nRow}`);\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = `${cellSize}vw`;\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n        \n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        else {\n            displayBotMessage(`Sorry, I didn't understand your command: ${command}`);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction checkAndMove(dir) {\n    if (car.currentCell[dir] == 'unknown') {\n        displayBotMessage('The car cannot leave the map.');\n        btnSend.enable();\n    }\n    else {\n        moveCarTo(car.currentCell[dir]);\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    btnSend.enable();\n    \n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    //  make sure the path to the current cell is valid\n    if (prevCell.reachableRoads.includes(currentCell)) {\n        if (currentCell.id == 'finish') {\n            displayBotMessage('You have reached the finish line!');\n        }\n        else {\n            displayBotMessage(`Arrived at ${currentCell.location}`);\n        }\n    }\n    else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n        displayBotMessage('You drove the car off road.');\n    }\n    else {\n        displayBotMessage('The car is back on the road.');\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var anitClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            anitClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            anitClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (anitClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = `rotate(${car.rotation}deg)`;\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n        \n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n        \n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = `${cellSize}vw`;\n            cell.style.height = cell.style.width;\n            cell.style.top = `${(100 / nRow) * rowIndex}%`;\n            cell.style.left = `${(100 / nColumn) * cellIndex}%`;\n            cell.endOfRow = cellIndex == nColumn - 1;      \n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = `(x: ${nthColumn + 1}, y: ${nthRow + 1})`;\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = `url('${imagePath}/road_${type}.png')`;\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var text = document.createElement('p');\n    \n    text.className = type;\n    text.textContent = message;\n    messages.appendChild(text);\n\n    userInput.value = '';\n    messages.scrollTo(0, messages.scrollHeight);\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = `${90 * (nRow / nColumn)}vw`;\n    title.style.fontSize = `${grid.offsetHeight * 0.2}px`;\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = `${(window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2}px`;\n    content.style.transform = `scale(${scaleRatio})`;\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": [
            "else if (command == 'go up') {}"
          ]
        },
        "style.css": {
          "contents": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        }
      },
      "tests": {
        "2363895150765064": {
          "title": "Create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"go up\"</strong>.",
          "stepId": "7931536158408411",
          "testId": "2363895150765064",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`else if (command == 'go up') {}`);",
          "failureMessage": ""
        }
      }
    },
    "8713695508729283": {
      "title": "Checking the cell above the car",
      "type": "code",
      "content": {
        "instructions": "<p>When <strong>command</strong> is \"go up\", we want the car to move to the cell above itself, but we can't assume the car can always go up - it may already be on the top edge of the map, and there is nowhere to go.</p>\n<p>We can determine this by checking whether the cell above the car is \"unknown\".</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659\">if</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/faca0fa5-3b57-423b-98be-8dd2273f97e1\">relational operators</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659\">else</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">1. On <strong>JS line</strong> <strong>##LINE('script.js','on read')+10##</strong>, create an <code class=\"syntax\">if</code> statement to check whether <code class=\"syntax\">car.currentCell.up</code> is equal to <strong>\"unknown\"</strong>.</p>\n<p class=\"highlight\">2. On <strong>JS line</strong> <strong>##LINE('script.js','on read')+11##</strong>, create an <code class=\"syntax\">else</code> statement.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "8713695508729283",
      "majorRevision": 6,
      "minorRevision": 1,
      "orderNo": 6000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 8;\nvar nRow = 6;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nMath.seedrandom(`${localStorage.id_token}${nColumn}${nRow}`);\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = `${cellSize}vw`;\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n        \n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            #BEGIN_EDITABLE#    #END_EDITABLE#\n            #BEGIN_EDITABLE#    #END_EDITABLE#\n        }\n        else {\n            displayBotMessage(`Sorry, I didn't understand your command: ${command}`);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    btnSend.enable();\n    \n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    //  make sure the path to the current cell is valid\n    if (prevCell.reachableRoads.includes(currentCell)) {\n        if (currentCell.id == 'finish') {\n            displayBotMessage('You have reached the finish line!');\n        }\n        else {\n            displayBotMessage(`Arrived at ${currentCell.location}`);\n        }\n    }\n    else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n        displayBotMessage('You drove the car off road.');\n    }\n    else {\n        displayBotMessage('The car is back on the road.');\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var anitClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            anitClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            anitClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (anitClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = `rotate(${car.rotation}deg)`;\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n        \n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n        \n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = `${cellSize}vw`;\n            cell.style.height = cell.style.width;\n            cell.style.top = `${(100 / nRow) * rowIndex}%`;\n            cell.style.left = `${(100 / nColumn) * cellIndex}%`;\n            cell.endOfRow = cellIndex == nColumn - 1;      \n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = `(x: ${nthColumn + 1}, y: ${nthRow + 1})`;\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = `url('${imagePath}/road_${type}.png')`;\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var text = document.createElement('p');\n    \n    text.className = type;\n    text.textContent = message;\n    messages.appendChild(text);\n\n    userInput.value = '';\n    messages.scrollTo(0, messages.scrollHeight);\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = `${90 * (nRow / nColumn)}vw`;\n    title.style.fontSize = `${grid.offsetHeight * 0.2}px`;\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = `${(window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2}px`;\n    content.style.transform = `scale(${scaleRatio})`;\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n",
          "mode": "new_contents",
          "answers": [
            "if (car.currentCell.up == 'unknown') {}",
            "else {}"
          ]
        }
      },
      "tests": {
        "231387815021080": {
          "title": "Create an <code class=\"syntax\">if</code> statement to check whether <code class=\"syntax\">car.currentCell.up</code> is equal to <strong>\"unknown\"</strong>.",
          "stepId": "8713695508729283",
          "testId": "231387815021080",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`if (car.currentCell.up == 'unknown') {}`);",
          "failureMessage": ""
        },
        "4701088081632878": {
          "title": "Create an <code class=\"syntax\">else</code> statement.",
          "stepId": "8713695508729283",
          "testId": "4701088081632878",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`else {}`);",
          "failureMessage": ""
        }
      }
    },
    "5794870974153112": {
      "title": "Responding to the \"go up\" command",
      "type": "code",
      "content": {
        "instructions": "<p>Now we have 2 potential situations:</p>\n<ul>\n<li>\n<p class=\"notes\">If the cell above the car is \"unknown\", we want the chatbot to tell the user that there is nothing above the car.</p>\n</li>\n<li>\n<p class=\"notes\">Otherwise, we can move the car up.</p>\n</li>\n</ul>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/c7d23919-b71c-429d-b41c-d9fd7f73ddc5\">function arguments</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">1. On <strong>JS line</strong> <strong>##LINE('script.js','go up')+2##</strong>, make the chat-bot say <strong>\"There is nothing above the car.\"</strong>.</p>\n<p class=\"highlight\">2. On <strong>JS line</strong> <strong>##LINE('script.js','go up')+5##</strong>, move the car to the cell above its current cell.</p>\n<p class=\"notes\"><strong>Tip</strong>: use the <strong>moveCarTo</strong> function.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "5794870974153112",
      "majorRevision": 5,
      "minorRevision": 0,
      "orderNo": 7000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 8;\nvar nRow = 6;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nMath.seedrandom(`${localStorage.id_token}${nColumn}${nRow}`);\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = `${cellSize}vw`;\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n        \n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                #BEGIN_EDITABLE#    #END_EDITABLE#\n            }\n            else {\n                #BEGIN_EDITABLE#    #END_EDITABLE#\n            }\n        }\n        else {\n            displayBotMessage(`Sorry, I didn't understand your command: ${command}`);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    btnSend.enable();\n    \n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    //  make sure the path to the current cell is valid\n    if (prevCell.reachableRoads.includes(currentCell)) {\n        if (currentCell.id == 'finish') {\n            displayBotMessage('You have reached the finish line!');\n        }\n        else {\n            displayBotMessage(`Arrived at ${currentCell.location}`);\n        }\n    }\n    else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n        displayBotMessage('You drove the car off road.');\n    }\n    else {\n        displayBotMessage('The car is back on the road.');\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var anitClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            anitClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            anitClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (anitClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = `rotate(${car.rotation}deg)`;\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n        \n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n        \n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = `${cellSize}vw`;\n            cell.style.height = cell.style.width;\n            cell.style.top = `${(100 / nRow) * rowIndex}%`;\n            cell.style.left = `${(100 / nColumn) * cellIndex}%`;\n            cell.endOfRow = cellIndex == nColumn - 1;      \n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = `(x: ${nthColumn + 1}, y: ${nthRow + 1})`;\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = `url('${imagePath}/road_${type}.png')`;\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var text = document.createElement('p');\n    \n    text.className = type;\n    text.textContent = message;\n    messages.appendChild(text);\n\n    userInput.value = '';\n    messages.scrollTo(0, messages.scrollHeight);\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = `${90 * (nRow / nColumn)}vw`;\n    title.style.fontSize = `${grid.offsetHeight * 0.2}px`;\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = `${(window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2}px`;\n    content.style.transform = `scale(${scaleRatio})`;\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n",
          "mode": "new_contents",
          "answers": [
            "displayBotMessage('There is nothing above the car.');",
            "moveCarTo(car.currentCell.up);"
          ]
        }
      },
      "tests": {
        "901440858769306": {
          "title": "Make the chat-bot say <strong>\"There is nothing above the car.\"</strong>.",
          "stepId": "5794870974153112",
          "testId": "901440858769306",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`displayBotMessage('There is nothing above the car.');`);",
          "failureMessage": ""
        },
        "6748537169177130": {
          "title": "Move the car to the cell above its current cell.",
          "stepId": "5794870974153112",
          "testId": "6748537169177130",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`moveCarTo(car.currentCell.up);`);",
          "failureMessage": ""
        }
      }
    },
    "2171218291149328": {
      "title": "Checking the other 3 cells around the car",
      "type": "code",
      "content": {
        "instructions": "<p>Now we just need to do similar checks for commands requesting to move toward the other 3 directions.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659\">else if</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/faca0fa5-3b57-423b-98be-8dd2273f97e1\">relational operators</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">1. On <strong>JS line</strong> <strong>##LINE('script.js','go up')+8##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"go down\"</strong>.</p>\n<p class=\"highlight\">2. On <strong>JS line</strong> <strong>##LINE('script.js','go up')+9##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"go left\"</strong>.</p>\n<p class=\"highlight\">3. On <strong>JS line</strong> <strong>##LINE('script.js','go up')+10##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"go right\"</strong>.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "2171218291149328",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 8000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 8;\nvar nRow = 6;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nMath.seedrandom(`${localStorage.id_token}${nColumn}${nRow}`);\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = `${cellSize}vw`;\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n        \n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        else {\n            displayBotMessage(`Sorry, I didn't understand your command: ${command}`);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    btnSend.enable();\n    \n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    //  make sure the path to the current cell is valid\n    if (prevCell.reachableRoads.includes(currentCell)) {\n        if (currentCell.id == 'finish') {\n            displayBotMessage('You have reached the finish line!');\n        }\n        else {\n            displayBotMessage(`Arrived at ${currentCell.location}`);\n        }\n    }\n    else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n        displayBotMessage('You drove the car off road.');\n    }\n    else {\n        displayBotMessage('The car is back on the road.');\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var anitClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            anitClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            anitClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (anitClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = `rotate(${car.rotation}deg)`;\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n        \n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n        \n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = `${cellSize}vw`;\n            cell.style.height = cell.style.width;\n            cell.style.top = `${(100 / nRow) * rowIndex}%`;\n            cell.style.left = `${(100 / nColumn) * cellIndex}%`;\n            cell.endOfRow = cellIndex == nColumn - 1;      \n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = `(x: ${nthColumn + 1}, y: ${nthRow + 1})`;\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = `url('${imagePath}/road_${type}.png')`;\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var text = document.createElement('p');\n    \n    text.className = type;\n    text.textContent = message;\n    messages.appendChild(text);\n\n    userInput.value = '';\n    messages.scrollTo(0, messages.scrollHeight);\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = `${90 * (nRow / nColumn)}vw`;\n    title.style.fontSize = `${grid.offsetHeight * 0.2}px`;\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = `${(window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2}px`;\n    content.style.transform = `scale(${scaleRatio})`;\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n",
          "mode": "new_contents",
          "answers": [
            "else if (command == 'go down') {}",
            "else if (command == 'go left') {}",
            "else if (command == 'go right') {}"
          ]
        }
      },
      "tests": {
        "8610492951076281": {
          "title": "Create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"go down\"</strong>.",
          "stepId": "2171218291149328",
          "testId": "8610492951076281",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`else if (command == 'go down') {}`);",
          "failureMessage": ""
        },
        "2660262488698136": {
          "title": "Create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"go left\"</strong>.",
          "stepId": "2171218291149328",
          "testId": "2660262488698136",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`else if (command == 'go left') {}`);",
          "failureMessage": ""
        },
        "8591184742304189": {
          "title": "Create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"go right\"</strong>.",
          "stepId": "2171218291149328",
          "testId": "8591184742304189",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`else if (command == 'go right') {}`);",
          "failureMessage": ""
        }
      }
    },
    "166977740934952": {
      "title": "Responding to the 3 commands",
      "type": "code",
      "content": {
        "instructions": "<p>After checking for the user request to move&nbsp;in&nbsp;each requested direction, we need one last check whether the it is open for the car to travel.</p>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">1. On <strong>JS line</strong> <strong>##LINE('script.js','go down')+1##</strong> &amp; <strong>##LINE('script.js','go down')+5##</strong>, fill in the correct cell for the \"go down\" command to work properly.</p>\n<p class=\"highlight\">2. On <strong>JS line</strong> <strong>##LINE('script.js','go left')+1##</strong> &amp; <strong>##LINE('script.js','go left')+5##</strong>, fill in the correct cell for the \"go left\" command to work properly.</p>\n<p class=\"highlight\">3. On <strong>JS line</strong> <strong>##LINE('script.js','go right')+1##</strong> &amp; <strong>##LINE('script.js','go right')+5##</strong>, fill in the correct cell for the \"go right\" command to work properly.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "166977740934952",
      "majorRevision": 4,
      "minorRevision": 4,
      "orderNo": 9000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 8;\nvar nRow = 6;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nMath.seedrandom(`${localStorage.id_token}${nColumn}${nRow}`);\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = `${cellSize}vw`;\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n        \n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (#BEGIN_EDITABLE#car.currentCell#END_EDITABLE# == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(#BEGIN_EDITABLE#car.currentCell#END_EDITABLE#);\n            }\n        }\n        else if (command == 'go left') {\n            if (#BEGIN_EDITABLE#car.currentCell#END_EDITABLE# == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(#BEGIN_EDITABLE#car.currentCell#END_EDITABLE#);\n            }\n        }\n        else if (command == 'go right') {\n            if (#BEGIN_EDITABLE#car.currentCell#END_EDITABLE# == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(#BEGIN_EDITABLE#car.currentCell#END_EDITABLE#);\n            }\n        }\n        else {\n            displayBotMessage(`Sorry, I didn't understand your command: ${command}`);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    btnSend.enable();\n    \n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    //  make sure the path to the current cell is valid\n    if (prevCell.reachableRoads.includes(currentCell)) {\n        if (currentCell.id == 'finish') {\n            displayBotMessage('You have reached the finish line!');\n        }\n        else {\n            displayBotMessage(`Arrived at ${currentCell.location}`);\n        }\n    }\n    else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n        displayBotMessage('You drove the car off road.');\n    }\n    else {\n        displayBotMessage('The car is back on the road.');\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var anitClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            anitClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            anitClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (anitClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = `rotate(${car.rotation}deg)`;\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n        \n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n        \n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = `${cellSize}vw`;\n            cell.style.height = cell.style.width;\n            cell.style.top = `${(100 / nRow) * rowIndex}%`;\n            cell.style.left = `${(100 / nColumn) * cellIndex}%`;\n            cell.endOfRow = cellIndex == nColumn - 1;      \n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = `(x: ${nthColumn + 1}, y: ${nthRow + 1})`;\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = `url('${imagePath}/road_${type}.png')`;\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var text = document.createElement('p');\n    \n    text.className = type;\n    text.textContent = message;\n    messages.appendChild(text);\n\n    userInput.value = '';\n    messages.scrollTo(0, messages.scrollHeight);\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = `${90 * (nRow / nColumn)}vw`;\n    title.style.fontSize = `${grid.offsetHeight * 0.2}px`;\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = `${(window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2}px`;\n    content.style.transform = `scale(${scaleRatio})`;\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n",
          "mode": "new_contents",
          "answers": [
            "car.currentCell.down",
            "car.currentCell.down",
            "car.currentCell.left",
            "car.currentCell.left",
            "car.currentCell.right",
            "car.currentCell.right"
          ]
        }
      },
      "tests": {
        "2783590472614874": {
          "title": "Fill in the correct cell for the \"go down\" command to work properly.",
          "stepId": "166977740934952",
          "testId": "2783590472614874",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`car.currentCell.down`);\npass.if.js.editable(1).equivalent(`car.currentCell.down`);",
          "failureMessage": ""
        },
        "5661888869435974": {
          "title": "Fill in the correct cell for the \"go left\" command to work properly.",
          "stepId": "166977740934952",
          "testId": "5661888869435974",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`car.currentCell.left`);\npass.if.js.editable(3).equivalent(`car.currentCell.left`);",
          "failureMessage": ""
        },
        "32207888920612": {
          "title": "Fill in the correct cell for the \"go right\" command to work properly.",
          "stepId": "166977740934952",
          "testId": "32207888920612",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(4).equivalent(`car.currentCell.right`);\npass.if.js.editable(5).equivalent(`car.currentCell.right`);",
          "failureMessage": ""
        }
      }
    },
    "750356243187800": {
      "title": "Testing your commands",
      "type": "interactive",
      "content": {
        "instructions": "<p>You're all set with the navigation controls, now take it for a spin.</p>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>"
      },
      "deleted": false,
      "stepId": "750356243187800",
      "majorRevision": 4,
      "minorRevision": 3,
      "orderNo": 10000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n    \n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.1/seedrandom.min.js\"></script>\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        },
        "script.js": {
          "contents": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 8;\nvar nRow = 6;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nMath.seedrandom(`${localStorage.id_token}${nColumn}${nRow}`);\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = `${cellSize}vw`;\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n  \tdisplayBotMessage('Use \"go up\", \"go down\", \"go left\" or \"go right\" to control the car.');\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n        \n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else {\n            displayBotMessage(`Sorry, I didn't understand your command: ${command}`);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    btnSend.enable();\n    \n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    //  make sure the path to the current cell is valid\n    if (prevCell.reachableRoads.includes(currentCell)) {\n        if (currentCell.id == 'finish') {\n            displayBotMessage('You have reached the finish line!');\n        }\n        else {\n            displayBotMessage(`Arrived at ${currentCell.location}`);\n        }\n    }\n    else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n        displayBotMessage('You drove the car off road.');\n    }\n    else {\n        displayBotMessage('The car is back on the road.');\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var anitClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            anitClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            anitClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (anitClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = `rotate(${car.rotation}deg)`;\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n        \n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n        \n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = `${cellSize}vw`;\n            cell.style.height = cell.style.width;\n            cell.style.top = `${(100 / nRow) * rowIndex}%`;\n            cell.style.left = `${(100 / nColumn) * cellIndex}%`;\n            cell.endOfRow = cellIndex == nColumn - 1;      \n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = `(x: ${nthColumn + 1}, y: ${nthRow + 1})`;\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = `url('${imagePath}/road_${type}.png')`;\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var text = document.createElement('p');\n    \n    text.className = type;\n    text.textContent = message;\n    messages.appendChild(text);\n\n    userInput.value = '';\n    messages.scrollTo(0, messages.scrollHeight);\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = `${90 * (nRow / nColumn)}vw`;\n    title.style.fontSize = `${grid.offsetHeight * 0.2}px`;\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = `${(window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2}px`;\n    content.style.transform = `scale(${scaleRatio})`;\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        },
        "style.css": {
          "contents": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": []
        }
      },
      "tests": {
        "4796770462413524": {
          "title": "Drive the car to the finish line using the chat-bot commands.",
          "stepId": "750356243187800",
          "testId": "4796770462413524",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.on('checkPrevMove').var(`car.currentCell.id == 'finish'`);",
          "failureMessage": ""
        }
      }
    },
    "3805503097118020": {
      "title": "Conversational responses",
      "type": "code",
      "content": {
        "instructions": "<p>Our chat-bot just learnt a new ability, however it's still very robotic, we need to give it some personality or it won't be fun talking with it.</p>\n<p>Let's start with a name.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659\">else if</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/faca0fa5-3b57-423b-98be-8dd2273f97e1\">relational operators</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','on checkPrev')-9##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"who are you?\"</strong>.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "3805503097118020",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 11000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n    \n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.1/seedrandom.min.js\"></script>\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n",
          "mode": "new_contents",
          "answers": []
        },
        "script.js": {
          "contents": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 8;\nvar nRow = 6;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nMath.seedrandom(`${localStorage.id_token}${nColumn}${nRow}`);\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = `${cellSize}vw`;\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n        \n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        #BEGIN_EDITABLE#    #END_EDITABLE#\n        else {\n            displayBotMessage(`Sorry, I didn't understand your command: ${command}`);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    btnSend.enable();\n    \n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    //  make sure the path to the current cell is valid\n    if (prevCell.reachableRoads.includes(currentCell)) {\n        if (currentCell.id == 'finish') {\n            displayBotMessage('You have reached the finish line!');\n        }\n        else {\n            displayBotMessage(`Arrived at ${currentCell.location}`);\n        }\n    }\n    else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n        displayBotMessage('You drove the car off road.');\n    }\n    else {\n        displayBotMessage('The car is back on the road.');\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var anitClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            anitClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            anitClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (anitClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = `rotate(${car.rotation}deg)`;\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n        \n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n        \n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = `${cellSize}vw`;\n            cell.style.height = cell.style.width;\n            cell.style.top = `${(100 / nRow) * rowIndex}%`;\n            cell.style.left = `${(100 / nColumn) * cellIndex}%`;\n            cell.endOfRow = cellIndex == nColumn - 1;      \n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = `(x: ${nthColumn + 1}, y: ${nthRow + 1})`;\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = `url('${imagePath}/road_${type}.png')`;\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var text = document.createElement('p');\n    \n    text.className = type;\n    text.textContent = message;\n    messages.appendChild(text);\n\n    userInput.value = '';\n    messages.scrollTo(0, messages.scrollHeight);\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = `${90 * (nRow / nColumn)}vw`;\n    title.style.fontSize = `${grid.offsetHeight * 0.2}px`;\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = `${(window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2}px`;\n    content.style.transform = `scale(${scaleRatio})`;\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n",
          "mode": "new_contents",
          "answers": [
            "else if (command == 'who are you?') {}"
          ]
        },
        "style.css": {
          "contents": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n",
          "mode": "new_contents",
          "answers": []
        }
      },
      "tests": {
        "8294141334226231": {
          "title": "Create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"who are you?\"</strong>.",
          "stepId": "3805503097118020",
          "testId": "8294141334226231",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`else if (command == 'who are you?') {}`);",
          "failureMessage": ""
        }
      }
    },
    "4992042679449094": {
      "title": "Giving your chat-bot personality",
      "type": "code",
      "content": {
        "instructions": "<p>Give your chat-bot a name!</p>\n<p>Don't worry, you will have multiple opportunities to change it later.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/c7d23919-b71c-429d-b41c-d9fd7f73ddc5\">function arguments</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','on checkPrev')-10##</strong>, make the chat-bot introduce itself.</p>\n<p class=\"notes\"><strong>Tip</strong>: use the <strong>displayBotMessage</strong> function.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js",
        "notes": "<p><br></p>"
      },
      "deleted": false,
      "stepId": "4992042679449094",
      "majorRevision": 6,
      "minorRevision": 0,
      "orderNo": 12000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 8;\nvar nRow = 6;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nMath.seedrandom(`${localStorage.id_token}${nColumn}${nRow}`);\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = `${cellSize}vw`;\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n        \n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'who are you?') {\n            #BEGIN_EDITABLE#    #END_EDITABLE#\n        }\n        else {\n            displayBotMessage(`Sorry, I didn't understand your command: ${command}`);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    btnSend.enable();\n    \n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    //  make sure the path to the current cell is valid\n    if (prevCell.reachableRoads.includes(currentCell)) {\n        if (currentCell.id == 'finish') {\n            displayBotMessage('You have reached the finish line!');\n        }\n        else {\n            displayBotMessage(`Arrived at ${currentCell.location}`);\n        }\n    }\n    else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n        displayBotMessage('You drove the car off road.');\n    }\n    else {\n        displayBotMessage('The car is back on the road.');\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var anitClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            anitClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            anitClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (anitClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = `rotate(${car.rotation}deg)`;\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n        \n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n        \n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = `${cellSize}vw`;\n            cell.style.height = cell.style.width;\n            cell.style.top = `${(100 / nRow) * rowIndex}%`;\n            cell.style.left = `${(100 / nColumn) * cellIndex}%`;\n            cell.endOfRow = cellIndex == nColumn - 1;      \n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = `(x: ${nthColumn + 1}, y: ${nthRow + 1})`;\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = `url('${imagePath}/road_${type}.png')`;\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var text = document.createElement('p');\n    \n    text.className = type;\n    text.textContent = message;\n    messages.appendChild(text);\n\n    userInput.value = '';\n    messages.scrollTo(0, messages.scrollHeight);\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = `${90 * (nRow / nColumn)}vw`;\n    title.style.fontSize = `${grid.offsetHeight * 0.2}px`;\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = `${(window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2}px`;\n    content.style.transform = `scale(${scaleRatio})`;\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n",
          "mode": "new_contents",
          "answers": [
            "displayBotMessage('I am B-Bot');"
          ]
        }
      },
      "tests": {
        "4332550530948174": {
          "title": "Make the chat-bot introduce itself.",
          "stepId": "4992042679449094",
          "testId": "4332550530948174",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`displayBotMessage('I am B-Bot');`);\n// pass.if.js.editable(0).equivalent(`displayBotMessage(##STRING##);`);",
          "failureMessage": ""
        }
      }
    },
    "6550645787800818": {
      "title": "Add your own commands & responses",
      "type": "code",
      "content": {
        "instructions": "<p>Our chat-bot currently understands very limited amount of commands, but you can now add more to the list.</p>\n<p>It's up to you, but we suggest giving it a richer personality so the user can learn more about the chat-bot, such as:</p>\n<pre class=\"language-javascript\"><code>else if (command == \"what color do you like?\") {\n    displayBotMessage(\"I like red.\");\n}\nelse if (command == \"what's your favourite animal\") {\n    displayBotMessage(\"Cats!\");\n}</code></pre>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659\">else if</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/faca0fa5-3b57-423b-98be-8dd2273f97e1\">relational operators</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/c7d23919-b71c-429d-b41c-d9fd7f73ddc5\">function arguments</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','on checkPrev')-10##</strong>, add your own commands and responses.</p>\n<hr />\n<p class=\"highlight\">Wait for instructions from&nbsp;your instructor to continue</p>",
        "startTab": "script.js",
        "notes": "<p>To proceed to step 15, ask students the enter <strong>blue jeans</strong> into the chatbot</p>"
      },
      "deleted": false,
      "stepId": "6550645787800818",
      "majorRevision": 5,
      "minorRevision": 7,
      "orderNo": 13000,
      "refMissionUuid": null,
      "files": {
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup;\n// output = insertLine(output, 'on checkPrevMove', { line: '\\t\\t//  ## CUSTOM COMMANDS ##\\n\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#\\n\\t\\t//  ## END OF CUSTOM COMMANDS ##', offset: -9 });\noutput = insertLine(output, 'on checkPrevMove', { line: '\\t\\t//  ## CUSTOM COMMANDS ##\\n\\t\\t#BEGIN_EDITABLE#', offset: -12 });\noutput = insertLine(output, 'on checkPrevMove', { line: '\\t\\t#END_EDITABLE#\\n\\t\\t//  ## END OF CUSTOM COMMANDS ##', offset: -9 });\noutput = insertLine(output, 'function checkPrevMove', { line: `\\t\\telse if (command.split(\"\").map(l => l.charCodeAt(0)).join(\"\") == 981081171013210610197110115) displayBotMessage('Passphrase accepted, you can now move on to the next step.');`, offset: -9 });\nreturn output;",
          "mode": "modify",
          "answers": [
            "\n        else if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}"
          ]
        }
      },
      "tests": {
        "2818466596096458": {
          "title": "Add your own commands and responses.",
          "stepId": "6550645787800818",
          "testId": "2818466596096458",
          "orderNo": 1000,
          "testFunction": "// Expectation:\n// pass.if.js.editable(0).equivalent(``);\npass.on('readUserInput').var(`command == 'blue jeans'`);",
          "failureMessage": ""
        }
      }
    },
    "7600545062460979": {
      "title": "Chat-bot enhancement",
      "type": "code",
      "content": {
        "instructions": "<p>In the \"Auto Navigation\" project, we improved our algorithm so the smart car can navigate on any randomly generate map.</p>\n<p>In a real self-driving car, the ability to figure out where to go comes from understanding its surroundings, and sometimes it is useful to display this process, so the driver knows what the smart car is doing.</p>\n<p>To continue enhancing our chat-bot, we will start with adding a real-time feedback feature.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "notes": "<p><br></p>"
      },
      "deleted": false,
      "stepId": "7600545062460979",
      "majorRevision": 5,
      "minorRevision": 0,
      "orderNo": 14000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": [],
          "contentsWithAnswers": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = `var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 12;\nvar nRow = 8;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar autoMode = false;\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n\n    //  place the car on the first block in the track\n    car.rotation = 0;\n\n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\\\s+/g, ' ').toLowerCase();\n\n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\t##CUSTOM_COMMANDS##\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n\n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        moveCarTo(currentCell.right);\n    }\n    else if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        moveCarTo(currentCell.up);\n    }\n    else if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        moveCarTo(currentCell.down);\n    }\n    else if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        moveCarTo(currentCell.left);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else if (currentCell.reachableRoads.length == 0) {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n        else if (currentCell.reachableRoads.length == 1) {\n            displayBotMessage('Returned to starting cell, turning around...');\n            moveCarTo(currentCell.reachableRoads[0]);\n            autoMode = true;\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n\n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n\n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n\n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = '(x: ' + (nthColumn + 1) + ', y: ' + (nthRow + 1) + ')';\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n\n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}#BEGIN_EDITABLE##END_EDITABLE#`;\n  \nconst customCommands = codeWithoutMarkup.replace(/[\\s\\S]*\\/\\/  ## CUSTOM COMMANDS ##/, '').split('').reverse().join('').replace(/[\\s\\S]*## SDNAMMOC MOTSUC FO DNE ##  \\/\\//, '').split('').reverse().join('').trim();\n\nreturn output.replace(/##CUSTOM_COMMANDS##/, customCommands);",
          "mode": "modify",
          "answers": [],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 12;\nvar nRow = 8;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar autoMode = false;\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n\n    //  place the car on the first block in the track\n    car.rotation = 0;\n\n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n\n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n\n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        moveCarTo(currentCell.right);\n    }\n    else if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        moveCarTo(currentCell.up);\n    }\n    else if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        moveCarTo(currentCell.down);\n    }\n    else if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        moveCarTo(currentCell.left);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else if (currentCell.reachableRoads.length == 0) {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n        else if (currentCell.reachableRoads.length == 1) {\n            displayBotMessage('Returned to starting cell, turning around...');\n            moveCarTo(currentCell.reachableRoads[0]);\n            autoMode = true;\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n\n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n\n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n\n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = '(x: ' + (nthColumn + 1) + ', y: ' + (nthRow + 1) + ')';\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n\n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "style.css": {
          "contents": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": [],
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {},
      "stepNo": 15
    },
    "6873883945736697": {
      "title": "Feedback toggle",
      "type": "code",
      "content": {
        "instructions": "<p>First we need a on/off switch for receiving feedback from the chat-bot, this switch will be initially set to \"off\" because we don't always want this information.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52\">variable</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/2cabed4d-17d4-44e6-b7e8-f2b77e61cfc6\">Boolean</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','var autoMode')+1##</strong>, create a variable called <strong>showFeedback</strong> to store the Boolean value of <strong>false</strong>.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "6873883945736697",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 15000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup;\noutput = insertLine(output, 'var autoMode', { line: '#BEGIN_EDITABLE#    #END_EDITABLE#', offset: 0 });\nreturn output;",
          "mode": "modify",
          "answers": [
            "var showFeedback = false;"
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 12;\nvar nRow = 8;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar autoMode = false;\n#BEGIN_EDITABLE#var showFeedback = false;#END_EDITABLE#\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n\n    //  place the car on the first block in the track\n    car.rotation = 0;\n\n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n\n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n\n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        moveCarTo(currentCell.right);\n    }\n    else if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        moveCarTo(currentCell.up);\n    }\n    else if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        moveCarTo(currentCell.down);\n    }\n    else if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        moveCarTo(currentCell.left);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else if (currentCell.reachableRoads.length == 0) {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n        else if (currentCell.reachableRoads.length == 1) {\n            displayBotMessage('Returned to starting cell, turning around...');\n            moveCarTo(currentCell.reachableRoads[0]);\n            autoMode = true;\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n\n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n\n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n\n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = '(x: ' + (nthColumn + 1) + ', y: ' + (nthRow + 1) + ')';\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n\n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n} "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "6091657034228096": {
          "title": "Create a variable called <strong>showFeedback</strong> to store the Boolean value of <strong>false</strong>.",
          "stepId": "6873883945736697",
          "testId": "6091657034228096",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var showFeedback = false;`);",
          "failureMessage": ""
        }
      },
      "stepNo": 16
    },
    "1868729916330902": {
      "title": "Feedback on/off toggle commands",
      "type": "code",
      "content": {
        "instructions": "<p>To turn the switch on and off, we will be using the \"show feedback\" and \"hide feedback\" commands.</p>\n<p>To add them to the chat-bot, we'll use <code class=\"syntax\">else if</code> statements like before.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659\">else if</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">1. On <strong>JS line</strong> <strong>##LINE('script.js','on readUserInput')+45##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"show feedback\"</strong>.</p>\n<p class=\"highlight\">2. On <strong>JS line</strong> <strong>##LINE('script.js','on readUserInput')+46##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"hide feedback\"</strong>.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "1868729916330902",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 16000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup;\noutput = insertLine(output, 'function readUserInput', { line: '\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#', offset: 44 });\noutput = insertLine(output, 'function readUserInput', { line: '\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#', offset: 45 });\nreturn output;",
          "mode": "modify",
          "answers": [
            "else if (command == 'show feedback') {}",
            "else if (command == 'hide feedback') {}"
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 12;\nvar nRow = 8;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar autoMode = false;\nvar showFeedback = false;\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n\n    //  place the car on the first block in the track\n    car.rotation = 0;\n\n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n\n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\t#BEGIN_EDITABLE#else if (command == 'show feedback') {}#END_EDITABLE#\n\t\t#BEGIN_EDITABLE#else if (command == 'hide feedback') {}#END_EDITABLE#\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n\n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        moveCarTo(currentCell.right);\n    }\n    else if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        moveCarTo(currentCell.up);\n    }\n    else if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        moveCarTo(currentCell.down);\n    }\n    else if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        moveCarTo(currentCell.left);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else if (currentCell.reachableRoads.length == 0) {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n        else if (currentCell.reachableRoads.length == 1) {\n            displayBotMessage('Returned to starting cell, turning around...');\n            moveCarTo(currentCell.reachableRoads[0]);\n            autoMode = true;\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n\n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n\n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n\n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = '(x: ' + (nthColumn + 1) + ', y: ' + (nthRow + 1) + ')';\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n\n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}   "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "5303769275304180": {
          "title": "Create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"show feedback\"</strong>.",
          "stepId": "1868729916330902",
          "testId": "5303769275304180",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`else if (command == 'show feedback') {}`);",
          "failureMessage": ""
        },
        "1678288049434256": {
          "title": "Create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"hide feedback\"</strong>.",
          "stepId": "1868729916330902",
          "testId": "1678288049434256",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`else if (command == 'hide feedback') {}`);",
          "failureMessage": ""
        }
      },
      "stepNo": 17
    },
    "7169144859641817": {
      "title": "Chat-bot responses",
      "type": "code",
      "content": {
        "instructions": "<p>For each of the 2 commands we added, there needs to be a chat-bot response.</p>\n<p>We can add them using the <code class=\"syntax\">displayBotMessage</code> function.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/c7d23919-b71c-429d-b41c-d9fd7f73ddc5\">function arguments</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">1. On <strong>JS line</strong> <strong>##LINE('script.js','on readUserInput')+46##</strong>, make the chat-bot say <strong>\"Sure, real-time feedback is now turned on.\"</strong>.</p>\n<p class=\"highlight\">2. On <strong>JS line</strong> <strong>##LINE('script.js','on readUserInput')+49##</strong>, make the chat-bot say <strong>\"Okay, feedback is turned off.\"</strong>.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "7169144859641817",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 17000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup.replace(/\\{\\s*\\}\\s*$/gm, '{\\n\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#\\n\\t\\t}');\nreturn output;",
          "mode": "modify",
          "answers": [
            "displayBotMessage('Sure, real-time feedback is now turned on.');",
            "displayBotMessage('Okay, feedback is turned off.');"
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 12;\nvar nRow = 8;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar autoMode = false;\nvar showFeedback = false;\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n\n    //  place the car on the first block in the track\n    car.rotation = 0;\n\n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n\n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\t#BEGIN_EDITABLE#displayBotMessage('Sure, real-time feedback is now turned on.');#END_EDITABLE#\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\t#BEGIN_EDITABLE#displayBotMessage('Okay, feedback is turned off.');#END_EDITABLE#\n\t\t}\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n\n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        moveCarTo(currentCell.right);\n    }\n    else if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        moveCarTo(currentCell.up);\n    }\n    else if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        moveCarTo(currentCell.down);\n    }\n    else if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        moveCarTo(currentCell.left);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else if (currentCell.reachableRoads.length == 0) {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n        else if (currentCell.reachableRoads.length == 1) {\n            displayBotMessage('Returned to starting cell, turning around...');\n            moveCarTo(currentCell.reachableRoads[0]);\n            autoMode = true;\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n\n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n\n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n\n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = '(x: ' + (nthColumn + 1) + ', y: ' + (nthRow + 1) + ')';\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n\n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}   "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "2183650336064784": {
          "title": "Make the chat-bot say <strong>\"Sure, real-time feedback is now turned on.\"</strong>.",
          "stepId": "7169144859641817",
          "testId": "2183650336064784",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`displayBotMessage('Sure, real-time feedback is now turned on.');`);",
          "failureMessage": ""
        },
        "940336849025178": {
          "title": "Make the chat-bot say <strong>\"Okay, feedback is turned off.\"</strong>.",
          "stepId": "7169144859641817",
          "testId": "940336849025178",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`displayBotMessage('Okay, feedback is turned off.');`);",
          "failureMessage": ""
        }
      },
      "stepNo": 18
    },
    "6542187187032256": {
      "title": "Toggling the showFeedback switch",
      "type": "code",
      "content": {
        "instructions": "<p>For each of the user commands, we also need to change the value of <strong>showFeedback</strong> accordingly, so it can be used later in conditional statements.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52\">variable</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">1. On <strong>JS line</strong> <strong>##LINE('script.js','on readUserInput')+47##</strong>, change the value of <strong>showFeedback</strong> to <strong>true</strong>.</p>\n<p class=\"highlight\">2. On <strong>JS line</strong> <strong>##LINE('script.js','on readUserInput')+51##</strong>, change the value of <strong>showFeedback</strong> to <strong>false</strong>.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "6542187187032256",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 18000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup;\noutput = insertLine(output, 'function readUserInput', { line: '\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#', offset: 46 });\noutput = insertLine(output, 'function readUserInput', { line: '\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#', offset: 50 });\nreturn output;",
          "mode": "modify",
          "answers": [
            "showFeedback = true;",
            "showFeedback = false;"
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 12;\nvar nRow = 8;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar autoMode = false;\nvar showFeedback = false;\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n\n    //  place the car on the first block in the track\n    car.rotation = 0;\n\n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n\n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\t#BEGIN_EDITABLE#showFeedback = true;#END_EDITABLE#\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\t#BEGIN_EDITABLE#showFeedback = false;#END_EDITABLE#\n\t\t}\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n\n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        moveCarTo(currentCell.right);\n    }\n    else if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        moveCarTo(currentCell.up);\n    }\n    else if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        moveCarTo(currentCell.down);\n    }\n    else if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        moveCarTo(currentCell.left);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else if (currentCell.reachableRoads.length == 0) {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n        else if (currentCell.reachableRoads.length == 1) {\n            displayBotMessage('Returned to starting cell, turning around...');\n            moveCarTo(currentCell.reachableRoads[0]);\n            autoMode = true;\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n\n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n\n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n\n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = '(x: ' + (nthColumn + 1) + ', y: ' + (nthRow + 1) + ')';\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n\n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}     "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "5740830456859610": {
          "title": "Change the value of <strong>showFeedback</strong> to <strong>true</strong>.",
          "stepId": "6542187187032256",
          "testId": "5740830456859610",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`showFeedback = true;`);",
          "failureMessage": ""
        },
        "2747417920482484": {
          "title": "Change the value of <strong>showFeedback</strong> to <strong>false</strong>.",
          "stepId": "6542187187032256",
          "testId": "2747417920482484",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`showFeedback = false;`);",
          "failureMessage": ""
        }
      },
      "stepNo": 19
    },
    "1859782956414436": {
      "title": "Checking feedback toggle",
      "type": "code",
      "content": {
        "instructions": "<p>In the <strong>steerCarToward</strong> function, we have already determined how the car should rotate based on its current position and where it's going next, this is stored in the variables <strong>clockwise</strong> and <strong>antiClockwise</strong>.</p>\n<p>If <strong>clockwise</strong> is true, the car rotates clockwise to its right, and if <strong>antiClockwise</strong> is true, the car rotates anti-clockwise to its left.</p>\n<p>We now only need to check if <strong>showFeedback</strong> is true before deciding whether or not to display feedback information.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659\">if</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','on steer')+27##</strong>, create an <code class=\"syntax\">if</code> statement to check whether <strong>showFeedback</strong> is equal to <strong>true</strong>.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "1859782956414436",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 19000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup;\noutput = insertLine(output, 'function steerCarToward', { line: '\\n\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#', offset: 25 });\nreturn output;",
          "mode": "modify",
          "answers": [
            "if (showFeedback == true) {}"
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 12;\nvar nRow = 8;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar autoMode = false;\nvar showFeedback = false;\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n\n    //  place the car on the first block in the track\n    car.rotation = 0;\n\n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n\n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n\n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        moveCarTo(currentCell.right);\n    }\n    else if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        moveCarTo(currentCell.up);\n    }\n    else if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        moveCarTo(currentCell.down);\n    }\n    else if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        moveCarTo(currentCell.left);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else if (currentCell.reachableRoads.length == 0) {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n        else if (currentCell.reachableRoads.length == 1) {\n            displayBotMessage('Returned to starting cell, turning around...');\n            moveCarTo(currentCell.reachableRoads[0]);\n            autoMode = true;\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n\n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\t#BEGIN_EDITABLE#if (showFeedback == true) {}#END_EDITABLE#\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n        }\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n\n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n\n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = '(x: ' + (nthColumn + 1) + ', y: ' + (nthRow + 1) + ')';\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n\n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}      "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "8336167078986709": {
          "title": "Create an <code class=\"syntax\">if</code> statement to check whether <strong>showFeedback</strong> is equal to <strong>true</strong>.",
          "stepId": "1859782956414436",
          "testId": "8336167078986709",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`if (showFeedback == true) {}`);",
          "failureMessage": ""
        }
      },
      "stepNo": 20
    },
    "4597952922661122": {
      "title": "Displaying feedback",
      "type": "code",
      "content": {
        "instructions": "<p>We've added the same conditional statement in 3 more places:</p>\n<ul>\n<li>\n<p class=\"notes\">Inside the <code class=\"syntax\">else if (antiClockwise) {}</code> statement</p>\n</li>\n<li>\n<p class=\"notes\">Inside the <code class=\"syntax\">else if (cell == car.prevCell) {}</code> statement, this is when the car is going back to the cell it had previously been in.</p>\n</li>\n<li>\n<p class=\"notes\">After the <code class=\"syntax\">else if (cell == car.prevCell) {}</code> statement, this is when none of the conditions on <strong>JS line</strong> <strong>##LINE('script.js','if (clockwise)')##</strong>, <strong>##LINE('script.js','if (antiClockwise)')##</strong> &amp; <strong>##LINE('script.js','-= 180')-1##</strong> is true, which means the car won't be rotating.</p>\n</li>\n</ul>\n<p>Now we can make our chat-bot display the correct feedback in each situation using the <code class=\"syntax\">displayBotMessage</code> function.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/c7d23919-b71c-429d-b41c-d9fd7f73ddc5\">function arguments</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">1. On <strong>JS line</strong> <strong>##LINE('script.js','on steer')+28##</strong>, make the chat-bot say <strong>\"Turning right.\"</strong>.</p>\n<p class=\"highlight\">2. On <strong>JS line</strong> <strong>##LINE('script.js','on steer')+35##</strong>, make the chat-bot say <strong>\"Turning left\"</strong>.</p>\n<p class=\"highlight\">3. On <strong>JS line</strong> <strong>##LINE('script.js','on steer')+42##</strong>, make the chat-bot say <strong>\"Turning around\"</strong>.</p>\n<p class=\"highlight\">4. On <strong>JS line</strong> <strong>##LINE('script.js','on steer')+46##</strong>, make the chat-bot say <strong>\"Straight ahead\"</strong>.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js",
        "notes": "<p><br></p>"
      },
      "deleted": false,
      "stepId": "4597952922661122",
      "majorRevision": 6,
      "minorRevision": 0,
      "orderNo": 20000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup.replace(/\\{\\s*\\}\\s*$/gm, '{\\n\\t\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#\\n\\t\\t\\t}');\noutput = insertLine(output, 'function steerCarToward', { line: '\\n\\t\\t\\tif (showFeedback == true) {\\n\\t\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#\\n\\t\\t\\t}', offset: 32 });\noutput = insertLine(output, 'function steerCarToward', { line: '\\n\\t\\t\\tif (showFeedback == true) {\\n\\t\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#\\n\\t\\t\\t}', offset: 39 });\noutput = insertLine(output, 'function steerCarToward', { line: '\\t\\telse if (showFeedback == true) {\\n\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#\\n\\t\\t}', offset: 44 });\nreturn output;",
          "mode": "modify",
          "answers": [
            "displayBotMessage('Turning right.');",
            "displayBotMessage('Turning left.');",
            "displayBotMessage('Turning around.');",
            "displayBotMessage('Straight ahead.');"
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 12;\nvar nRow = 8;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar autoMode = false;\nvar showFeedback = false;\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n\n    //  place the car on the first block in the track\n    car.rotation = 0;\n\n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n\n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n\n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        moveCarTo(currentCell.right);\n    }\n    else if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        moveCarTo(currentCell.up);\n    }\n    else if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        moveCarTo(currentCell.down);\n    }\n    else if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        moveCarTo(currentCell.left);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else if (currentCell.reachableRoads.length == 0) {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n        else if (currentCell.reachableRoads.length == 1) {\n            displayBotMessage('Returned to starting cell, turning around...');\n            moveCarTo(currentCell.reachableRoads[0]);\n            autoMode = true;\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n\n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\t#BEGIN_EDITABLE#displayBotMessage('Turning right.');#END_EDITABLE#\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\t#BEGIN_EDITABLE#displayBotMessage('Turning left.');#END_EDITABLE#\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\t#BEGIN_EDITABLE#displayBotMessage('Turning around.');#END_EDITABLE#\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\t#BEGIN_EDITABLE#displayBotMessage('Straight ahead.');#END_EDITABLE#\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n\n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n\n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = '(x: ' + (nthColumn + 1) + ', y: ' + (nthRow + 1) + ')';\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n\n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}         "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "6020900731699012": {
          "title": "Make the chat-bot say <strong>\"Turning right.\"</strong>.",
          "stepId": "4597952922661122",
          "testId": "6020900731699012",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`displayBotMessage('Turning right.');`);",
          "failureMessage": ""
        },
        "8102468487355411": {
          "title": "Make the chat-bot say <strong>\"Turning left\"</strong>.",
          "stepId": "4597952922661122",
          "testId": "8102468487355411",
          "orderNo": 2000,
          "testFunction": "// Expectation:\npass.if.js.editable(1).equivalent(`displayBotMessage('Turning left.');`);",
          "failureMessage": ""
        },
        "1139409110770326": {
          "title": "Make the chat-bot say <strong>\"Turning around\"</strong>.",
          "stepId": "4597952922661122",
          "testId": "1139409110770326",
          "orderNo": 3000,
          "testFunction": "// Expectation:\npass.if.js.editable(2).equivalent(`displayBotMessage('Turning around.');`);",
          "failureMessage": ""
        },
        "2309624600717652": {
          "title": "Make the chat-bot say <strong>\"Straight ahead\"</strong>.",
          "stepId": "4597952922661122",
          "testId": "2309624600717652",
          "orderNo": 4000,
          "testFunction": "// Expectation:\npass.if.js.editable(3).equivalent(`displayBotMessage('Straight ahead.');`);",
          "failureMessage": ""
        }
      },
      "stepNo": 21
    },
    "301979592359036": {
      "title": "Add your own commands & responses",
      "type": "code",
      "content": {
        "instructions": "<p>Our chat-bot now understands a few more commands, you can still add more to the list.</p>\n<p>It's up to you, but since we've programmed our smart car to drive itself, it's a good idea for it to know about some locations, such as:</p>\n<pre class=\"language-javascript\"><code>else if (command == \"where is River Thames?\") {\n    displayBotMessage(\"That's in London.\");\n}\nelse if (command == \"Best pizza in New York\") {\n    displayBotMessage(\"Juliana's Pizza, 19 Old Fulton St\");\n}</code></pre>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659\">else if</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/faca0fa5-3b57-423b-98be-8dd2273f97e1\">relational operators</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/c7d23919-b71c-429d-b41c-d9fd7f73ddc5\">function arguments</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','on decide')-11##</strong>, add your own commands and responses.</p>\n<hr />\n<p class=\"highlight\">Wait for instructions from&nbsp;your instructor&nbsp;to continue</p>",
        "startTab": "script.js",
        "notes": "<p>To proceed to step 24, ask the students to type <strong>rocky hill</strong> into the chatbot</p>"
      },
      "deleted": false,
      "stepId": "301979592359036",
      "majorRevision": 5,
      "minorRevision": 7,
      "orderNo": 21000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n\t<div id='content'>\n\t\t<p id='title'>Auto Navigation</p>\n\n\t\t<div id='grid'>\n\t\t\t<div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n\n\t<script src=\"script.js\"></script>\n</body>\n</html>\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup;\n// output = insertLine(output, 'on decide', { line: '\\t\\t//  ## CUSTOM COMMANDS ##\\n\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#\\n\\t\\t//  ## END OF CUSTOM COMMANDS ##', offset: -10 });\noutput = insertLine(output, 'function readUserInput', { line: '\\t\\t//  ## CUSTOM COMMANDS ##\\n\\t\\t#BEGIN_EDITABLE#', offset: 52 });\noutput = insertLine(output, 'function decideNextMove', { line: '\\t\\t#END_EDITABLE#\\n\\t\\t//  ## END OF CUSTOM COMMANDS ##', offset: -10 });\noutput = insertLine(output, 'function decideNextMove', { line: `\\t\\telse if (command.split(\"\").map(l => l.charCodeAt(0)).join(\"\") == 1141119910712132104105108108) displayBotMessage('Passphrase accepted, you can now move on to the next step.');`, offset: -10 });\nreturn output;",
          "mode": "modify",
          "answers": [
            "\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n      \telse if (command == 'where is home?') {\n          \tdisplayBotMessage('earth');\n        }\n\t\t"
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 12;\nvar nRow = 8;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar roadCells = [];\n\nvar autoMode = false;\nvar showFeedback = false;\n\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n\n    //  place the car on the first block in the track\n    car.rotation = 0;\n\n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n\n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\t//  ## CUSTOM COMMANDS ##\n\t\t#BEGIN_EDITABLE#\n\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n      \telse if (command == 'where is home?') {\n          \tdisplayBotMessage('earth');\n        }\n\t\t#END_EDITABLE#\n\t\t//  ## END OF CUSTOM COMMANDS ##\n\t\telse if (command.split(\"\").map(l => l.charCodeAt(0)).join(\"\") == 1141119910712132104105108108) displayBotMessage('Passphrase accepted, you can now move on to the next step.');\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n\n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n\n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        moveCarTo(currentCell.right);\n    }\n    else if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        moveCarTo(currentCell.up);\n    }\n    else if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        moveCarTo(currentCell.down);\n    }\n    else if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        moveCarTo(currentCell.left);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else if (currentCell.reachableRoads.length == 0) {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n        else if (currentCell.reachableRoads.length == 1) {\n            displayBotMessage('Returned to starting cell, turning around...');\n            moveCarTo(currentCell.reachableRoads[0]);\n            autoMode = true;\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n\n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.currentRow = gridCells.filter(row => row.includes(nextCell))[0];\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning right.');\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning left.');\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning around.');\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\tdisplayBotMessage('Straight ahead.');\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.currentRow = randomItemFrom(gridCells);\n\n    var prevRoadCell = car.currentRow[0];\n    var newRoadCell;\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        remove(prevRoadCell).from(newRoadCell.paths);\n\n        if (newRoadCell.up == prevRoadCell) {\n            newRoadCell.roadType.push('up');\n            prevRoadCell.roadType.push('down');\n        }\n        else if (newRoadCell.down == prevRoadCell) {\n            newRoadCell.roadType.push('down');\n            prevRoadCell.roadType.push('up');\n        }\n        else {\n            newRoadCell.roadType.push('left');\n            prevRoadCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n\n        //  update prevCell for next loop iteration\n        prevRoadCell = newRoadCell;\n        roadCells.push(newRoadCell);\n    }\n    while (newRoadCell.endOfRow == false);\n\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n}\n\nfunction drawGrid() {\n    resizeGrid();\n\n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = cell.down = cell.left = cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.row = nthRow;\n            cell.column = nthColumn;\n            cell.location = '(x: ' + (nthColumn + 1) + ', y: ' + (nthRow + 1) + ')';\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n\n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}            "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: 'FailedAttempt';\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: white;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    border: 1px dotted rgba(0, 0, 0, 0.3);\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "3345064504379610": {
          "title": "Add your own commands and responses.",
          "stepId": "301979592359036",
          "testId": "3345064504379610",
          "orderNo": 1000,
          "testFunction": "// Expectation:\n// pass.if.js.editable(0).equivalent(``);\npass.on('readUserInput').var(`command == 'rocky hill'`);",
          "failureMessage": ""
        }
      },
      "stepNo": 22
    },
    "635087442072168": {
      "title": "Chat-bot enhancement",
      "type": "code",
      "content": {
        "instructions": "<p>In the \"Random Decision\" project, we were introduced to a more complex map with many paths, some lead to the finish line but some lead to dead ends.</p>\n<p>We randomised the decision making of our smart car and improved its chances of reaching the finish line.</p>\n<p>We will now continue to use the concept of randomness and create a random fact generator, so our chat-bot can use it to entertain the user while it's driving itself.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "notes": "<p><br></p>"
      },
      "deleted": false,
      "stepId": "635087442072168",
      "majorRevision": 5,
      "minorRevision": 4,
      "orderNo": 22000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\r\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\"> \r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div id='content'>\r\n        <p id='title'>Random Decision</p>\r\n\r\n        <div id='grid'>\r\n            <div id='car'></div>\r\n        </div>\r\n    </div>\r\n\r\n    <div id='chatbot'>\r\n        <div id='messages'></div>\r\n\r\n        <div id='inputContainer'>\r\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\r\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": [],
          "contentsWithAnswers": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\r\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\"> \r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div id='content'>\r\n        <p id='title'>Random Decision</p>\r\n\r\n        <div id='grid'>\r\n            <div id='car'></div>\r\n        </div>\r\n    </div>\r\n\r\n    <div id='chatbot'>\r\n        <div id='messages'></div>\r\n\r\n        <div id='inputContainer'>\r\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\r\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nconst output = `var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 6;\nvar nRow = 4;\nvar deadends = 0.3;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar autoMode = false;\nvar showFeedback = false;\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\t##CUSTOM_COMMANDS##\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n    var availableCells = [];\n    \n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        availableCells.push(currentCell.right);\n    }\n    if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        availableCells.push(currentCell.up);\n    }\n    if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        availableCells.push(currentCell.down);\n    }\n    if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        availableCells.push(currentCell.left);\n    }\n    \n    if (availableCells.length == 1) {\n        moveCarTo(availableCells[0]);\n    }\n    else if (availableCells.length > 1) {\n        var randomNumber = Math.random() * availableCells.length;\n        var randomIndex = Math.floor(randomNumber);\n        var randomCell = availableCells[randomIndex];\n        \n        moveCarTo(randomCell);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning right.');\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning left.');\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning around.');\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\tdisplayBotMessage('Straight ahead.');\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.startCell = randomItemFrom(gridCells)[0];\n\n    var prevRoadCell = car.startCell;\n    var newRoadCell;\n    var removeDeadEnd = roadCell => {\n        if (roadCell.roadType.length > 1) {\n            delete roadCell.deadend;\n        }\n    };\n    var expandFrom = targetCell => {\n        //  remove target cell from the available paths of the previous road cell\n        remove(targetCell).from(prevRoadCell.paths);\n        //  remove the previous road cell from the available paths of target cell\n        remove(prevRoadCell).from(targetCell.paths);\n\n        //  assign road type for previous and target cells\n        if (targetCell.up == prevRoadCell) {\n            prevRoadCell.roadType.push('down');\n            targetCell.roadType.push('up');\n        }\n        else if (targetCell.down == prevRoadCell) {\n            prevRoadCell.roadType.push('up');\n            targetCell.roadType.push('down');\n        }\n        else if (targetCell.left == prevRoadCell) {\n            prevRoadCell.roadType.push('right');\n            targetCell.roadType.push('left');\n        }\n        else {\n            prevRoadCell.roadType.push('left');\n            targetCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n        removeDeadEnd(prevRoadCell);\n\n        if (targetCell.className == 'road' || targetCell.deadend) {\n            targetCell.setRoadType(targetCell.roadType.sort().join(''));\n            removeDeadEnd(targetCell);\n        }\n\n        prevRoadCell = targetCell;\n    };\n\n    /*\n        plot a single path from start to finish\n    */\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        expandFrom(newRoadCell);\n        \n        newRoadCell.paths.forEach(neighbourCell => {\n            //  check whether target cell blocks off paths of neighbouring cells\n            if (neighbourCell.className == 'road') {\n                remove(newRoadCell).from(neighbourCell.paths);\n                remove(neighbourCell).from(newRoadCell.paths);\n            }\n        });\n    }\n    while (newRoadCell.endOfRow == false);\n\n    //  set road type on the last cell in a row\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n\n    /*\n        plot branches until entire map is filled\n    */\n\n    var branch = [];\n    var emptyCells = gridCells.flat().filter(cell => cell.className == '' && cell.right != 'unknown');\n\n    while (emptyCells.length > 0) {\n        //  check if a branch is already created\n        if (branch.length == 0) {\n            //  select a cell from the first path\n            var branchCell = randomItemFrom(gridCells.flat().filter(cell =>\n                cell.className == 'road' &&\n                cell.id != 'finish' &&\n                cell.right != 'unknown' &&\n                cell.right.right != 'unknown' &&\n                cell.right.id != 'finish' &&\n                cell.paths.filter(neighbourCell => neighbourCell.className == '').length > 0\n            ));\n            \n            prevRoadCell = branchCell;\n            newRoadCell = randomItemFrom(branchCell.paths.filter(cell => cell.className == ''));\n        }\n        else {\n            newRoadCell = randomItemFrom(branch[branch.length - 1].paths);\n            remove(prevRoadCell).from(emptyCells);\n\n            //  determine whether new road cell is a deadend\n            if (newRoadCell.className != 'road' && Math.random() > deadends) {\n                newRoadCell.deadend = true;\n                remove(newRoadCell).from(emptyCells);\n            }\n        }\n\n        //  remove paths that lead to the last column\n        if (newRoadCell.right.right == 'unknown') {\n            remove(newRoadCell.right).from(newRoadCell.paths);\n        }\n\n        expandFrom(newRoadCell);\n\n        if (newRoadCell.className == 'road' || newRoadCell.deadend) {\n            branch = [];\n        }\n        else {\n            branch.push(newRoadCell);\n        }\n    }\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = 'unknown';\n            cell.down = 'unknown';\n            cell.left = 'unknown';\n            cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n#BEGIN_EDITABLE##END_EDITABLE#`;\n\nconst customCommands = codeWithoutMarkup.replace(/[\\s\\S]*\\/\\/  ## CUSTOM COMMANDS ##/, '').split('').reverse().join('').replace(/[\\s\\S]*## SDNAMMOC MOTSUC FO DNE ##  \\/\\//, '').split('').reverse().join('').trim();\n\nreturn output.replace(/##CUSTOM_COMMANDS##/, customCommands);",
          "mode": "modify",
          "answers": [],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 6;\nvar nRow = 4;\nvar deadends = 0.3;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar autoMode = false;\nvar showFeedback = false;\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n      \telse if (command == 'where is home?') {\n          \tdisplayBotMessage('earth');\n        }\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n    var availableCells = [];\n    \n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        availableCells.push(currentCell.right);\n    }\n    if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        availableCells.push(currentCell.up);\n    }\n    if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        availableCells.push(currentCell.down);\n    }\n    if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        availableCells.push(currentCell.left);\n    }\n    \n    if (availableCells.length == 1) {\n        moveCarTo(availableCells[0]);\n    }\n    else if (availableCells.length > 1) {\n        var randomNumber = Math.random() * availableCells.length;\n        var randomIndex = Math.floor(randomNumber);\n        var randomCell = availableCells[randomIndex];\n        \n        moveCarTo(randomCell);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning right.');\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning left.');\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning around.');\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\tdisplayBotMessage('Straight ahead.');\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.startCell = randomItemFrom(gridCells)[0];\n\n    var prevRoadCell = car.startCell;\n    var newRoadCell;\n    var removeDeadEnd = roadCell => {\n        if (roadCell.roadType.length > 1) {\n            delete roadCell.deadend;\n        }\n    };\n    var expandFrom = targetCell => {\n        //  remove target cell from the available paths of the previous road cell\n        remove(targetCell).from(prevRoadCell.paths);\n        //  remove the previous road cell from the available paths of target cell\n        remove(prevRoadCell).from(targetCell.paths);\n\n        //  assign road type for previous and target cells\n        if (targetCell.up == prevRoadCell) {\n            prevRoadCell.roadType.push('down');\n            targetCell.roadType.push('up');\n        }\n        else if (targetCell.down == prevRoadCell) {\n            prevRoadCell.roadType.push('up');\n            targetCell.roadType.push('down');\n        }\n        else if (targetCell.left == prevRoadCell) {\n            prevRoadCell.roadType.push('right');\n            targetCell.roadType.push('left');\n        }\n        else {\n            prevRoadCell.roadType.push('left');\n            targetCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n        removeDeadEnd(prevRoadCell);\n\n        if (targetCell.className == 'road' || targetCell.deadend) {\n            targetCell.setRoadType(targetCell.roadType.sort().join(''));\n            removeDeadEnd(targetCell);\n        }\n\n        prevRoadCell = targetCell;\n    };\n\n    /*\n        plot a single path from start to finish\n    */\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        expandFrom(newRoadCell);\n        \n        newRoadCell.paths.forEach(neighbourCell => {\n            //  check whether target cell blocks off paths of neighbouring cells\n            if (neighbourCell.className == 'road') {\n                remove(newRoadCell).from(neighbourCell.paths);\n                remove(neighbourCell).from(newRoadCell.paths);\n            }\n        });\n    }\n    while (newRoadCell.endOfRow == false);\n\n    //  set road type on the last cell in a row\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n\n    /*\n        plot branches until entire map is filled\n    */\n\n    var branch = [];\n    var emptyCells = gridCells.flat().filter(cell => cell.className == '' && cell.right != 'unknown');\n\n    while (emptyCells.length > 0) {\n        //  check if a branch is already created\n        if (branch.length == 0) {\n            //  select a cell from the first path\n            var branchCell = randomItemFrom(gridCells.flat().filter(cell =>\n                cell.className == 'road' &&\n                cell.id != 'finish' &&\n                cell.right != 'unknown' &&\n                cell.right.right != 'unknown' &&\n                cell.right.id != 'finish' &&\n                cell.paths.filter(neighbourCell => neighbourCell.className == '').length > 0\n            ));\n            \n            prevRoadCell = branchCell;\n            newRoadCell = randomItemFrom(branchCell.paths.filter(cell => cell.className == ''));\n        }\n        else {\n            newRoadCell = randomItemFrom(branch[branch.length - 1].paths);\n            remove(prevRoadCell).from(emptyCells);\n\n            //  determine whether new road cell is a deadend\n            if (newRoadCell.className != 'road' && Math.random() > deadends) {\n                newRoadCell.deadend = true;\n                remove(newRoadCell).from(emptyCells);\n            }\n        }\n\n        //  remove paths that lead to the last column\n        if (newRoadCell.right.right == 'unknown') {\n            remove(newRoadCell.right).from(newRoadCell.paths);\n        }\n\n        expandFrom(newRoadCell);\n\n        if (newRoadCell.className == 'road' || newRoadCell.deadend) {\n            branch = [];\n        }\n        else {\n            branch.push(newRoadCell);\n        }\n    }\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = 'unknown';\n            cell.down = 'unknown';\n            cell.left = 'unknown';\n            cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "style.css": {
          "contents": "/* font converted using font-converter.net. thank you! */\r\n@font-face {\r\n    font-family: \"FailedAttempt\";\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\r\n    /* IE9 Compat Modes */\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\r\n        /* IE6-IE8 */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\r\n        /* Open Type Font */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\r\n        /* Legacy iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\r\n        /* Safari, Android, iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\r\n        /* Modern Browsers */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\r\n    /* Modern Browsers */\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    font-family: 'FailedAttempt';\r\n    background-color: #333;\r\n}\r\n\r\nbutton,\r\ninput,\r\ntextarea {\r\n    outline: none;\r\n    border: none;\r\n    transition: box-shadow 0.2s ease-in-out;\r\n}\r\n\r\nbutton {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:active {\r\n    transform: scale(0.98);\r\n}\r\n\r\n#title {\r\n    padding-top: 10px;\r\n    margin-bottom: 10px;\r\n    color: white;\r\n}\r\n\r\n#content {\r\n    width: 90vw;\r\n    margin: auto;\r\n}\r\n\r\n#content,\r\n#grid {\r\n    position: relative;\r\n}\r\n\r\n/*\r\n    simulation area styles\r\n*/\r\n#grid {\r\n    border-radius: 5px;\r\n    background-color: mediumseagreen;\r\n    box-shadow: 0 0 15px #111;\r\n    overflow: hidden;\r\n}\r\n\r\n#grid>div {\r\n    position: absolute;\r\n}\r\n\r\n#car {\r\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\r\n    background-size: 60%;\r\n    background-position: 25% center;\r\n    background-repeat: no-repeat;\r\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\r\n    z-index: 1;\r\n}\r\n\r\n.road {\r\n    background-repeat: no-repeat;\r\n    background-origin: border-box;\r\n    background-size: 100%;\r\n    border: 1px dotted rgba(0, 0, 0, 0.3);\r\n    transform: scale(1.015);\r\n}\r\n\r\n#btnRun {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    padding: 10px 30px 10px 15px;\r\n    font-size: 50px;\r\n    border-radius: 20px;\r\n    font-family: 'FailedAttempt';\r\n    color: ghostwhite;\r\n    background-color: dodgerblue;\r\n    transform: translateX(-50%);\r\n    transform-origin: 0;\r\n}\r\n\r\n#btnRun:hover {\r\n    box-shadow: 0 0 20px #111;\r\n}\r\n\r\n#btnRun:active {\r\n    transform: scale(0.98) translate(-50%);\r\n}\r\n\r\n#btnRun>.fa {\r\n    transform: scale(0.6);\r\n}\r\n\r\n/*\r\n    chat-bot styles\r\n*/\r\n#chatbot {\r\n    position: fixed;\r\n    left: 50%;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 0 20px 20px;\r\n    max-width: 600px;\r\n    transform: translateX(-50%);\r\n}\r\n\r\n#inputContainer {\r\n    display: flex;\r\n}\r\n\r\n#messages,\r\n#userInput {\r\n    font-family: 'VT323';\r\n}\r\n\r\n#messages {\r\n    height: 120px;\r\n    border-radius: 10px;\r\n    margin: auto auto 10px;\r\n    padding-bottom: 8px;\r\n    font-size: 18px;\r\n    overflow-y: auto;\r\n    background-color: #222;\r\n    color: gainsboro;\r\n}\r\n\r\n.userMessage,\r\n.botMessage {\r\n    padding: 8px 15px 0;\r\n    border-radius: 15px;\r\n}\r\n\r\n.userMessage {\r\n    text-align: right;\r\n    color: ghostwhite;\r\n}\r\n\r\n.botMessage {\r\n    text-align: left;\r\n    color: lightblue;\r\n}\r\n\r\n#userInput {\r\n    height: 40px;\r\n    padding: 10px 20px;\r\n    border-radius: 23px;\r\n    font-size: 20px;\r\n    color: #333;\r\n    flex: auto;\r\n}\r\n\r\n#userInput:hover,\r\n#userInput:focus,\r\n#btnSend:hover {\r\n    box-shadow: 0 0 10px #111;\r\n}\r\n\r\n#btnSend {\r\n    margin-left: 10px;\r\n    height: 40px;\r\n    padding: 0 10px;\r\n    border-radius: 10px;\r\n    background-color: dodgerblue;\r\n    color: white;\r\n    font-size: 20px;\r\n    flex: none;\r\n}\r\n\r\n#messages::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n#messages::-webkit-scrollbar-thumb {\r\n    border-style: solid;\r\n    border-color: transparent;\r\n    border-radius: 5px;\r\n    background-color: silver;\r\n    background-clip: content-box;\r\n}\r\n\r\n#messages::-webkit-scrollbar-track {\r\n    margin: 10px;\r\n}\r\n#BEGIN_EDITABLE##END_EDITABLE#",
          "mode": "new_contents",
          "answers": [],
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\r\n@font-face {\r\n    font-family: \"FailedAttempt\";\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\r\n    /* IE9 Compat Modes */\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\r\n        /* IE6-IE8 */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\r\n        /* Open Type Font */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\r\n        /* Legacy iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\r\n        /* Safari, Android, iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\r\n        /* Modern Browsers */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\r\n    /* Modern Browsers */\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    font-family: 'FailedAttempt';\r\n    background-color: #333;\r\n}\r\n\r\nbutton,\r\ninput,\r\ntextarea {\r\n    outline: none;\r\n    border: none;\r\n    transition: box-shadow 0.2s ease-in-out;\r\n}\r\n\r\nbutton {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:active {\r\n    transform: scale(0.98);\r\n}\r\n\r\n#title {\r\n    padding-top: 10px;\r\n    margin-bottom: 10px;\r\n    color: white;\r\n}\r\n\r\n#content {\r\n    width: 90vw;\r\n    margin: auto;\r\n}\r\n\r\n#content,\r\n#grid {\r\n    position: relative;\r\n}\r\n\r\n/*\r\n    simulation area styles\r\n*/\r\n#grid {\r\n    border-radius: 5px;\r\n    background-color: mediumseagreen;\r\n    box-shadow: 0 0 15px #111;\r\n    overflow: hidden;\r\n}\r\n\r\n#grid>div {\r\n    position: absolute;\r\n}\r\n\r\n#car {\r\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\r\n    background-size: 60%;\r\n    background-position: 25% center;\r\n    background-repeat: no-repeat;\r\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\r\n    z-index: 1;\r\n}\r\n\r\n.road {\r\n    background-repeat: no-repeat;\r\n    background-origin: border-box;\r\n    background-size: 100%;\r\n    border: 1px dotted rgba(0, 0, 0, 0.3);\r\n    transform: scale(1.015);\r\n}\r\n\r\n#btnRun {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    padding: 10px 30px 10px 15px;\r\n    font-size: 50px;\r\n    border-radius: 20px;\r\n    font-family: 'FailedAttempt';\r\n    color: ghostwhite;\r\n    background-color: dodgerblue;\r\n    transform: translateX(-50%);\r\n    transform-origin: 0;\r\n}\r\n\r\n#btnRun:hover {\r\n    box-shadow: 0 0 20px #111;\r\n}\r\n\r\n#btnRun:active {\r\n    transform: scale(0.98) translate(-50%);\r\n}\r\n\r\n#btnRun>.fa {\r\n    transform: scale(0.6);\r\n}\r\n\r\n/*\r\n    chat-bot styles\r\n*/\r\n#chatbot {\r\n    position: fixed;\r\n    left: 50%;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 0 20px 20px;\r\n    max-width: 600px;\r\n    transform: translateX(-50%);\r\n}\r\n\r\n#inputContainer {\r\n    display: flex;\r\n}\r\n\r\n#messages,\r\n#userInput {\r\n    font-family: 'VT323';\r\n}\r\n\r\n#messages {\r\n    height: 120px;\r\n    border-radius: 10px;\r\n    margin: auto auto 10px;\r\n    padding-bottom: 8px;\r\n    font-size: 18px;\r\n    overflow-y: auto;\r\n    background-color: #222;\r\n    color: gainsboro;\r\n}\r\n\r\n.userMessage,\r\n.botMessage {\r\n    padding: 8px 15px 0;\r\n    border-radius: 15px;\r\n}\r\n\r\n.userMessage {\r\n    text-align: right;\r\n    color: ghostwhite;\r\n}\r\n\r\n.botMessage {\r\n    text-align: left;\r\n    color: lightblue;\r\n}\r\n\r\n#userInput {\r\n    height: 40px;\r\n    padding: 10px 20px;\r\n    border-radius: 23px;\r\n    font-size: 20px;\r\n    color: #333;\r\n    flex: auto;\r\n}\r\n\r\n#userInput:hover,\r\n#userInput:focus,\r\n#btnSend:hover {\r\n    box-shadow: 0 0 10px #111;\r\n}\r\n\r\n#btnSend {\r\n    margin-left: 10px;\r\n    height: 40px;\r\n    padding: 0 10px;\r\n    border-radius: 10px;\r\n    background-color: dodgerblue;\r\n    color: white;\r\n    font-size: 20px;\r\n    flex: none;\r\n}\r\n\r\n#messages::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n#messages::-webkit-scrollbar-thumb {\r\n    border-style: solid;\r\n    border-color: transparent;\r\n    border-radius: 5px;\r\n    background-color: silver;\r\n    background-clip: content-box;\r\n}\r\n\r\n#messages::-webkit-scrollbar-track {\r\n    margin: 10px;\r\n}\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {},
      "stepNo": 23
    },
    "2660722603478664": {
      "title": "Adding the \"fact\" command",
      "type": "code",
      "content": {
        "instructions": "<p>First let's add the actual command that will generate the random fact.</p>\n<p>We'll keep this one general so it can be used for other things later, let's say \"tell me\".</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/2ed56671-86c8-4799-a423-5d7f549ec659\">else if</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','hide feedback')+4##</strong>, create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"tell me\"</strong>.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "2660722603478664",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 23000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\r\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\"> \r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div id='content'>\r\n        <p id='title'>Random Decision</p>\r\n\r\n        <div id='grid'>\r\n            <div id='car'></div>\r\n        </div>\r\n    </div>\r\n\r\n    <div id='chatbot'>\r\n        <div id='messages'></div>\r\n\r\n        <div id='inputContainer'>\r\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\r\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup;\noutput = insertLine(output, 'hide feedback', { line: '\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#', offset: 3 });\nreturn output;",
          "mode": "modify",
          "answers": [
            "else if (command == 'tell me') {}"
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 6;\nvar nRow = 4;\nvar deadends = 0.3;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar autoMode = false;\nvar showFeedback = false;\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\t#BEGIN_EDITABLE#else if (command == 'tell me') {}#END_EDITABLE#\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n      \telse if (command == 'where is home?') {\n          \tdisplayBotMessage('earth');\n        }\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n    var availableCells = [];\n    \n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        availableCells.push(currentCell.right);\n    }\n    if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        availableCells.push(currentCell.up);\n    }\n    if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        availableCells.push(currentCell.down);\n    }\n    if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        availableCells.push(currentCell.left);\n    }\n    \n    if (availableCells.length == 1) {\n        moveCarTo(availableCells[0]);\n    }\n    else if (availableCells.length > 1) {\n        var randomNumber = Math.random() * availableCells.length;\n        var randomIndex = Math.floor(randomNumber);\n        var randomCell = availableCells[randomIndex];\n        \n        moveCarTo(randomCell);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning right.');\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning left.');\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning around.');\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\tdisplayBotMessage('Straight ahead.');\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.startCell = randomItemFrom(gridCells)[0];\n\n    var prevRoadCell = car.startCell;\n    var newRoadCell;\n    var removeDeadEnd = roadCell => {\n        if (roadCell.roadType.length > 1) {\n            delete roadCell.deadend;\n        }\n    };\n    var expandFrom = targetCell => {\n        //  remove target cell from the available paths of the previous road cell\n        remove(targetCell).from(prevRoadCell.paths);\n        //  remove the previous road cell from the available paths of target cell\n        remove(prevRoadCell).from(targetCell.paths);\n\n        //  assign road type for previous and target cells\n        if (targetCell.up == prevRoadCell) {\n            prevRoadCell.roadType.push('down');\n            targetCell.roadType.push('up');\n        }\n        else if (targetCell.down == prevRoadCell) {\n            prevRoadCell.roadType.push('up');\n            targetCell.roadType.push('down');\n        }\n        else if (targetCell.left == prevRoadCell) {\n            prevRoadCell.roadType.push('right');\n            targetCell.roadType.push('left');\n        }\n        else {\n            prevRoadCell.roadType.push('left');\n            targetCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n        removeDeadEnd(prevRoadCell);\n\n        if (targetCell.className == 'road' || targetCell.deadend) {\n            targetCell.setRoadType(targetCell.roadType.sort().join(''));\n            removeDeadEnd(targetCell);\n        }\n\n        prevRoadCell = targetCell;\n    };\n\n    /*\n        plot a single path from start to finish\n    */\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        expandFrom(newRoadCell);\n        \n        newRoadCell.paths.forEach(neighbourCell => {\n            //  check whether target cell blocks off paths of neighbouring cells\n            if (neighbourCell.className == 'road') {\n                remove(newRoadCell).from(neighbourCell.paths);\n                remove(neighbourCell).from(newRoadCell.paths);\n            }\n        });\n    }\n    while (newRoadCell.endOfRow == false);\n\n    //  set road type on the last cell in a row\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n\n    /*\n        plot branches until entire map is filled\n    */\n\n    var branch = [];\n    var emptyCells = gridCells.flat().filter(cell => cell.className == '' && cell.right != 'unknown');\n\n    while (emptyCells.length > 0) {\n        //  check if a branch is already created\n        if (branch.length == 0) {\n            //  select a cell from the first path\n            var branchCell = randomItemFrom(gridCells.flat().filter(cell =>\n                cell.className == 'road' &&\n                cell.id != 'finish' &&\n                cell.right != 'unknown' &&\n                cell.right.right != 'unknown' &&\n                cell.right.id != 'finish' &&\n                cell.paths.filter(neighbourCell => neighbourCell.className == '').length > 0\n            ));\n            \n            prevRoadCell = branchCell;\n            newRoadCell = randomItemFrom(branchCell.paths.filter(cell => cell.className == ''));\n        }\n        else {\n            newRoadCell = randomItemFrom(branch[branch.length - 1].paths);\n            remove(prevRoadCell).from(emptyCells);\n\n            //  determine whether new road cell is a deadend\n            if (newRoadCell.className != 'road' && Math.random() > deadends) {\n                newRoadCell.deadend = true;\n                remove(newRoadCell).from(emptyCells);\n            }\n        }\n\n        //  remove paths that lead to the last column\n        if (newRoadCell.right.right == 'unknown') {\n            remove(newRoadCell.right).from(newRoadCell.paths);\n        }\n\n        expandFrom(newRoadCell);\n\n        if (newRoadCell.className == 'road' || newRoadCell.deadend) {\n            branch = [];\n        }\n        else {\n            branch.push(newRoadCell);\n        }\n    }\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = 'unknown';\n            cell.down = 'unknown';\n            cell.left = 'unknown';\n            cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\r\n@font-face {\r\n    font-family: \"FailedAttempt\";\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\r\n    /* IE9 Compat Modes */\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\r\n        /* IE6-IE8 */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\r\n        /* Open Type Font */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\r\n        /* Legacy iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\r\n        /* Safari, Android, iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\r\n        /* Modern Browsers */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\r\n    /* Modern Browsers */\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    font-family: 'FailedAttempt';\r\n    background-color: #333;\r\n}\r\n\r\nbutton,\r\ninput,\r\ntextarea {\r\n    outline: none;\r\n    border: none;\r\n    transition: box-shadow 0.2s ease-in-out;\r\n}\r\n\r\nbutton {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:active {\r\n    transform: scale(0.98);\r\n}\r\n\r\n#title {\r\n    padding-top: 10px;\r\n    margin-bottom: 10px;\r\n    color: white;\r\n}\r\n\r\n#content {\r\n    width: 90vw;\r\n    margin: auto;\r\n}\r\n\r\n#content,\r\n#grid {\r\n    position: relative;\r\n}\r\n\r\n/*\r\n    simulation area styles\r\n*/\r\n#grid {\r\n    border-radius: 5px;\r\n    background-color: mediumseagreen;\r\n    box-shadow: 0 0 15px #111;\r\n    overflow: hidden;\r\n}\r\n\r\n#grid>div {\r\n    position: absolute;\r\n}\r\n\r\n#car {\r\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\r\n    background-size: 60%;\r\n    background-position: 25% center;\r\n    background-repeat: no-repeat;\r\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\r\n    z-index: 1;\r\n}\r\n\r\n.road {\r\n    background-repeat: no-repeat;\r\n    background-origin: border-box;\r\n    background-size: 100%;\r\n    border: 1px dotted rgba(0, 0, 0, 0.3);\r\n    transform: scale(1.015);\r\n}\r\n\r\n#btnRun {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    padding: 10px 30px 10px 15px;\r\n    font-size: 50px;\r\n    border-radius: 20px;\r\n    font-family: 'FailedAttempt';\r\n    color: ghostwhite;\r\n    background-color: dodgerblue;\r\n    transform: translateX(-50%);\r\n    transform-origin: 0;\r\n}\r\n\r\n#btnRun:hover {\r\n    box-shadow: 0 0 20px #111;\r\n}\r\n\r\n#btnRun:active {\r\n    transform: scale(0.98) translate(-50%);\r\n}\r\n\r\n#btnRun>.fa {\r\n    transform: scale(0.6);\r\n}\r\n\r\n/*\r\n    chat-bot styles\r\n*/\r\n#chatbot {\r\n    position: fixed;\r\n    left: 50%;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 0 20px 20px;\r\n    max-width: 600px;\r\n    transform: translateX(-50%);\r\n}\r\n\r\n#inputContainer {\r\n    display: flex;\r\n}\r\n\r\n#messages,\r\n#userInput {\r\n    font-family: 'VT323';\r\n}\r\n\r\n#messages {\r\n    height: 120px;\r\n    border-radius: 10px;\r\n    margin: auto auto 10px;\r\n    padding-bottom: 8px;\r\n    font-size: 18px;\r\n    overflow-y: auto;\r\n    background-color: #222;\r\n    color: gainsboro;\r\n}\r\n\r\n.userMessage,\r\n.botMessage {\r\n    padding: 8px 15px 0;\r\n    border-radius: 15px;\r\n}\r\n\r\n.userMessage {\r\n    text-align: right;\r\n    color: ghostwhite;\r\n}\r\n\r\n.botMessage {\r\n    text-align: left;\r\n    color: lightblue;\r\n}\r\n\r\n#userInput {\r\n    height: 40px;\r\n    padding: 10px 20px;\r\n    border-radius: 23px;\r\n    font-size: 20px;\r\n    color: #333;\r\n    flex: auto;\r\n}\r\n\r\n#userInput:hover,\r\n#userInput:focus,\r\n#btnSend:hover {\r\n    box-shadow: 0 0 10px #111;\r\n}\r\n\r\n#btnSend {\r\n    margin-left: 10px;\r\n    height: 40px;\r\n    padding: 0 10px;\r\n    border-radius: 10px;\r\n    background-color: dodgerblue;\r\n    color: white;\r\n    font-size: 20px;\r\n    flex: none;\r\n}\r\n\r\n#messages::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n#messages::-webkit-scrollbar-thumb {\r\n    border-style: solid;\r\n    border-color: transparent;\r\n    border-radius: 5px;\r\n    background-color: silver;\r\n    background-clip: content-box;\r\n}\r\n\r\n#messages::-webkit-scrollbar-track {\r\n    margin: 10px;\r\n}\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "8532168002962241": {
          "title": "Create an <code class=\"syntax\">else if</code> statement to check whether <strong>command</strong> is equal to <strong>\"tell me\"</strong>.",
          "stepId": "2660722603478664",
          "testId": "8532168002962241",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`else if (command == 'tell me') {}`);",
          "failureMessage": ""
        }
      },
      "stepNo": 24
    },
    "1708816665966880": {
      "title": "The facts array",
      "type": "code",
      "content": {
        "instructions": "<p>To achieve randomness, we must first have quantity.</p>\n<p>We will put several facts into an array, and then we can pick a random item from that array to be displayed via our chat-bot.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52\">variable</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/f6b7d0fc-700b-4202-861a-b5900a6fd922\">array</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','hide feedback')+5##</strong>, create a variable called <strong>facts</strong> to store an empty array.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "1708816665966880",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 24000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\r\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\"> \r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div id='content'>\r\n        <p id='title'>Random Decision</p>\r\n\r\n        <div id='grid'>\r\n            <div id='car'></div>\r\n        </div>\r\n    </div>\r\n\r\n    <div id='chatbot'>\r\n        <div id='messages'></div>\r\n\r\n        <div id='inputContainer'>\r\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\r\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup.replace(/\\{\\s*\\}\\s*$/gm, '{\\n\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#\\n\\t\\t}');\nreturn output;",
          "mode": "modify",
          "answers": [
            "var facts = [];"
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 6;\nvar nRow = 4;\nvar deadends = 0.3;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar autoMode = false;\nvar showFeedback = false;\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\telse if (command == 'tell me') {\n\t\t\t#BEGIN_EDITABLE#var facts = [];#END_EDITABLE#\n\t\t}\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n      \telse if (command == 'where is home?') {\n          \tdisplayBotMessage('earth');\n        }\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n    var availableCells = [];\n    \n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        availableCells.push(currentCell.right);\n    }\n    if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        availableCells.push(currentCell.up);\n    }\n    if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        availableCells.push(currentCell.down);\n    }\n    if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        availableCells.push(currentCell.left);\n    }\n    \n    if (availableCells.length == 1) {\n        moveCarTo(availableCells[0]);\n    }\n    else if (availableCells.length > 1) {\n        var randomNumber = Math.random() * availableCells.length;\n        var randomIndex = Math.floor(randomNumber);\n        var randomCell = availableCells[randomIndex];\n        \n        moveCarTo(randomCell);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning right.');\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning left.');\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning around.');\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\tdisplayBotMessage('Straight ahead.');\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.startCell = randomItemFrom(gridCells)[0];\n\n    var prevRoadCell = car.startCell;\n    var newRoadCell;\n    var removeDeadEnd = roadCell => {\n        if (roadCell.roadType.length > 1) {\n            delete roadCell.deadend;\n        }\n    };\n    var expandFrom = targetCell => {\n        //  remove target cell from the available paths of the previous road cell\n        remove(targetCell).from(prevRoadCell.paths);\n        //  remove the previous road cell from the available paths of target cell\n        remove(prevRoadCell).from(targetCell.paths);\n\n        //  assign road type for previous and target cells\n        if (targetCell.up == prevRoadCell) {\n            prevRoadCell.roadType.push('down');\n            targetCell.roadType.push('up');\n        }\n        else if (targetCell.down == prevRoadCell) {\n            prevRoadCell.roadType.push('up');\n            targetCell.roadType.push('down');\n        }\n        else if (targetCell.left == prevRoadCell) {\n            prevRoadCell.roadType.push('right');\n            targetCell.roadType.push('left');\n        }\n        else {\n            prevRoadCell.roadType.push('left');\n            targetCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n        removeDeadEnd(prevRoadCell);\n\n        if (targetCell.className == 'road' || targetCell.deadend) {\n            targetCell.setRoadType(targetCell.roadType.sort().join(''));\n            removeDeadEnd(targetCell);\n        }\n\n        prevRoadCell = targetCell;\n    };\n\n    /*\n        plot a single path from start to finish\n    */\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        expandFrom(newRoadCell);\n        \n        newRoadCell.paths.forEach(neighbourCell => {\n            //  check whether target cell blocks off paths of neighbouring cells\n            if (neighbourCell.className == 'road') {\n                remove(newRoadCell).from(neighbourCell.paths);\n                remove(neighbourCell).from(newRoadCell.paths);\n            }\n        });\n    }\n    while (newRoadCell.endOfRow == false);\n\n    //  set road type on the last cell in a row\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n\n    /*\n        plot branches until entire map is filled\n    */\n\n    var branch = [];\n    var emptyCells = gridCells.flat().filter(cell => cell.className == '' && cell.right != 'unknown');\n\n    while (emptyCells.length > 0) {\n        //  check if a branch is already created\n        if (branch.length == 0) {\n            //  select a cell from the first path\n            var branchCell = randomItemFrom(gridCells.flat().filter(cell =>\n                cell.className == 'road' &&\n                cell.id != 'finish' &&\n                cell.right != 'unknown' &&\n                cell.right.right != 'unknown' &&\n                cell.right.id != 'finish' &&\n                cell.paths.filter(neighbourCell => neighbourCell.className == '').length > 0\n            ));\n            \n            prevRoadCell = branchCell;\n            newRoadCell = randomItemFrom(branchCell.paths.filter(cell => cell.className == ''));\n        }\n        else {\n            newRoadCell = randomItemFrom(branch[branch.length - 1].paths);\n            remove(prevRoadCell).from(emptyCells);\n\n            //  determine whether new road cell is a deadend\n            if (newRoadCell.className != 'road' && Math.random() > deadends) {\n                newRoadCell.deadend = true;\n                remove(newRoadCell).from(emptyCells);\n            }\n        }\n\n        //  remove paths that lead to the last column\n        if (newRoadCell.right.right == 'unknown') {\n            remove(newRoadCell.right).from(newRoadCell.paths);\n        }\n\n        expandFrom(newRoadCell);\n\n        if (newRoadCell.className == 'road' || newRoadCell.deadend) {\n            branch = [];\n        }\n        else {\n            branch.push(newRoadCell);\n        }\n    }\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = 'unknown';\n            cell.down = 'unknown';\n            cell.left = 'unknown';\n            cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\r\n@font-face {\r\n    font-family: \"FailedAttempt\";\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\r\n    /* IE9 Compat Modes */\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\r\n        /* IE6-IE8 */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\r\n        /* Open Type Font */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\r\n        /* Legacy iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\r\n        /* Safari, Android, iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\r\n        /* Modern Browsers */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\r\n    /* Modern Browsers */\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    font-family: 'FailedAttempt';\r\n    background-color: #333;\r\n}\r\n\r\nbutton,\r\ninput,\r\ntextarea {\r\n    outline: none;\r\n    border: none;\r\n    transition: box-shadow 0.2s ease-in-out;\r\n}\r\n\r\nbutton {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:active {\r\n    transform: scale(0.98);\r\n}\r\n\r\n#title {\r\n    padding-top: 10px;\r\n    margin-bottom: 10px;\r\n    color: white;\r\n}\r\n\r\n#content {\r\n    width: 90vw;\r\n    margin: auto;\r\n}\r\n\r\n#content,\r\n#grid {\r\n    position: relative;\r\n}\r\n\r\n/*\r\n    simulation area styles\r\n*/\r\n#grid {\r\n    border-radius: 5px;\r\n    background-color: mediumseagreen;\r\n    box-shadow: 0 0 15px #111;\r\n    overflow: hidden;\r\n}\r\n\r\n#grid>div {\r\n    position: absolute;\r\n}\r\n\r\n#car {\r\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\r\n    background-size: 60%;\r\n    background-position: 25% center;\r\n    background-repeat: no-repeat;\r\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\r\n    z-index: 1;\r\n}\r\n\r\n.road {\r\n    background-repeat: no-repeat;\r\n    background-origin: border-box;\r\n    background-size: 100%;\r\n    border: 1px dotted rgba(0, 0, 0, 0.3);\r\n    transform: scale(1.015);\r\n}\r\n\r\n#btnRun {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    padding: 10px 30px 10px 15px;\r\n    font-size: 50px;\r\n    border-radius: 20px;\r\n    font-family: 'FailedAttempt';\r\n    color: ghostwhite;\r\n    background-color: dodgerblue;\r\n    transform: translateX(-50%);\r\n    transform-origin: 0;\r\n}\r\n\r\n#btnRun:hover {\r\n    box-shadow: 0 0 20px #111;\r\n}\r\n\r\n#btnRun:active {\r\n    transform: scale(0.98) translate(-50%);\r\n}\r\n\r\n#btnRun>.fa {\r\n    transform: scale(0.6);\r\n}\r\n\r\n/*\r\n    chat-bot styles\r\n*/\r\n#chatbot {\r\n    position: fixed;\r\n    left: 50%;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 0 20px 20px;\r\n    max-width: 600px;\r\n    transform: translateX(-50%);\r\n}\r\n\r\n#inputContainer {\r\n    display: flex;\r\n}\r\n\r\n#messages,\r\n#userInput {\r\n    font-family: 'VT323';\r\n}\r\n\r\n#messages {\r\n    height: 120px;\r\n    border-radius: 10px;\r\n    margin: auto auto 10px;\r\n    padding-bottom: 8px;\r\n    font-size: 18px;\r\n    overflow-y: auto;\r\n    background-color: #222;\r\n    color: gainsboro;\r\n}\r\n\r\n.userMessage,\r\n.botMessage {\r\n    padding: 8px 15px 0;\r\n    border-radius: 15px;\r\n}\r\n\r\n.userMessage {\r\n    text-align: right;\r\n    color: ghostwhite;\r\n}\r\n\r\n.botMessage {\r\n    text-align: left;\r\n    color: lightblue;\r\n}\r\n\r\n#userInput {\r\n    height: 40px;\r\n    padding: 10px 20px;\r\n    border-radius: 23px;\r\n    font-size: 20px;\r\n    color: #333;\r\n    flex: auto;\r\n}\r\n\r\n#userInput:hover,\r\n#userInput:focus,\r\n#btnSend:hover {\r\n    box-shadow: 0 0 10px #111;\r\n}\r\n\r\n#btnSend {\r\n    margin-left: 10px;\r\n    height: 40px;\r\n    padding: 0 10px;\r\n    border-radius: 10px;\r\n    background-color: dodgerblue;\r\n    color: white;\r\n    font-size: 20px;\r\n    flex: none;\r\n}\r\n\r\n#messages::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n#messages::-webkit-scrollbar-thumb {\r\n    border-style: solid;\r\n    border-color: transparent;\r\n    border-radius: 5px;\r\n    background-color: silver;\r\n    background-clip: content-box;\r\n}\r\n\r\n#messages::-webkit-scrollbar-track {\r\n    margin: 10px;\r\n}\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "1175426129048510": {
          "title": "Create a variable called <strong>facts</strong> to store an empty array.",
          "stepId": "1708816665966880",
          "testId": "1175426129048510",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var facts = [];`);",
          "failureMessage": ""
        }
      },
      "stepNo": 25
    },
    "4650280905116226": {
      "title": "The first fact",
      "type": "code",
      "content": {
        "instructions": "<p>In the <strong>facts</strong> array, let's add our first fact.</p>\n<p>Since we'll be randomly selecting from this array later, every one of the facts must be a good one - think fun or smart.</p>\n<p>Don't hesitate the do a bit of searching online.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/4abbff41-b31c-4ef1-a42b-4b64470a5f4b\">string</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','var facts')+1##</strong>, add a string into the <strong>facts</strong> array.</p>\n<p class=\"notes\"><strong>Tip</strong>: don't forget each item in an array should be followed by a comma.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "4650280905116226",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 25000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\r\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\"> \r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div id='content'>\r\n        <p id='title'>Random Decision</p>\r\n\r\n        <div id='grid'>\r\n            <div id='car'></div>\r\n        </div>\r\n    </div>\r\n\r\n    <div id='chatbot'>\r\n        <div id='messages'></div>\r\n\r\n        <div id='inputContainer'>\r\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\r\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup.split('\\n');\noutput[108] = '\\t\\t\\tvar facts = [\\n\\t\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#\\n\\t\\t\\t];'\nreturn output.join('\\n');",
          "mode": "modify",
          "answers": [
            "\"fact 1\","
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 6;\nvar nRow = 4;\nvar deadends = 0.3;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar autoMode = false;\nvar showFeedback = false;\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\telse if (command == 'tell me') {\n\t\t\tvar facts = [\n\t\t\t\t#BEGIN_EDITABLE#\"fact 1\",#END_EDITABLE#\n\t\t\t];\n\t\t}\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n      \telse if (command == 'where is home?') {\n          \tdisplayBotMessage('earth');\n        }\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n    var availableCells = [];\n    \n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        availableCells.push(currentCell.right);\n    }\n    if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        availableCells.push(currentCell.up);\n    }\n    if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        availableCells.push(currentCell.down);\n    }\n    if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        availableCells.push(currentCell.left);\n    }\n    \n    if (availableCells.length == 1) {\n        moveCarTo(availableCells[0]);\n    }\n    else if (availableCells.length > 1) {\n        var randomNumber = Math.random() * availableCells.length;\n        var randomIndex = Math.floor(randomNumber);\n        var randomCell = availableCells[randomIndex];\n        \n        moveCarTo(randomCell);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning right.');\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning left.');\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning around.');\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\tdisplayBotMessage('Straight ahead.');\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.startCell = randomItemFrom(gridCells)[0];\n\n    var prevRoadCell = car.startCell;\n    var newRoadCell;\n    var removeDeadEnd = roadCell => {\n        if (roadCell.roadType.length > 1) {\n            delete roadCell.deadend;\n        }\n    };\n    var expandFrom = targetCell => {\n        //  remove target cell from the available paths of the previous road cell\n        remove(targetCell).from(prevRoadCell.paths);\n        //  remove the previous road cell from the available paths of target cell\n        remove(prevRoadCell).from(targetCell.paths);\n\n        //  assign road type for previous and target cells\n        if (targetCell.up == prevRoadCell) {\n            prevRoadCell.roadType.push('down');\n            targetCell.roadType.push('up');\n        }\n        else if (targetCell.down == prevRoadCell) {\n            prevRoadCell.roadType.push('up');\n            targetCell.roadType.push('down');\n        }\n        else if (targetCell.left == prevRoadCell) {\n            prevRoadCell.roadType.push('right');\n            targetCell.roadType.push('left');\n        }\n        else {\n            prevRoadCell.roadType.push('left');\n            targetCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n        removeDeadEnd(prevRoadCell);\n\n        if (targetCell.className == 'road' || targetCell.deadend) {\n            targetCell.setRoadType(targetCell.roadType.sort().join(''));\n            removeDeadEnd(targetCell);\n        }\n\n        prevRoadCell = targetCell;\n    };\n\n    /*\n        plot a single path from start to finish\n    */\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        expandFrom(newRoadCell);\n        \n        newRoadCell.paths.forEach(neighbourCell => {\n            //  check whether target cell blocks off paths of neighbouring cells\n            if (neighbourCell.className == 'road') {\n                remove(newRoadCell).from(neighbourCell.paths);\n                remove(neighbourCell).from(newRoadCell.paths);\n            }\n        });\n    }\n    while (newRoadCell.endOfRow == false);\n\n    //  set road type on the last cell in a row\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n\n    /*\n        plot branches until entire map is filled\n    */\n\n    var branch = [];\n    var emptyCells = gridCells.flat().filter(cell => cell.className == '' && cell.right != 'unknown');\n\n    while (emptyCells.length > 0) {\n        //  check if a branch is already created\n        if (branch.length == 0) {\n            //  select a cell from the first path\n            var branchCell = randomItemFrom(gridCells.flat().filter(cell =>\n                cell.className == 'road' &&\n                cell.id != 'finish' &&\n                cell.right != 'unknown' &&\n                cell.right.right != 'unknown' &&\n                cell.right.id != 'finish' &&\n                cell.paths.filter(neighbourCell => neighbourCell.className == '').length > 0\n            ));\n            \n            prevRoadCell = branchCell;\n            newRoadCell = randomItemFrom(branchCell.paths.filter(cell => cell.className == ''));\n        }\n        else {\n            newRoadCell = randomItemFrom(branch[branch.length - 1].paths);\n            remove(prevRoadCell).from(emptyCells);\n\n            //  determine whether new road cell is a deadend\n            if (newRoadCell.className != 'road' && Math.random() > deadends) {\n                newRoadCell.deadend = true;\n                remove(newRoadCell).from(emptyCells);\n            }\n        }\n\n        //  remove paths that lead to the last column\n        if (newRoadCell.right.right == 'unknown') {\n            remove(newRoadCell.right).from(newRoadCell.paths);\n        }\n\n        expandFrom(newRoadCell);\n\n        if (newRoadCell.className == 'road' || newRoadCell.deadend) {\n            branch = [];\n        }\n        else {\n            branch.push(newRoadCell);\n        }\n    }\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = 'unknown';\n            cell.down = 'unknown';\n            cell.left = 'unknown';\n            cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\r\n@font-face {\r\n    font-family: \"FailedAttempt\";\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\r\n    /* IE9 Compat Modes */\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\r\n        /* IE6-IE8 */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\r\n        /* Open Type Font */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\r\n        /* Legacy iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\r\n        /* Safari, Android, iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\r\n        /* Modern Browsers */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\r\n    /* Modern Browsers */\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    font-family: 'FailedAttempt';\r\n    background-color: #333;\r\n}\r\n\r\nbutton,\r\ninput,\r\ntextarea {\r\n    outline: none;\r\n    border: none;\r\n    transition: box-shadow 0.2s ease-in-out;\r\n}\r\n\r\nbutton {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:active {\r\n    transform: scale(0.98);\r\n}\r\n\r\n#title {\r\n    padding-top: 10px;\r\n    margin-bottom: 10px;\r\n    color: white;\r\n}\r\n\r\n#content {\r\n    width: 90vw;\r\n    margin: auto;\r\n}\r\n\r\n#content,\r\n#grid {\r\n    position: relative;\r\n}\r\n\r\n/*\r\n    simulation area styles\r\n*/\r\n#grid {\r\n    border-radius: 5px;\r\n    background-color: mediumseagreen;\r\n    box-shadow: 0 0 15px #111;\r\n    overflow: hidden;\r\n}\r\n\r\n#grid>div {\r\n    position: absolute;\r\n}\r\n\r\n#car {\r\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\r\n    background-size: 60%;\r\n    background-position: 25% center;\r\n    background-repeat: no-repeat;\r\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\r\n    z-index: 1;\r\n}\r\n\r\n.road {\r\n    background-repeat: no-repeat;\r\n    background-origin: border-box;\r\n    background-size: 100%;\r\n    border: 1px dotted rgba(0, 0, 0, 0.3);\r\n    transform: scale(1.015);\r\n}\r\n\r\n#btnRun {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    padding: 10px 30px 10px 15px;\r\n    font-size: 50px;\r\n    border-radius: 20px;\r\n    font-family: 'FailedAttempt';\r\n    color: ghostwhite;\r\n    background-color: dodgerblue;\r\n    transform: translateX(-50%);\r\n    transform-origin: 0;\r\n}\r\n\r\n#btnRun:hover {\r\n    box-shadow: 0 0 20px #111;\r\n}\r\n\r\n#btnRun:active {\r\n    transform: scale(0.98) translate(-50%);\r\n}\r\n\r\n#btnRun>.fa {\r\n    transform: scale(0.6);\r\n}\r\n\r\n/*\r\n    chat-bot styles\r\n*/\r\n#chatbot {\r\n    position: fixed;\r\n    left: 50%;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 0 20px 20px;\r\n    max-width: 600px;\r\n    transform: translateX(-50%);\r\n}\r\n\r\n#inputContainer {\r\n    display: flex;\r\n}\r\n\r\n#messages,\r\n#userInput {\r\n    font-family: 'VT323';\r\n}\r\n\r\n#messages {\r\n    height: 120px;\r\n    border-radius: 10px;\r\n    margin: auto auto 10px;\r\n    padding-bottom: 8px;\r\n    font-size: 18px;\r\n    overflow-y: auto;\r\n    background-color: #222;\r\n    color: gainsboro;\r\n}\r\n\r\n.userMessage,\r\n.botMessage {\r\n    padding: 8px 15px 0;\r\n    border-radius: 15px;\r\n}\r\n\r\n.userMessage {\r\n    text-align: right;\r\n    color: ghostwhite;\r\n}\r\n\r\n.botMessage {\r\n    text-align: left;\r\n    color: lightblue;\r\n}\r\n\r\n#userInput {\r\n    height: 40px;\r\n    padding: 10px 20px;\r\n    border-radius: 23px;\r\n    font-size: 20px;\r\n    color: #333;\r\n    flex: auto;\r\n}\r\n\r\n#userInput:hover,\r\n#userInput:focus,\r\n#btnSend:hover {\r\n    box-shadow: 0 0 10px #111;\r\n}\r\n\r\n#btnSend {\r\n    margin-left: 10px;\r\n    height: 40px;\r\n    padding: 0 10px;\r\n    border-radius: 10px;\r\n    background-color: dodgerblue;\r\n    color: white;\r\n    font-size: 20px;\r\n    flex: none;\r\n}\r\n\r\n#messages::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n#messages::-webkit-scrollbar-thumb {\r\n    border-style: solid;\r\n    border-color: transparent;\r\n    border-radius: 5px;\r\n    background-color: silver;\r\n    background-clip: content-box;\r\n}\r\n\r\n#messages::-webkit-scrollbar-track {\r\n    margin: 10px;\r\n}\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "1095448296707782": {
          "title": "Add a string into the <strong>facts</strong> array.",
          "stepId": "4650280905116226",
          "testId": "1095448296707782",
          "orderNo": 1000,
          "testFunction": "// Expectation:\n// pass.if.js.editable(0).equivalent(`\"fact 1\",`);\nconst raw = code.js.editable[0];\ncode.js.editable[0] = `arr = [${raw}];`;\npass.if.js.editable(0).equivalent(`arr = [##STRING##,];`);",
          "failureMessage": ""
        }
      },
      "stepNo": 26
    },
    "544132177035836": {
      "title": "The second fact",
      "type": "code",
      "content": {
        "instructions": "<p>Let's put one more fact into the <strong>facts</strong> array.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/4abbff41-b31c-4ef1-a42b-4b64470a5f4b\">string</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','hide feedback')+7##</strong>, add a string into the <strong>facts</strong> array.</p>\n<p class=\"notes\"><strong>Tip</strong>: don't forget each item in an array should be followed by a comma.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "544132177035836",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 26000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\r\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\"> \r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div id='content'>\r\n        <p id='title'>Random Decision</p>\r\n\r\n        <div id='grid'>\r\n            <div id='car'></div>\r\n        </div>\r\n    </div>\r\n\r\n    <div id='chatbot'>\r\n        <div id='messages'></div>\r\n\r\n        <div id='inputContainer'>\r\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\r\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup;\noutput = insertLine(output, 'hide feedback', { line: '\\t\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#', offset: 6 });\nreturn output;",
          "mode": "modify",
          "answers": [
            "\"fact 2\","
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 6;\nvar nRow = 4;\nvar deadends = 0.3;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar autoMode = false;\nvar showFeedback = false;\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\telse if (command == 'tell me') {\n\t\t\tvar facts = [\n\t\t\t\t\"fact 1\",\n\t\t\t\t#BEGIN_EDITABLE#\"fact 2\",#END_EDITABLE#\n\t\t\t];\n\t\t}\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n      \telse if (command == 'where is home?') {\n          \tdisplayBotMessage('earth');\n        }\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n    var availableCells = [];\n    \n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        availableCells.push(currentCell.right);\n    }\n    if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        availableCells.push(currentCell.up);\n    }\n    if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        availableCells.push(currentCell.down);\n    }\n    if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        availableCells.push(currentCell.left);\n    }\n    \n    if (availableCells.length == 1) {\n        moveCarTo(availableCells[0]);\n    }\n    else if (availableCells.length > 1) {\n        var randomNumber = Math.random() * availableCells.length;\n        var randomIndex = Math.floor(randomNumber);\n        var randomCell = availableCells[randomIndex];\n        \n        moveCarTo(randomCell);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning right.');\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning left.');\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning around.');\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\tdisplayBotMessage('Straight ahead.');\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.startCell = randomItemFrom(gridCells)[0];\n\n    var prevRoadCell = car.startCell;\n    var newRoadCell;\n    var removeDeadEnd = roadCell => {\n        if (roadCell.roadType.length > 1) {\n            delete roadCell.deadend;\n        }\n    };\n    var expandFrom = targetCell => {\n        //  remove target cell from the available paths of the previous road cell\n        remove(targetCell).from(prevRoadCell.paths);\n        //  remove the previous road cell from the available paths of target cell\n        remove(prevRoadCell).from(targetCell.paths);\n\n        //  assign road type for previous and target cells\n        if (targetCell.up == prevRoadCell) {\n            prevRoadCell.roadType.push('down');\n            targetCell.roadType.push('up');\n        }\n        else if (targetCell.down == prevRoadCell) {\n            prevRoadCell.roadType.push('up');\n            targetCell.roadType.push('down');\n        }\n        else if (targetCell.left == prevRoadCell) {\n            prevRoadCell.roadType.push('right');\n            targetCell.roadType.push('left');\n        }\n        else {\n            prevRoadCell.roadType.push('left');\n            targetCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n        removeDeadEnd(prevRoadCell);\n\n        if (targetCell.className == 'road' || targetCell.deadend) {\n            targetCell.setRoadType(targetCell.roadType.sort().join(''));\n            removeDeadEnd(targetCell);\n        }\n\n        prevRoadCell = targetCell;\n    };\n\n    /*\n        plot a single path from start to finish\n    */\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        expandFrom(newRoadCell);\n        \n        newRoadCell.paths.forEach(neighbourCell => {\n            //  check whether target cell blocks off paths of neighbouring cells\n            if (neighbourCell.className == 'road') {\n                remove(newRoadCell).from(neighbourCell.paths);\n                remove(neighbourCell).from(newRoadCell.paths);\n            }\n        });\n    }\n    while (newRoadCell.endOfRow == false);\n\n    //  set road type on the last cell in a row\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n\n    /*\n        plot branches until entire map is filled\n    */\n\n    var branch = [];\n    var emptyCells = gridCells.flat().filter(cell => cell.className == '' && cell.right != 'unknown');\n\n    while (emptyCells.length > 0) {\n        //  check if a branch is already created\n        if (branch.length == 0) {\n            //  select a cell from the first path\n            var branchCell = randomItemFrom(gridCells.flat().filter(cell =>\n                cell.className == 'road' &&\n                cell.id != 'finish' &&\n                cell.right != 'unknown' &&\n                cell.right.right != 'unknown' &&\n                cell.right.id != 'finish' &&\n                cell.paths.filter(neighbourCell => neighbourCell.className == '').length > 0\n            ));\n            \n            prevRoadCell = branchCell;\n            newRoadCell = randomItemFrom(branchCell.paths.filter(cell => cell.className == ''));\n        }\n        else {\n            newRoadCell = randomItemFrom(branch[branch.length - 1].paths);\n            remove(prevRoadCell).from(emptyCells);\n\n            //  determine whether new road cell is a deadend\n            if (newRoadCell.className != 'road' && Math.random() > deadends) {\n                newRoadCell.deadend = true;\n                remove(newRoadCell).from(emptyCells);\n            }\n        }\n\n        //  remove paths that lead to the last column\n        if (newRoadCell.right.right == 'unknown') {\n            remove(newRoadCell.right).from(newRoadCell.paths);\n        }\n\n        expandFrom(newRoadCell);\n\n        if (newRoadCell.className == 'road' || newRoadCell.deadend) {\n            branch = [];\n        }\n        else {\n            branch.push(newRoadCell);\n        }\n    }\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = 'unknown';\n            cell.down = 'unknown';\n            cell.left = 'unknown';\n            cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n  "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\r\n@font-face {\r\n    font-family: \"FailedAttempt\";\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\r\n    /* IE9 Compat Modes */\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\r\n        /* IE6-IE8 */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\r\n        /* Open Type Font */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\r\n        /* Legacy iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\r\n        /* Safari, Android, iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\r\n        /* Modern Browsers */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\r\n    /* Modern Browsers */\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    font-family: 'FailedAttempt';\r\n    background-color: #333;\r\n}\r\n\r\nbutton,\r\ninput,\r\ntextarea {\r\n    outline: none;\r\n    border: none;\r\n    transition: box-shadow 0.2s ease-in-out;\r\n}\r\n\r\nbutton {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:active {\r\n    transform: scale(0.98);\r\n}\r\n\r\n#title {\r\n    padding-top: 10px;\r\n    margin-bottom: 10px;\r\n    color: white;\r\n}\r\n\r\n#content {\r\n    width: 90vw;\r\n    margin: auto;\r\n}\r\n\r\n#content,\r\n#grid {\r\n    position: relative;\r\n}\r\n\r\n/*\r\n    simulation area styles\r\n*/\r\n#grid {\r\n    border-radius: 5px;\r\n    background-color: mediumseagreen;\r\n    box-shadow: 0 0 15px #111;\r\n    overflow: hidden;\r\n}\r\n\r\n#grid>div {\r\n    position: absolute;\r\n}\r\n\r\n#car {\r\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\r\n    background-size: 60%;\r\n    background-position: 25% center;\r\n    background-repeat: no-repeat;\r\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\r\n    z-index: 1;\r\n}\r\n\r\n.road {\r\n    background-repeat: no-repeat;\r\n    background-origin: border-box;\r\n    background-size: 100%;\r\n    border: 1px dotted rgba(0, 0, 0, 0.3);\r\n    transform: scale(1.015);\r\n}\r\n\r\n#btnRun {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    padding: 10px 30px 10px 15px;\r\n    font-size: 50px;\r\n    border-radius: 20px;\r\n    font-family: 'FailedAttempt';\r\n    color: ghostwhite;\r\n    background-color: dodgerblue;\r\n    transform: translateX(-50%);\r\n    transform-origin: 0;\r\n}\r\n\r\n#btnRun:hover {\r\n    box-shadow: 0 0 20px #111;\r\n}\r\n\r\n#btnRun:active {\r\n    transform: scale(0.98) translate(-50%);\r\n}\r\n\r\n#btnRun>.fa {\r\n    transform: scale(0.6);\r\n}\r\n\r\n/*\r\n    chat-bot styles\r\n*/\r\n#chatbot {\r\n    position: fixed;\r\n    left: 50%;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 0 20px 20px;\r\n    max-width: 600px;\r\n    transform: translateX(-50%);\r\n}\r\n\r\n#inputContainer {\r\n    display: flex;\r\n}\r\n\r\n#messages,\r\n#userInput {\r\n    font-family: 'VT323';\r\n}\r\n\r\n#messages {\r\n    height: 120px;\r\n    border-radius: 10px;\r\n    margin: auto auto 10px;\r\n    padding-bottom: 8px;\r\n    font-size: 18px;\r\n    overflow-y: auto;\r\n    background-color: #222;\r\n    color: gainsboro;\r\n}\r\n\r\n.userMessage,\r\n.botMessage {\r\n    padding: 8px 15px 0;\r\n    border-radius: 15px;\r\n}\r\n\r\n.userMessage {\r\n    text-align: right;\r\n    color: ghostwhite;\r\n}\r\n\r\n.botMessage {\r\n    text-align: left;\r\n    color: lightblue;\r\n}\r\n\r\n#userInput {\r\n    height: 40px;\r\n    padding: 10px 20px;\r\n    border-radius: 23px;\r\n    font-size: 20px;\r\n    color: #333;\r\n    flex: auto;\r\n}\r\n\r\n#userInput:hover,\r\n#userInput:focus,\r\n#btnSend:hover {\r\n    box-shadow: 0 0 10px #111;\r\n}\r\n\r\n#btnSend {\r\n    margin-left: 10px;\r\n    height: 40px;\r\n    padding: 0 10px;\r\n    border-radius: 10px;\r\n    background-color: dodgerblue;\r\n    color: white;\r\n    font-size: 20px;\r\n    flex: none;\r\n}\r\n\r\n#messages::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n#messages::-webkit-scrollbar-thumb {\r\n    border-style: solid;\r\n    border-color: transparent;\r\n    border-radius: 5px;\r\n    background-color: silver;\r\n    background-clip: content-box;\r\n}\r\n\r\n#messages::-webkit-scrollbar-track {\r\n    margin: 10px;\r\n}\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "1308297728531206": {
          "title": "Add a string into the <strong>facts</strong> array.",
          "stepId": "544132177035836",
          "testId": "1308297728531206",
          "orderNo": 1000,
          "testFunction": "// Expectation:\n// pass.if.js.editable(0).equivalent(`\"fact 2\",`);\nconst raw = code.js.editable[0];\ncode.js.editable[0] = `arr = [${raw}];`;\npass.if.js.editable(0).equivalent(`arr = [##STRING##,];`);",
          "failureMessage": ""
        }
      },
      "stepNo": 27
    },
    "3498611946944444": {
      "title": "Generating a random number",
      "type": "code",
      "content": {
        "instructions": "<p>The <strong>facts</strong> array has 2 items, in order to access both items, we need the index numbers 0 and 1.</p>\n<p class=\"notes\"><strong>Tip</strong>: the index of the first item in an array is 0.</p>\n<p><strong>Math.random</strong> gives us a random number between 0 and 1 not including 1, we can multiply it by the length of the <strong>facts</strong> array ( which is 2 ), then we'll get a number that is between 0 and 2 not including 2.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52\">variable</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/f7003228-1b3e-4a96-8357-2f9ac0ee9a12\">Math.random</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/1aab90dc-ef73-46c8-8d4a-bbcbab21879a\">length</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','var facts')+4##</strong>, create a variable called <strong>randomNumber</strong> to store a random number between 0 and <code class=\"syntax\">facts.length</code>.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "3498611946944444",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 27000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\r\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\"> \r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div id='content'>\r\n        <p id='title'>Random Decision</p>\r\n\r\n        <div id='grid'>\r\n            <div id='car'></div>\r\n        </div>\r\n    </div>\r\n\r\n    <div id='chatbot'>\r\n        <div id='messages'></div>\r\n\r\n        <div id='inputContainer'>\r\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\r\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup;\noutput = insertLine(output, 'var facts', { line: '\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#', offset: 3 });\nreturn output;",
          "mode": "modify",
          "answers": [
            "var randomNumber = Math.random() * facts.length;"
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 6;\nvar nRow = 4;\nvar deadends = 0.3;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar autoMode = false;\nvar showFeedback = false;\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\telse if (command == 'tell me') {\n\t\t\tvar facts = [\n\t\t\t\t\"fact 1\",\n\t\t\t\t\"fact 2\",\n\t\t\t];\n\t\t\t#BEGIN_EDITABLE#var randomNumber = Math.random() * facts.length;#END_EDITABLE#\n\t\t}\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n      \telse if (command == 'where is home?') {\n          \tdisplayBotMessage('earth');\n        }\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n    var availableCells = [];\n    \n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        availableCells.push(currentCell.right);\n    }\n    if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        availableCells.push(currentCell.up);\n    }\n    if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        availableCells.push(currentCell.down);\n    }\n    if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        availableCells.push(currentCell.left);\n    }\n    \n    if (availableCells.length == 1) {\n        moveCarTo(availableCells[0]);\n    }\n    else if (availableCells.length > 1) {\n        var randomNumber = Math.random() * availableCells.length;\n        var randomIndex = Math.floor(randomNumber);\n        var randomCell = availableCells[randomIndex];\n        \n        moveCarTo(randomCell);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning right.');\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning left.');\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning around.');\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\tdisplayBotMessage('Straight ahead.');\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.startCell = randomItemFrom(gridCells)[0];\n\n    var prevRoadCell = car.startCell;\n    var newRoadCell;\n    var removeDeadEnd = roadCell => {\n        if (roadCell.roadType.length > 1) {\n            delete roadCell.deadend;\n        }\n    };\n    var expandFrom = targetCell => {\n        //  remove target cell from the available paths of the previous road cell\n        remove(targetCell).from(prevRoadCell.paths);\n        //  remove the previous road cell from the available paths of target cell\n        remove(prevRoadCell).from(targetCell.paths);\n\n        //  assign road type for previous and target cells\n        if (targetCell.up == prevRoadCell) {\n            prevRoadCell.roadType.push('down');\n            targetCell.roadType.push('up');\n        }\n        else if (targetCell.down == prevRoadCell) {\n            prevRoadCell.roadType.push('up');\n            targetCell.roadType.push('down');\n        }\n        else if (targetCell.left == prevRoadCell) {\n            prevRoadCell.roadType.push('right');\n            targetCell.roadType.push('left');\n        }\n        else {\n            prevRoadCell.roadType.push('left');\n            targetCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n        removeDeadEnd(prevRoadCell);\n\n        if (targetCell.className == 'road' || targetCell.deadend) {\n            targetCell.setRoadType(targetCell.roadType.sort().join(''));\n            removeDeadEnd(targetCell);\n        }\n\n        prevRoadCell = targetCell;\n    };\n\n    /*\n        plot a single path from start to finish\n    */\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        expandFrom(newRoadCell);\n        \n        newRoadCell.paths.forEach(neighbourCell => {\n            //  check whether target cell blocks off paths of neighbouring cells\n            if (neighbourCell.className == 'road') {\n                remove(newRoadCell).from(neighbourCell.paths);\n                remove(neighbourCell).from(newRoadCell.paths);\n            }\n        });\n    }\n    while (newRoadCell.endOfRow == false);\n\n    //  set road type on the last cell in a row\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n\n    /*\n        plot branches until entire map is filled\n    */\n\n    var branch = [];\n    var emptyCells = gridCells.flat().filter(cell => cell.className == '' && cell.right != 'unknown');\n\n    while (emptyCells.length > 0) {\n        //  check if a branch is already created\n        if (branch.length == 0) {\n            //  select a cell from the first path\n            var branchCell = randomItemFrom(gridCells.flat().filter(cell =>\n                cell.className == 'road' &&\n                cell.id != 'finish' &&\n                cell.right != 'unknown' &&\n                cell.right.right != 'unknown' &&\n                cell.right.id != 'finish' &&\n                cell.paths.filter(neighbourCell => neighbourCell.className == '').length > 0\n            ));\n            \n            prevRoadCell = branchCell;\n            newRoadCell = randomItemFrom(branchCell.paths.filter(cell => cell.className == ''));\n        }\n        else {\n            newRoadCell = randomItemFrom(branch[branch.length - 1].paths);\n            remove(prevRoadCell).from(emptyCells);\n\n            //  determine whether new road cell is a deadend\n            if (newRoadCell.className != 'road' && Math.random() > deadends) {\n                newRoadCell.deadend = true;\n                remove(newRoadCell).from(emptyCells);\n            }\n        }\n\n        //  remove paths that lead to the last column\n        if (newRoadCell.right.right == 'unknown') {\n            remove(newRoadCell.right).from(newRoadCell.paths);\n        }\n\n        expandFrom(newRoadCell);\n\n        if (newRoadCell.className == 'road' || newRoadCell.deadend) {\n            branch = [];\n        }\n        else {\n            branch.push(newRoadCell);\n        }\n    }\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = 'unknown';\n            cell.down = 'unknown';\n            cell.left = 'unknown';\n            cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n   "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\r\n@font-face {\r\n    font-family: \"FailedAttempt\";\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\r\n    /* IE9 Compat Modes */\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\r\n        /* IE6-IE8 */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\r\n        /* Open Type Font */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\r\n        /* Legacy iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\r\n        /* Safari, Android, iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\r\n        /* Modern Browsers */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\r\n    /* Modern Browsers */\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    font-family: 'FailedAttempt';\r\n    background-color: #333;\r\n}\r\n\r\nbutton,\r\ninput,\r\ntextarea {\r\n    outline: none;\r\n    border: none;\r\n    transition: box-shadow 0.2s ease-in-out;\r\n}\r\n\r\nbutton {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:active {\r\n    transform: scale(0.98);\r\n}\r\n\r\n#title {\r\n    padding-top: 10px;\r\n    margin-bottom: 10px;\r\n    color: white;\r\n}\r\n\r\n#content {\r\n    width: 90vw;\r\n    margin: auto;\r\n}\r\n\r\n#content,\r\n#grid {\r\n    position: relative;\r\n}\r\n\r\n/*\r\n    simulation area styles\r\n*/\r\n#grid {\r\n    border-radius: 5px;\r\n    background-color: mediumseagreen;\r\n    box-shadow: 0 0 15px #111;\r\n    overflow: hidden;\r\n}\r\n\r\n#grid>div {\r\n    position: absolute;\r\n}\r\n\r\n#car {\r\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\r\n    background-size: 60%;\r\n    background-position: 25% center;\r\n    background-repeat: no-repeat;\r\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\r\n    z-index: 1;\r\n}\r\n\r\n.road {\r\n    background-repeat: no-repeat;\r\n    background-origin: border-box;\r\n    background-size: 100%;\r\n    border: 1px dotted rgba(0, 0, 0, 0.3);\r\n    transform: scale(1.015);\r\n}\r\n\r\n#btnRun {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    padding: 10px 30px 10px 15px;\r\n    font-size: 50px;\r\n    border-radius: 20px;\r\n    font-family: 'FailedAttempt';\r\n    color: ghostwhite;\r\n    background-color: dodgerblue;\r\n    transform: translateX(-50%);\r\n    transform-origin: 0;\r\n}\r\n\r\n#btnRun:hover {\r\n    box-shadow: 0 0 20px #111;\r\n}\r\n\r\n#btnRun:active {\r\n    transform: scale(0.98) translate(-50%);\r\n}\r\n\r\n#btnRun>.fa {\r\n    transform: scale(0.6);\r\n}\r\n\r\n/*\r\n    chat-bot styles\r\n*/\r\n#chatbot {\r\n    position: fixed;\r\n    left: 50%;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 0 20px 20px;\r\n    max-width: 600px;\r\n    transform: translateX(-50%);\r\n}\r\n\r\n#inputContainer {\r\n    display: flex;\r\n}\r\n\r\n#messages,\r\n#userInput {\r\n    font-family: 'VT323';\r\n}\r\n\r\n#messages {\r\n    height: 120px;\r\n    border-radius: 10px;\r\n    margin: auto auto 10px;\r\n    padding-bottom: 8px;\r\n    font-size: 18px;\r\n    overflow-y: auto;\r\n    background-color: #222;\r\n    color: gainsboro;\r\n}\r\n\r\n.userMessage,\r\n.botMessage {\r\n    padding: 8px 15px 0;\r\n    border-radius: 15px;\r\n}\r\n\r\n.userMessage {\r\n    text-align: right;\r\n    color: ghostwhite;\r\n}\r\n\r\n.botMessage {\r\n    text-align: left;\r\n    color: lightblue;\r\n}\r\n\r\n#userInput {\r\n    height: 40px;\r\n    padding: 10px 20px;\r\n    border-radius: 23px;\r\n    font-size: 20px;\r\n    color: #333;\r\n    flex: auto;\r\n}\r\n\r\n#userInput:hover,\r\n#userInput:focus,\r\n#btnSend:hover {\r\n    box-shadow: 0 0 10px #111;\r\n}\r\n\r\n#btnSend {\r\n    margin-left: 10px;\r\n    height: 40px;\r\n    padding: 0 10px;\r\n    border-radius: 10px;\r\n    background-color: dodgerblue;\r\n    color: white;\r\n    font-size: 20px;\r\n    flex: none;\r\n}\r\n\r\n#messages::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n#messages::-webkit-scrollbar-thumb {\r\n    border-style: solid;\r\n    border-color: transparent;\r\n    border-radius: 5px;\r\n    background-color: silver;\r\n    background-clip: content-box;\r\n}\r\n\r\n#messages::-webkit-scrollbar-track {\r\n    margin: 10px;\r\n}\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "7808872893677243": {
          "title": "Create a variable called <strong>randomNumber</strong> to store a random number between 0 and <code class=\"syntax\">facts.length</code>.",
          "stepId": "3498611946944444",
          "testId": "7808872893677243",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var randomNumber = Math.random() * facts.length;`);",
          "failureMessage": ""
        }
      },
      "stepNo": 28
    },
    "203055028436202": {
      "title": "Random index",
      "type": "code",
      "content": {
        "instructions": "<p>We now have a random number between 0 and 2, but this is 1) not an integer and 2) bigger than 1, so we can't use it as the index for the <strong>facts</strong> array.</p>\n<p>Not before we round it down into an integer, after we do that it'll meet both requirements as an index for the <strong>facts</strong> array.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52\">variable</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/f497a433-d9f0-4e08-b825-8a39cc30560b\">Math.floor</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','hide feedback')+10##</strong>, create a variable called <strong>randomIndex</strong> to store the value rounded down from <strong>randomNumber</strong>.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "203055028436202",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 28000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\r\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\"> \r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div id='content'>\r\n        <p id='title'>Random Decision</p>\r\n\r\n        <div id='grid'>\r\n            <div id='car'></div>\r\n        </div>\r\n    </div>\r\n\r\n    <div id='chatbot'>\r\n        <div id='messages'></div>\r\n\r\n        <div id='inputContainer'>\r\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\r\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup;\noutput = insertLine(output, 'var facts', { line: '\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#', offset: 4 });\nreturn output;",
          "mode": "modify",
          "answers": [
            "var randomIndex = Math.floor(randomNumber);"
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 6;\nvar nRow = 4;\nvar deadends = 0.3;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar autoMode = false;\nvar showFeedback = false;\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\telse if (command == 'tell me') {\n\t\t\tvar facts = [\n\t\t\t\t\"fact 1\",\n\t\t\t\t\"fact 2\",\n\t\t\t];\n\t\t\tvar randomNumber = Math.random() * facts.length;\n\t\t\t#BEGIN_EDITABLE#var randomIndex = Math.floor(randomNumber);#END_EDITABLE#\n\t\t}\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n      \telse if (command == 'where is home?') {\n          \tdisplayBotMessage('earth');\n        }\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n    var availableCells = [];\n    \n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        availableCells.push(currentCell.right);\n    }\n    if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        availableCells.push(currentCell.up);\n    }\n    if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        availableCells.push(currentCell.down);\n    }\n    if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        availableCells.push(currentCell.left);\n    }\n    \n    if (availableCells.length == 1) {\n        moveCarTo(availableCells[0]);\n    }\n    else if (availableCells.length > 1) {\n        var randomNumber = Math.random() * availableCells.length;\n        var randomIndex = Math.floor(randomNumber);\n        var randomCell = availableCells[randomIndex];\n        \n        moveCarTo(randomCell);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning right.');\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning left.');\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning around.');\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\tdisplayBotMessage('Straight ahead.');\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.startCell = randomItemFrom(gridCells)[0];\n\n    var prevRoadCell = car.startCell;\n    var newRoadCell;\n    var removeDeadEnd = roadCell => {\n        if (roadCell.roadType.length > 1) {\n            delete roadCell.deadend;\n        }\n    };\n    var expandFrom = targetCell => {\n        //  remove target cell from the available paths of the previous road cell\n        remove(targetCell).from(prevRoadCell.paths);\n        //  remove the previous road cell from the available paths of target cell\n        remove(prevRoadCell).from(targetCell.paths);\n\n        //  assign road type for previous and target cells\n        if (targetCell.up == prevRoadCell) {\n            prevRoadCell.roadType.push('down');\n            targetCell.roadType.push('up');\n        }\n        else if (targetCell.down == prevRoadCell) {\n            prevRoadCell.roadType.push('up');\n            targetCell.roadType.push('down');\n        }\n        else if (targetCell.left == prevRoadCell) {\n            prevRoadCell.roadType.push('right');\n            targetCell.roadType.push('left');\n        }\n        else {\n            prevRoadCell.roadType.push('left');\n            targetCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n        removeDeadEnd(prevRoadCell);\n\n        if (targetCell.className == 'road' || targetCell.deadend) {\n            targetCell.setRoadType(targetCell.roadType.sort().join(''));\n            removeDeadEnd(targetCell);\n        }\n\n        prevRoadCell = targetCell;\n    };\n\n    /*\n        plot a single path from start to finish\n    */\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        expandFrom(newRoadCell);\n        \n        newRoadCell.paths.forEach(neighbourCell => {\n            //  check whether target cell blocks off paths of neighbouring cells\n            if (neighbourCell.className == 'road') {\n                remove(newRoadCell).from(neighbourCell.paths);\n                remove(neighbourCell).from(newRoadCell.paths);\n            }\n        });\n    }\n    while (newRoadCell.endOfRow == false);\n\n    //  set road type on the last cell in a row\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n\n    /*\n        plot branches until entire map is filled\n    */\n\n    var branch = [];\n    var emptyCells = gridCells.flat().filter(cell => cell.className == '' && cell.right != 'unknown');\n\n    while (emptyCells.length > 0) {\n        //  check if a branch is already created\n        if (branch.length == 0) {\n            //  select a cell from the first path\n            var branchCell = randomItemFrom(gridCells.flat().filter(cell =>\n                cell.className == 'road' &&\n                cell.id != 'finish' &&\n                cell.right != 'unknown' &&\n                cell.right.right != 'unknown' &&\n                cell.right.id != 'finish' &&\n                cell.paths.filter(neighbourCell => neighbourCell.className == '').length > 0\n            ));\n            \n            prevRoadCell = branchCell;\n            newRoadCell = randomItemFrom(branchCell.paths.filter(cell => cell.className == ''));\n        }\n        else {\n            newRoadCell = randomItemFrom(branch[branch.length - 1].paths);\n            remove(prevRoadCell).from(emptyCells);\n\n            //  determine whether new road cell is a deadend\n            if (newRoadCell.className != 'road' && Math.random() > deadends) {\n                newRoadCell.deadend = true;\n                remove(newRoadCell).from(emptyCells);\n            }\n        }\n\n        //  remove paths that lead to the last column\n        if (newRoadCell.right.right == 'unknown') {\n            remove(newRoadCell.right).from(newRoadCell.paths);\n        }\n\n        expandFrom(newRoadCell);\n\n        if (newRoadCell.className == 'road' || newRoadCell.deadend) {\n            branch = [];\n        }\n        else {\n            branch.push(newRoadCell);\n        }\n    }\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = 'unknown';\n            cell.down = 'unknown';\n            cell.left = 'unknown';\n            cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n    "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\r\n@font-face {\r\n    font-family: \"FailedAttempt\";\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\r\n    /* IE9 Compat Modes */\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\r\n        /* IE6-IE8 */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\r\n        /* Open Type Font */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\r\n        /* Legacy iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\r\n        /* Safari, Android, iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\r\n        /* Modern Browsers */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\r\n    /* Modern Browsers */\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    font-family: 'FailedAttempt';\r\n    background-color: #333;\r\n}\r\n\r\nbutton,\r\ninput,\r\ntextarea {\r\n    outline: none;\r\n    border: none;\r\n    transition: box-shadow 0.2s ease-in-out;\r\n}\r\n\r\nbutton {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:active {\r\n    transform: scale(0.98);\r\n}\r\n\r\n#title {\r\n    padding-top: 10px;\r\n    margin-bottom: 10px;\r\n    color: white;\r\n}\r\n\r\n#content {\r\n    width: 90vw;\r\n    margin: auto;\r\n}\r\n\r\n#content,\r\n#grid {\r\n    position: relative;\r\n}\r\n\r\n/*\r\n    simulation area styles\r\n*/\r\n#grid {\r\n    border-radius: 5px;\r\n    background-color: mediumseagreen;\r\n    box-shadow: 0 0 15px #111;\r\n    overflow: hidden;\r\n}\r\n\r\n#grid>div {\r\n    position: absolute;\r\n}\r\n\r\n#car {\r\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\r\n    background-size: 60%;\r\n    background-position: 25% center;\r\n    background-repeat: no-repeat;\r\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\r\n    z-index: 1;\r\n}\r\n\r\n.road {\r\n    background-repeat: no-repeat;\r\n    background-origin: border-box;\r\n    background-size: 100%;\r\n    border: 1px dotted rgba(0, 0, 0, 0.3);\r\n    transform: scale(1.015);\r\n}\r\n\r\n#btnRun {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    padding: 10px 30px 10px 15px;\r\n    font-size: 50px;\r\n    border-radius: 20px;\r\n    font-family: 'FailedAttempt';\r\n    color: ghostwhite;\r\n    background-color: dodgerblue;\r\n    transform: translateX(-50%);\r\n    transform-origin: 0;\r\n}\r\n\r\n#btnRun:hover {\r\n    box-shadow: 0 0 20px #111;\r\n}\r\n\r\n#btnRun:active {\r\n    transform: scale(0.98) translate(-50%);\r\n}\r\n\r\n#btnRun>.fa {\r\n    transform: scale(0.6);\r\n}\r\n\r\n/*\r\n    chat-bot styles\r\n*/\r\n#chatbot {\r\n    position: fixed;\r\n    left: 50%;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 0 20px 20px;\r\n    max-width: 600px;\r\n    transform: translateX(-50%);\r\n}\r\n\r\n#inputContainer {\r\n    display: flex;\r\n}\r\n\r\n#messages,\r\n#userInput {\r\n    font-family: 'VT323';\r\n}\r\n\r\n#messages {\r\n    height: 120px;\r\n    border-radius: 10px;\r\n    margin: auto auto 10px;\r\n    padding-bottom: 8px;\r\n    font-size: 18px;\r\n    overflow-y: auto;\r\n    background-color: #222;\r\n    color: gainsboro;\r\n}\r\n\r\n.userMessage,\r\n.botMessage {\r\n    padding: 8px 15px 0;\r\n    border-radius: 15px;\r\n}\r\n\r\n.userMessage {\r\n    text-align: right;\r\n    color: ghostwhite;\r\n}\r\n\r\n.botMessage {\r\n    text-align: left;\r\n    color: lightblue;\r\n}\r\n\r\n#userInput {\r\n    height: 40px;\r\n    padding: 10px 20px;\r\n    border-radius: 23px;\r\n    font-size: 20px;\r\n    color: #333;\r\n    flex: auto;\r\n}\r\n\r\n#userInput:hover,\r\n#userInput:focus,\r\n#btnSend:hover {\r\n    box-shadow: 0 0 10px #111;\r\n}\r\n\r\n#btnSend {\r\n    margin-left: 10px;\r\n    height: 40px;\r\n    padding: 0 10px;\r\n    border-radius: 10px;\r\n    background-color: dodgerblue;\r\n    color: white;\r\n    font-size: 20px;\r\n    flex: none;\r\n}\r\n\r\n#messages::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n#messages::-webkit-scrollbar-thumb {\r\n    border-style: solid;\r\n    border-color: transparent;\r\n    border-radius: 5px;\r\n    background-color: silver;\r\n    background-clip: content-box;\r\n}\r\n\r\n#messages::-webkit-scrollbar-track {\r\n    margin: 10px;\r\n}\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "6501748743052454": {
          "title": "Create a variable called <strong>randomIndex</strong> to store the value rounded down from <strong>randomNumber</strong>.",
          "stepId": "203055028436202",
          "testId": "6501748743052454",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var randomIndex = Math.floor(randomNumber);`);",
          "failureMessage": ""
        }
      },
      "stepNo": 29
    },
    "3284043530924598": {
      "title": "Random fact",
      "type": "code",
      "content": {
        "instructions": "<p>We can now use <strong>randomIndex</strong> as the index number to select an item from the <strong>facts</strong> array, and because <strong>randomIndex</strong> is randomly generated, we don't know which item will be selected, until we display it in the chat-bot that is.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/ba0d9cd6-b0c1-4087-8760-a9f09b0d8d52\">variable</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/f6b7d0fc-700b-4202-861a-b5900a6fd922\">array</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','hide feedback')+11##</strong>, select an item from the <strong>facts</strong> array using <strong>randomIndex</strong> and store it in a new variable called <strong>randomFact</strong>.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "3284043530924598",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 29000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\r\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\"> \r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div id='content'>\r\n        <p id='title'>Random Decision</p>\r\n\r\n        <div id='grid'>\r\n            <div id='car'></div>\r\n        </div>\r\n    </div>\r\n\r\n    <div id='chatbot'>\r\n        <div id='messages'></div>\r\n\r\n        <div id='inputContainer'>\r\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\r\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup;\noutput = insertLine(output, 'var facts', { line: '\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#', offset: 5 });\nreturn output;",
          "mode": "modify",
          "answers": [
            "var randomFact = facts[randomIndex];"
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 6;\nvar nRow = 4;\nvar deadends = 0.3;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar autoMode = false;\nvar showFeedback = false;\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\telse if (command == 'tell me') {\n\t\t\tvar facts = [\n\t\t\t\t\"fact 1\",\n\t\t\t\t\"fact 2\",\n\t\t\t];\n\t\t\tvar randomNumber = Math.random() * facts.length;\n\t\t\tvar randomIndex = Math.floor(randomNumber);\n\t\t\t#BEGIN_EDITABLE#var randomFact = facts[randomIndex];#END_EDITABLE#\n\t\t}\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n      \telse if (command == 'where is home?') {\n          \tdisplayBotMessage('earth');\n        }\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n    var availableCells = [];\n    \n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        availableCells.push(currentCell.right);\n    }\n    if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        availableCells.push(currentCell.up);\n    }\n    if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        availableCells.push(currentCell.down);\n    }\n    if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        availableCells.push(currentCell.left);\n    }\n    \n    if (availableCells.length == 1) {\n        moveCarTo(availableCells[0]);\n    }\n    else if (availableCells.length > 1) {\n        var randomNumber = Math.random() * availableCells.length;\n        var randomIndex = Math.floor(randomNumber);\n        var randomCell = availableCells[randomIndex];\n        \n        moveCarTo(randomCell);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning right.');\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning left.');\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning around.');\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\tdisplayBotMessage('Straight ahead.');\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.startCell = randomItemFrom(gridCells)[0];\n\n    var prevRoadCell = car.startCell;\n    var newRoadCell;\n    var removeDeadEnd = roadCell => {\n        if (roadCell.roadType.length > 1) {\n            delete roadCell.deadend;\n        }\n    };\n    var expandFrom = targetCell => {\n        //  remove target cell from the available paths of the previous road cell\n        remove(targetCell).from(prevRoadCell.paths);\n        //  remove the previous road cell from the available paths of target cell\n        remove(prevRoadCell).from(targetCell.paths);\n\n        //  assign road type for previous and target cells\n        if (targetCell.up == prevRoadCell) {\n            prevRoadCell.roadType.push('down');\n            targetCell.roadType.push('up');\n        }\n        else if (targetCell.down == prevRoadCell) {\n            prevRoadCell.roadType.push('up');\n            targetCell.roadType.push('down');\n        }\n        else if (targetCell.left == prevRoadCell) {\n            prevRoadCell.roadType.push('right');\n            targetCell.roadType.push('left');\n        }\n        else {\n            prevRoadCell.roadType.push('left');\n            targetCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n        removeDeadEnd(prevRoadCell);\n\n        if (targetCell.className == 'road' || targetCell.deadend) {\n            targetCell.setRoadType(targetCell.roadType.sort().join(''));\n            removeDeadEnd(targetCell);\n        }\n\n        prevRoadCell = targetCell;\n    };\n\n    /*\n        plot a single path from start to finish\n    */\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        expandFrom(newRoadCell);\n        \n        newRoadCell.paths.forEach(neighbourCell => {\n            //  check whether target cell blocks off paths of neighbouring cells\n            if (neighbourCell.className == 'road') {\n                remove(newRoadCell).from(neighbourCell.paths);\n                remove(neighbourCell).from(newRoadCell.paths);\n            }\n        });\n    }\n    while (newRoadCell.endOfRow == false);\n\n    //  set road type on the last cell in a row\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n\n    /*\n        plot branches until entire map is filled\n    */\n\n    var branch = [];\n    var emptyCells = gridCells.flat().filter(cell => cell.className == '' && cell.right != 'unknown');\n\n    while (emptyCells.length > 0) {\n        //  check if a branch is already created\n        if (branch.length == 0) {\n            //  select a cell from the first path\n            var branchCell = randomItemFrom(gridCells.flat().filter(cell =>\n                cell.className == 'road' &&\n                cell.id != 'finish' &&\n                cell.right != 'unknown' &&\n                cell.right.right != 'unknown' &&\n                cell.right.id != 'finish' &&\n                cell.paths.filter(neighbourCell => neighbourCell.className == '').length > 0\n            ));\n            \n            prevRoadCell = branchCell;\n            newRoadCell = randomItemFrom(branchCell.paths.filter(cell => cell.className == ''));\n        }\n        else {\n            newRoadCell = randomItemFrom(branch[branch.length - 1].paths);\n            remove(prevRoadCell).from(emptyCells);\n\n            //  determine whether new road cell is a deadend\n            if (newRoadCell.className != 'road' && Math.random() > deadends) {\n                newRoadCell.deadend = true;\n                remove(newRoadCell).from(emptyCells);\n            }\n        }\n\n        //  remove paths that lead to the last column\n        if (newRoadCell.right.right == 'unknown') {\n            remove(newRoadCell.right).from(newRoadCell.paths);\n        }\n\n        expandFrom(newRoadCell);\n\n        if (newRoadCell.className == 'road' || newRoadCell.deadend) {\n            branch = [];\n        }\n        else {\n            branch.push(newRoadCell);\n        }\n    }\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = 'unknown';\n            cell.down = 'unknown';\n            cell.left = 'unknown';\n            cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n     "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\r\n@font-face {\r\n    font-family: \"FailedAttempt\";\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\r\n    /* IE9 Compat Modes */\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\r\n        /* IE6-IE8 */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\r\n        /* Open Type Font */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\r\n        /* Legacy iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\r\n        /* Safari, Android, iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\r\n        /* Modern Browsers */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\r\n    /* Modern Browsers */\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    font-family: 'FailedAttempt';\r\n    background-color: #333;\r\n}\r\n\r\nbutton,\r\ninput,\r\ntextarea {\r\n    outline: none;\r\n    border: none;\r\n    transition: box-shadow 0.2s ease-in-out;\r\n}\r\n\r\nbutton {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:active {\r\n    transform: scale(0.98);\r\n}\r\n\r\n#title {\r\n    padding-top: 10px;\r\n    margin-bottom: 10px;\r\n    color: white;\r\n}\r\n\r\n#content {\r\n    width: 90vw;\r\n    margin: auto;\r\n}\r\n\r\n#content,\r\n#grid {\r\n    position: relative;\r\n}\r\n\r\n/*\r\n    simulation area styles\r\n*/\r\n#grid {\r\n    border-radius: 5px;\r\n    background-color: mediumseagreen;\r\n    box-shadow: 0 0 15px #111;\r\n    overflow: hidden;\r\n}\r\n\r\n#grid>div {\r\n    position: absolute;\r\n}\r\n\r\n#car {\r\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\r\n    background-size: 60%;\r\n    background-position: 25% center;\r\n    background-repeat: no-repeat;\r\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\r\n    z-index: 1;\r\n}\r\n\r\n.road {\r\n    background-repeat: no-repeat;\r\n    background-origin: border-box;\r\n    background-size: 100%;\r\n    border: 1px dotted rgba(0, 0, 0, 0.3);\r\n    transform: scale(1.015);\r\n}\r\n\r\n#btnRun {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    padding: 10px 30px 10px 15px;\r\n    font-size: 50px;\r\n    border-radius: 20px;\r\n    font-family: 'FailedAttempt';\r\n    color: ghostwhite;\r\n    background-color: dodgerblue;\r\n    transform: translateX(-50%);\r\n    transform-origin: 0;\r\n}\r\n\r\n#btnRun:hover {\r\n    box-shadow: 0 0 20px #111;\r\n}\r\n\r\n#btnRun:active {\r\n    transform: scale(0.98) translate(-50%);\r\n}\r\n\r\n#btnRun>.fa {\r\n    transform: scale(0.6);\r\n}\r\n\r\n/*\r\n    chat-bot styles\r\n*/\r\n#chatbot {\r\n    position: fixed;\r\n    left: 50%;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 0 20px 20px;\r\n    max-width: 600px;\r\n    transform: translateX(-50%);\r\n}\r\n\r\n#inputContainer {\r\n    display: flex;\r\n}\r\n\r\n#messages,\r\n#userInput {\r\n    font-family: 'VT323';\r\n}\r\n\r\n#messages {\r\n    height: 120px;\r\n    border-radius: 10px;\r\n    margin: auto auto 10px;\r\n    padding-bottom: 8px;\r\n    font-size: 18px;\r\n    overflow-y: auto;\r\n    background-color: #222;\r\n    color: gainsboro;\r\n}\r\n\r\n.userMessage,\r\n.botMessage {\r\n    padding: 8px 15px 0;\r\n    border-radius: 15px;\r\n}\r\n\r\n.userMessage {\r\n    text-align: right;\r\n    color: ghostwhite;\r\n}\r\n\r\n.botMessage {\r\n    text-align: left;\r\n    color: lightblue;\r\n}\r\n\r\n#userInput {\r\n    height: 40px;\r\n    padding: 10px 20px;\r\n    border-radius: 23px;\r\n    font-size: 20px;\r\n    color: #333;\r\n    flex: auto;\r\n}\r\n\r\n#userInput:hover,\r\n#userInput:focus,\r\n#btnSend:hover {\r\n    box-shadow: 0 0 10px #111;\r\n}\r\n\r\n#btnSend {\r\n    margin-left: 10px;\r\n    height: 40px;\r\n    padding: 0 10px;\r\n    border-radius: 10px;\r\n    background-color: dodgerblue;\r\n    color: white;\r\n    font-size: 20px;\r\n    flex: none;\r\n}\r\n\r\n#messages::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n#messages::-webkit-scrollbar-thumb {\r\n    border-style: solid;\r\n    border-color: transparent;\r\n    border-radius: 5px;\r\n    background-color: silver;\r\n    background-clip: content-box;\r\n}\r\n\r\n#messages::-webkit-scrollbar-track {\r\n    margin: 10px;\r\n}\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "7759022942238569": {
          "title": "Select an item from the <strong>facts</strong> array using <strong>randomIndex</strong> and store it in a new variable called <strong>randomFact</strong>.",
          "stepId": "3284043530924598",
          "testId": "7759022942238569",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`var randomFact = facts[randomIndex];`);",
          "failureMessage": ""
        }
      },
      "stepNo": 30
    },
    "814579835572496": {
      "title": "Displaying the random fact",
      "type": "code",
      "content": {
        "instructions": "<p>With the randomly generated fact stored in the <strong>randomFact</strong> variable, we can use the <strong>displayBotMessage</strong> function to find out what it is.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/c7d23919-b71c-429d-b41c-d9fd7f73ddc5\">function arguments</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','hide feedback')+13##</strong>, make the chat-bot display what's stored in the <strong>randomFact</strong> variable.</p>\n<hr />\n<p class=\"highlight\">Click on <strong>Check all objectives</strong> to continue</p>",
        "startTab": "script.js"
      },
      "deleted": false,
      "stepId": "814579835572496",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 30000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\r\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\"> \r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div id='content'>\r\n        <p id='title'>Random Decision</p>\r\n\r\n        <div id='grid'>\r\n            <div id='car'></div>\r\n        </div>\r\n    </div>\r\n\r\n    <div id='chatbot'>\r\n        <div id='messages'></div>\r\n\r\n        <div id='inputContainer'>\r\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\r\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup;\noutput = insertLine(output, 'var facts', { line: '\\n\\t\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#', offset: 6 });\nreturn output;",
          "mode": "modify",
          "answers": [
            "displayBotMessage(randomFact);"
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 6;\nvar nRow = 4;\nvar deadends = 0.3;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar autoMode = false;\nvar showFeedback = false;\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\telse if (command == 'tell me') {\n\t\t\tvar facts = [\n\t\t\t\t\"fact 1\",\n\t\t\t\t\"fact 2\",\n\t\t\t];\n\t\t\tvar randomNumber = Math.random() * facts.length;\n\t\t\tvar randomIndex = Math.floor(randomNumber);\n\t\t\tvar randomFact = facts[randomIndex];\n\n\t\t\t#BEGIN_EDITABLE#displayBotMessage(randomFact);#END_EDITABLE#\n\t\t}\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n      \telse if (command == 'where is home?') {\n          \tdisplayBotMessage('earth');\n        }\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n    var availableCells = [];\n    \n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        availableCells.push(currentCell.right);\n    }\n    if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        availableCells.push(currentCell.up);\n    }\n    if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        availableCells.push(currentCell.down);\n    }\n    if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        availableCells.push(currentCell.left);\n    }\n    \n    if (availableCells.length == 1) {\n        moveCarTo(availableCells[0]);\n    }\n    else if (availableCells.length > 1) {\n        var randomNumber = Math.random() * availableCells.length;\n        var randomIndex = Math.floor(randomNumber);\n        var randomCell = availableCells[randomIndex];\n        \n        moveCarTo(randomCell);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning right.');\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning left.');\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning around.');\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\tdisplayBotMessage('Straight ahead.');\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.startCell = randomItemFrom(gridCells)[0];\n\n    var prevRoadCell = car.startCell;\n    var newRoadCell;\n    var removeDeadEnd = roadCell => {\n        if (roadCell.roadType.length > 1) {\n            delete roadCell.deadend;\n        }\n    };\n    var expandFrom = targetCell => {\n        //  remove target cell from the available paths of the previous road cell\n        remove(targetCell).from(prevRoadCell.paths);\n        //  remove the previous road cell from the available paths of target cell\n        remove(prevRoadCell).from(targetCell.paths);\n\n        //  assign road type for previous and target cells\n        if (targetCell.up == prevRoadCell) {\n            prevRoadCell.roadType.push('down');\n            targetCell.roadType.push('up');\n        }\n        else if (targetCell.down == prevRoadCell) {\n            prevRoadCell.roadType.push('up');\n            targetCell.roadType.push('down');\n        }\n        else if (targetCell.left == prevRoadCell) {\n            prevRoadCell.roadType.push('right');\n            targetCell.roadType.push('left');\n        }\n        else {\n            prevRoadCell.roadType.push('left');\n            targetCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n        removeDeadEnd(prevRoadCell);\n\n        if (targetCell.className == 'road' || targetCell.deadend) {\n            targetCell.setRoadType(targetCell.roadType.sort().join(''));\n            removeDeadEnd(targetCell);\n        }\n\n        prevRoadCell = targetCell;\n    };\n\n    /*\n        plot a single path from start to finish\n    */\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        expandFrom(newRoadCell);\n        \n        newRoadCell.paths.forEach(neighbourCell => {\n            //  check whether target cell blocks off paths of neighbouring cells\n            if (neighbourCell.className == 'road') {\n                remove(newRoadCell).from(neighbourCell.paths);\n                remove(neighbourCell).from(newRoadCell.paths);\n            }\n        });\n    }\n    while (newRoadCell.endOfRow == false);\n\n    //  set road type on the last cell in a row\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n\n    /*\n        plot branches until entire map is filled\n    */\n\n    var branch = [];\n    var emptyCells = gridCells.flat().filter(cell => cell.className == '' && cell.right != 'unknown');\n\n    while (emptyCells.length > 0) {\n        //  check if a branch is already created\n        if (branch.length == 0) {\n            //  select a cell from the first path\n            var branchCell = randomItemFrom(gridCells.flat().filter(cell =>\n                cell.className == 'road' &&\n                cell.id != 'finish' &&\n                cell.right != 'unknown' &&\n                cell.right.right != 'unknown' &&\n                cell.right.id != 'finish' &&\n                cell.paths.filter(neighbourCell => neighbourCell.className == '').length > 0\n            ));\n            \n            prevRoadCell = branchCell;\n            newRoadCell = randomItemFrom(branchCell.paths.filter(cell => cell.className == ''));\n        }\n        else {\n            newRoadCell = randomItemFrom(branch[branch.length - 1].paths);\n            remove(prevRoadCell).from(emptyCells);\n\n            //  determine whether new road cell is a deadend\n            if (newRoadCell.className != 'road' && Math.random() > deadends) {\n                newRoadCell.deadend = true;\n                remove(newRoadCell).from(emptyCells);\n            }\n        }\n\n        //  remove paths that lead to the last column\n        if (newRoadCell.right.right == 'unknown') {\n            remove(newRoadCell.right).from(newRoadCell.paths);\n        }\n\n        expandFrom(newRoadCell);\n\n        if (newRoadCell.className == 'road' || newRoadCell.deadend) {\n            branch = [];\n        }\n        else {\n            branch.push(newRoadCell);\n        }\n    }\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = 'unknown';\n            cell.down = 'unknown';\n            cell.left = 'unknown';\n            cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n      "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\r\n@font-face {\r\n    font-family: \"FailedAttempt\";\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\r\n    /* IE9 Compat Modes */\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\r\n        /* IE6-IE8 */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\r\n        /* Open Type Font */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\r\n        /* Legacy iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\r\n        /* Safari, Android, iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\r\n        /* Modern Browsers */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\r\n    /* Modern Browsers */\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    font-family: 'FailedAttempt';\r\n    background-color: #333;\r\n}\r\n\r\nbutton,\r\ninput,\r\ntextarea {\r\n    outline: none;\r\n    border: none;\r\n    transition: box-shadow 0.2s ease-in-out;\r\n}\r\n\r\nbutton {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:active {\r\n    transform: scale(0.98);\r\n}\r\n\r\n#title {\r\n    padding-top: 10px;\r\n    margin-bottom: 10px;\r\n    color: white;\r\n}\r\n\r\n#content {\r\n    width: 90vw;\r\n    margin: auto;\r\n}\r\n\r\n#content,\r\n#grid {\r\n    position: relative;\r\n}\r\n\r\n/*\r\n    simulation area styles\r\n*/\r\n#grid {\r\n    border-radius: 5px;\r\n    background-color: mediumseagreen;\r\n    box-shadow: 0 0 15px #111;\r\n    overflow: hidden;\r\n}\r\n\r\n#grid>div {\r\n    position: absolute;\r\n}\r\n\r\n#car {\r\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\r\n    background-size: 60%;\r\n    background-position: 25% center;\r\n    background-repeat: no-repeat;\r\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\r\n    z-index: 1;\r\n}\r\n\r\n.road {\r\n    background-repeat: no-repeat;\r\n    background-origin: border-box;\r\n    background-size: 100%;\r\n    border: 1px dotted rgba(0, 0, 0, 0.3);\r\n    transform: scale(1.015);\r\n}\r\n\r\n#btnRun {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    padding: 10px 30px 10px 15px;\r\n    font-size: 50px;\r\n    border-radius: 20px;\r\n    font-family: 'FailedAttempt';\r\n    color: ghostwhite;\r\n    background-color: dodgerblue;\r\n    transform: translateX(-50%);\r\n    transform-origin: 0;\r\n}\r\n\r\n#btnRun:hover {\r\n    box-shadow: 0 0 20px #111;\r\n}\r\n\r\n#btnRun:active {\r\n    transform: scale(0.98) translate(-50%);\r\n}\r\n\r\n#btnRun>.fa {\r\n    transform: scale(0.6);\r\n}\r\n\r\n/*\r\n    chat-bot styles\r\n*/\r\n#chatbot {\r\n    position: fixed;\r\n    left: 50%;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 0 20px 20px;\r\n    max-width: 600px;\r\n    transform: translateX(-50%);\r\n}\r\n\r\n#inputContainer {\r\n    display: flex;\r\n}\r\n\r\n#messages,\r\n#userInput {\r\n    font-family: 'VT323';\r\n}\r\n\r\n#messages {\r\n    height: 120px;\r\n    border-radius: 10px;\r\n    margin: auto auto 10px;\r\n    padding-bottom: 8px;\r\n    font-size: 18px;\r\n    overflow-y: auto;\r\n    background-color: #222;\r\n    color: gainsboro;\r\n}\r\n\r\n.userMessage,\r\n.botMessage {\r\n    padding: 8px 15px 0;\r\n    border-radius: 15px;\r\n}\r\n\r\n.userMessage {\r\n    text-align: right;\r\n    color: ghostwhite;\r\n}\r\n\r\n.botMessage {\r\n    text-align: left;\r\n    color: lightblue;\r\n}\r\n\r\n#userInput {\r\n    height: 40px;\r\n    padding: 10px 20px;\r\n    border-radius: 23px;\r\n    font-size: 20px;\r\n    color: #333;\r\n    flex: auto;\r\n}\r\n\r\n#userInput:hover,\r\n#userInput:focus,\r\n#btnSend:hover {\r\n    box-shadow: 0 0 10px #111;\r\n}\r\n\r\n#btnSend {\r\n    margin-left: 10px;\r\n    height: 40px;\r\n    padding: 0 10px;\r\n    border-radius: 10px;\r\n    background-color: dodgerblue;\r\n    color: white;\r\n    font-size: 20px;\r\n    flex: none;\r\n}\r\n\r\n#messages::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n#messages::-webkit-scrollbar-thumb {\r\n    border-style: solid;\r\n    border-color: transparent;\r\n    border-radius: 5px;\r\n    background-color: silver;\r\n    background-clip: content-box;\r\n}\r\n\r\n#messages::-webkit-scrollbar-track {\r\n    margin: 10px;\r\n}\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "5823468235450388": {
          "title": "Make the chat-bot display what's stored in the <strong>randomFact</strong> variable.",
          "stepId": "814579835572496",
          "testId": "5823468235450388",
          "orderNo": 1000,
          "testFunction": "// Expectation:\npass.if.js.editable(0).equivalent(`displayBotMessage(randomFact);`);",
          "failureMessage": ""
        }
      },
      "stepNo": 31
    },
    "2988318951394256": {
      "title": "Adding more facts",
      "type": "code",
      "content": {
        "instructions": "<p>Now that we are done programming the functionality of random facts, the only thing left to do is to add more items into the array, so that we will get more surprising results.</p>\n<p><strong>Required Syntax:</strong></p>\n<ul>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/f6b7d0fc-700b-4202-861a-b5900a6fd922\">array</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/f7003228-1b3e-4a96-8357-2f9ac0ee9a12\">Math.random</a></p>\n</li>\n<li>\n<p class=\"notes\"><a href=\"#glossary/javascript/f497a433-d9f0-4e08-b825-8a39cc30560b\">Math.floor</a></p>\n</li>\n</ul>\n<center>\n<p><strong>- OBJECTIVES -</strong></p>\n</center>\n<p class=\"highlight\">On <strong>JS line</strong> <strong>##LINE('script.js','on decide')-11##</strong>, add more items into the <strong>facts</strong> array.</p>\n<hr />\n<p class=\"highlight\">Wait for instructions from&nbsp;your instructor&nbsp;to continue</p>",
        "startTab": "script.js",
        "notes": "<p>To proceed to step 34, as the students to type <strong>starry night</strong> into the chatbot</p>"
      },
      "deleted": false,
      "stepId": "2988318951394256",
      "majorRevision": 5,
      "minorRevision": 7,
      "orderNo": 31000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contentsWithAnswers": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">\r\n    <link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\"> \r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div id='content'>\r\n        <p id='title'>Random Decision</p>\r\n\r\n        <div id='grid'>\r\n            <div id='car'></div>\r\n        </div>\r\n    </div>\r\n\r\n    <div id='chatbot'>\r\n        <div id='messages'></div>\r\n\r\n        <div id='inputContainer'>\r\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\r\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        },
        "script.js": {
          "contents": "// Transition:\nlet output = codeWithoutMarkup;\n// output = insertLine(output, 'on decide', { line: '\\t\\t//  ## CUSTOM COMMANDS ##\\n\\t\\t#BEGIN_EDITABLE#    #END_EDITABLE#\\n\\t\\t//  ## END OF CUSTOM COMMANDS ##', offset: -10 });\noutput = insertLine(output, 'function readUserInput', { line: '\\t\\t//  ## CUSTOM COMMANDS ##\\n\\t\\t#BEGIN_EDITABLE#', offset: 52 });\noutput = insertLine(output, 'function decideNextMove', { line: '\\t\\t#END_EDITABLE#\\n\\t\\t//  ## END OF CUSTOM COMMANDS ##', offset: -10 });\noutput = insertLine(output, 'function decideNextMove', { line: `\\t\\telse if (command.split(\"\").map(l => l.charCodeAt(0)).join(\"\") == 1151169711411412132110105103104116) displayBotMessage('Passphrase accepted, you can now move on to the next step.');`, offset: -10 });\nreturn output;",
          "mode": "modify",
          "answers": [
            null
          ],
          "contentsWithAnswers": "var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = 6;\nvar nRow = 4;\nvar deadends = 0.3;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar autoMode = false;\nvar showFeedback = false;\nvar imagePath = 'https://app.bsd.education/resources';\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n    \n    //  place the car on the first block in the track\n    car.rotation = 0;\n    \n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            autoMode = true;\n            decideNextMove();\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n\t\t//  ## CUSTOM COMMANDS ##\n\t\t#BEGIN_EDITABLE#\n\t\telse if (command == 'tell me') {\n\t\t\tvar facts = [\n\t\t\t\t\"fact 1\",\n\t\t\t\t\"fact 2\",\n\t\t\t];\n\t\t\tvar randomNumber = Math.random() * facts.length;\n\t\t\tvar randomIndex = Math.floor(randomNumber);\n\t\t\tvar randomFact = facts[randomIndex];\n\n\t\t\tdisplayBotMessage(randomFact);\n\t\t}\n\t\telse if (command == 'who are you?') {\n            displayBotMessage('I am B-Bot');\n        }\n\t\telse if (command == 'color?') {\n            displayBotMessage('red');\n\t\t}\n      \telse if (command == 'where is home?') {\n          \tdisplayBotMessage('earth');\n        }\n\t\t#END_EDITABLE#\n\t\t//  ## END OF CUSTOM COMMANDS ##\n\t\telse if (command.split(\"\").map(l => l.charCodeAt(0)).join(\"\") == 1151169711411412132110105103104116) displayBotMessage('Passphrase accepted, you can now move on to the next step.');\n        else {\n            btnSend.enable();\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n    \n    userInput.focus();\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n    var availableCells = [];\n    \n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        availableCells.push(currentCell.right);\n    }\n    if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        availableCells.push(currentCell.up);\n    }\n    if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        availableCells.push(currentCell.down);\n    }\n    if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        availableCells.push(currentCell.left);\n    }\n    \n    if (availableCells.length == 1) {\n        moveCarTo(availableCells[0]);\n    }\n    else if (availableCells.length > 1) {\n        var randomNumber = Math.random() * availableCells.length;\n        var randomIndex = Math.floor(randomNumber);\n        var randomCell = availableCells[randomIndex];\n        \n        moveCarTo(randomCell);\n    }\n    else {\n        btnSend.enable();\n        autoMode = false;\n\n        if (currentCell.id == 'finish') {\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line!');\n        }\n        else {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n        }\n    }\n}\n\nfunction checkPrevMove() {\n    if (event && event.propertyName == 'transform') return;\n    \n    if (autoMode == true) {\n        decideNextMove();\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise = \n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning right.');\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning left.');\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning around.');\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\tdisplayBotMessage('Straight ahead.');\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.startCell = randomItemFrom(gridCells)[0];\n\n    var prevRoadCell = car.startCell;\n    var newRoadCell;\n    var removeDeadEnd = roadCell => {\n        if (roadCell.roadType.length > 1) {\n            delete roadCell.deadend;\n        }\n    };\n    var expandFrom = targetCell => {\n        //  remove target cell from the available paths of the previous road cell\n        remove(targetCell).from(prevRoadCell.paths);\n        //  remove the previous road cell from the available paths of target cell\n        remove(prevRoadCell).from(targetCell.paths);\n\n        //  assign road type for previous and target cells\n        if (targetCell.up == prevRoadCell) {\n            prevRoadCell.roadType.push('down');\n            targetCell.roadType.push('up');\n        }\n        else if (targetCell.down == prevRoadCell) {\n            prevRoadCell.roadType.push('up');\n            targetCell.roadType.push('down');\n        }\n        else if (targetCell.left == prevRoadCell) {\n            prevRoadCell.roadType.push('right');\n            targetCell.roadType.push('left');\n        }\n        else {\n            prevRoadCell.roadType.push('left');\n            targetCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n        removeDeadEnd(prevRoadCell);\n\n        if (targetCell.className == 'road' || targetCell.deadend) {\n            targetCell.setRoadType(targetCell.roadType.sort().join(''));\n            removeDeadEnd(targetCell);\n        }\n\n        prevRoadCell = targetCell;\n    };\n\n    /*\n        plot a single path from start to finish\n    */\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        expandFrom(newRoadCell);\n        \n        newRoadCell.paths.forEach(neighbourCell => {\n            //  check whether target cell blocks off paths of neighbouring cells\n            if (neighbourCell.className == 'road') {\n                remove(newRoadCell).from(neighbourCell.paths);\n                remove(neighbourCell).from(newRoadCell.paths);\n            }\n        });\n    }\n    while (newRoadCell.endOfRow == false);\n\n    //  set road type on the last cell in a row\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n\n    /*\n        plot branches until entire map is filled\n    */\n\n    var branch = [];\n    var emptyCells = gridCells.flat().filter(cell => cell.className == '' && cell.right != 'unknown');\n\n    while (emptyCells.length > 0) {\n        //  check if a branch is already created\n        if (branch.length == 0) {\n            //  select a cell from the first path\n            var branchCell = randomItemFrom(gridCells.flat().filter(cell =>\n                cell.className == 'road' &&\n                cell.id != 'finish' &&\n                cell.right != 'unknown' &&\n                cell.right.right != 'unknown' &&\n                cell.right.id != 'finish' &&\n                cell.paths.filter(neighbourCell => neighbourCell.className == '').length > 0\n            ));\n            \n            prevRoadCell = branchCell;\n            newRoadCell = randomItemFrom(branchCell.paths.filter(cell => cell.className == ''));\n        }\n        else {\n            newRoadCell = randomItemFrom(branch[branch.length - 1].paths);\n            remove(prevRoadCell).from(emptyCells);\n\n            //  determine whether new road cell is a deadend\n            if (newRoadCell.className != 'road' && Math.random() > deadends) {\n                newRoadCell.deadend = true;\n                remove(newRoadCell).from(emptyCells);\n            }\n        }\n\n        //  remove paths that lead to the last column\n        if (newRoadCell.right.right == 'unknown') {\n            remove(newRoadCell.right).from(newRoadCell.paths);\n        }\n\n        expandFrom(newRoadCell);\n\n        if (newRoadCell.className == 'road' || newRoadCell.deadend) {\n            branch = [];\n        }\n        else {\n            branch.push(newRoadCell);\n        }\n    }\n}\n\nfunction drawGrid() {\n    resizeGrid();\n    \n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = 'unknown';\n            cell.down = 'unknown';\n            cell.left = 'unknown';\n            cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n        \n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n    \n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}\n         "
        },
        "style.css": {
          "contentsWithAnswers": "/* font converted using font-converter.net. thank you! */\r\n@font-face {\r\n    font-family: \"FailedAttempt\";\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\r\n    /* IE9 Compat Modes */\r\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\r\n        /* IE6-IE8 */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\r\n        /* Open Type Font */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\r\n        /* Legacy iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\r\n        /* Safari, Android, iOS */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\r\n        /* Modern Browsers */\r\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\r\n    /* Modern Browsers */\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    font-family: 'FailedAttempt';\r\n    background-color: #333;\r\n}\r\n\r\nbutton,\r\ninput,\r\ntextarea {\r\n    outline: none;\r\n    border: none;\r\n    transition: box-shadow 0.2s ease-in-out;\r\n}\r\n\r\nbutton {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:active {\r\n    transform: scale(0.98);\r\n}\r\n\r\n#title {\r\n    padding-top: 10px;\r\n    margin-bottom: 10px;\r\n    color: white;\r\n}\r\n\r\n#content {\r\n    width: 90vw;\r\n    margin: auto;\r\n}\r\n\r\n#content,\r\n#grid {\r\n    position: relative;\r\n}\r\n\r\n/*\r\n    simulation area styles\r\n*/\r\n#grid {\r\n    border-radius: 5px;\r\n    background-color: mediumseagreen;\r\n    box-shadow: 0 0 15px #111;\r\n    overflow: hidden;\r\n}\r\n\r\n#grid>div {\r\n    position: absolute;\r\n}\r\n\r\n#car {\r\n    background-image: url('https://app.bsd.education/resources/car_blue.png');\r\n    background-size: 60%;\r\n    background-position: 25% center;\r\n    background-repeat: no-repeat;\r\n    transition: left 0.4s linear, top 0.4s linear, transform 0.1s ease-in-out;\r\n    z-index: 1;\r\n}\r\n\r\n.road {\r\n    background-repeat: no-repeat;\r\n    background-origin: border-box;\r\n    background-size: 100%;\r\n    border: 1px dotted rgba(0, 0, 0, 0.3);\r\n    transform: scale(1.015);\r\n}\r\n\r\n#btnRun {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    padding: 10px 30px 10px 15px;\r\n    font-size: 50px;\r\n    border-radius: 20px;\r\n    font-family: 'FailedAttempt';\r\n    color: ghostwhite;\r\n    background-color: dodgerblue;\r\n    transform: translateX(-50%);\r\n    transform-origin: 0;\r\n}\r\n\r\n#btnRun:hover {\r\n    box-shadow: 0 0 20px #111;\r\n}\r\n\r\n#btnRun:active {\r\n    transform: scale(0.98) translate(-50%);\r\n}\r\n\r\n#btnRun>.fa {\r\n    transform: scale(0.6);\r\n}\r\n\r\n/*\r\n    chat-bot styles\r\n*/\r\n#chatbot {\r\n    position: fixed;\r\n    left: 50%;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 0 20px 20px;\r\n    max-width: 600px;\r\n    transform: translateX(-50%);\r\n}\r\n\r\n#inputContainer {\r\n    display: flex;\r\n}\r\n\r\n#messages,\r\n#userInput {\r\n    font-family: 'VT323';\r\n}\r\n\r\n#messages {\r\n    height: 120px;\r\n    border-radius: 10px;\r\n    margin: auto auto 10px;\r\n    padding-bottom: 8px;\r\n    font-size: 18px;\r\n    overflow-y: auto;\r\n    background-color: #222;\r\n    color: gainsboro;\r\n}\r\n\r\n.userMessage,\r\n.botMessage {\r\n    padding: 8px 15px 0;\r\n    border-radius: 15px;\r\n}\r\n\r\n.userMessage {\r\n    text-align: right;\r\n    color: ghostwhite;\r\n}\r\n\r\n.botMessage {\r\n    text-align: left;\r\n    color: lightblue;\r\n}\r\n\r\n#userInput {\r\n    height: 40px;\r\n    padding: 10px 20px;\r\n    border-radius: 23px;\r\n    font-size: 20px;\r\n    color: #333;\r\n    flex: auto;\r\n}\r\n\r\n#userInput:hover,\r\n#userInput:focus,\r\n#btnSend:hover {\r\n    box-shadow: 0 0 10px #111;\r\n}\r\n\r\n#btnSend {\r\n    margin-left: 10px;\r\n    height: 40px;\r\n    padding: 0 10px;\r\n    border-radius: 10px;\r\n    background-color: dodgerblue;\r\n    color: white;\r\n    font-size: 20px;\r\n    flex: none;\r\n}\r\n\r\n#messages::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n#messages::-webkit-scrollbar-thumb {\r\n    border-style: solid;\r\n    border-color: transparent;\r\n    border-radius: 5px;\r\n    background-color: silver;\r\n    background-clip: content-box;\r\n}\r\n\r\n#messages::-webkit-scrollbar-track {\r\n    margin: 10px;\r\n}\r\n#BEGIN_EDITABLE##END_EDITABLE#"
        }
      },
      "tests": {
        "7750272970055673": {
          "title": "Add more items into the <strong>facts</strong> array.",
          "stepId": "2988318951394256",
          "testId": "7750272970055673",
          "orderNo": 1000,
          "testFunction": "// Expectation:\n// pass.if.js.editable(0).equivalent(``);\npass.on('readUserInput').var(`command == 'starry night'`);",
          "failureMessage": ""
        }
      },
      "stepNo": 32
    },
    "947567035784756": {
      "title": "Final touches",
      "type": "code",
      "content": {
        "instructions": "<p>Congratulations! you have completed this project. We've added some more commands for you:</p>\n<ul>\n<li>\n<p class=\"notes\">\"speed up\" &amp; \"slow down\" will increase/decrease the car's speed by 30% each time the command is given to the chat-bot.</p>\n</li>\n<li>\n<p class=\"notes\">\"play back\" shows you the best path the car has found.</p>\n</li>\n<li>\n<p class=\"notes\">\"stop\" will stop the car's auto drive mode.</p>\n</li>\n<li>\n<p class=\"notes\">\"reset\" will return the car to its starting position.</p>\n</li>\n</ul>\n<p>Take some time to familiarise with the new commands or you can keep improving the chat-bot conversations.</p>\n<p>Make sure you're happy with your custom commands &amp; responses before your presentation!</p>\n<hr />\n<p class=\"highlight\"><strong>Export to Sandbox</strong> is now available for this project</p>"
      },
      "deleted": false,
      "stepId": "947567035784756",
      "majorRevision": 4,
      "minorRevision": 0,
      "orderNo": 32000,
      "refMissionUuid": null,
      "files": {
        "index.html": {
          "contents": "<!DOCTYPE html>\n<html>\n<head>\n    <link href=\"https://fonts.googleapis.com/css?family=VT323\" rel=\"stylesheet\">#BEGIN_EDITABLE#\n  \t#END_EDITABLE#\n  \t<link href=\"/resources/css/font-awesome.min.css\" rel=\"stylesheet\"> \n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n</head>\n<body>\n    <div id='content'>\n        <p id='title'>#BEGIN_EDITABLE#Iteration & Memory#END_EDITABLE#</p>\n\n        <div id='grid'>\n            <div id='car'></div>\n        </div>\n    </div>\n\n    <div id='chatbot'>\n        <div id='messages'></div>\n\n        <div id='inputContainer'>\n            <input id='userInput' placeholder='Type message here' autocomplete='off'>\n            <button id='btnSend'><i class='fa fa-paper-plane fa-fw'></i></button>\n        </div>\n    </div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "mode": "new_contents",
          "answers": [
            "",
            "Iteration & Memory"
          ]
        },
        "script.js": {
          "contents": "// Transition:\nconst output = `var content = document.querySelector('#content');\nvar title = document.querySelector('#title');\nvar grid = document.querySelector('#grid');\nvar car = document.querySelector('#car');\n\nvar chatbot = document.querySelector('#chatbot');\nvar messages = document.querySelector('#messages');\nvar userInput = document.querySelector('#userInput');\nvar btnSend = document.querySelector('#btnSend');\n\nvar nColumn = #BEGIN_EDITABLE#8#END_EDITABLE#;\nvar nRow = #BEGIN_EDITABLE#6#END_EDITABLE#;\nvar deadends = 0.3;\nvar cellSize = 90 / nColumn;\nvar gridCells = [];\nvar autoMode = false;\nvar imagePath = 'https://app.bsd.education/resources';\n\nvar showFeedback = false;\nvar viewingMode = false;\nvar shortTermMemory = [];\nvar shortestPath = [];\n\nvar iteration = 1;\nvar speed = #BEGIN_EDITABLE#0.1#END_EDITABLE#;\n\nwindow.onload = init;\nwindow.onresize = resizeContent;\nwindow.onkeypress = handleKeyPress;\n\nbtnSend.onclick = readUserInput;\n\nbtnSend.enable = () => {\n    btnSend.disabled = false;\n    btnSend.style.filter = 'inherit';\n    btnSend.style.opacity = 'inherit';\n};\n\nbtnSend.disable = () => {\n    btnSend.disabled = true;\n    btnSend.style.filter = 'grayscale(0.6)';\n    btnSend.style.opacity = '0.6';\n};\n\nfunction init() {\n    drawGrid();\n    plotPath();\n\n    car.className = 'normal';\n    car.rotation = 0;\n    car.style.width = cellSize + 'vw';\n    car.style.height = car.style.width;\n\n    //  place the car on the first block in the track\n    car.rotation = 0;\n\n    //  handle the transitionend event using the checkPrevMove function\n    car.addEventListener('transitionend', checkPrevMove);\n\n    setSpeed(speed);\n    resizeContent();\n}\n\nfunction readUserInput() {\n    var command = userInput.value.trim().replace(/\\\\s+/g, ' ').toLowerCase();\n\n    if (command.length > 0) {\n        displayUserMessage(command);\n\n        if (command == 'hello') {\n            displayBotMessage('Hi, how can I help you?');\n        }\n        else if (command == 'go up') {\n            if (car.currentCell.up == 'unknown') {\n                displayBotMessage('There is nothing above the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.up);\n            }\n        }\n        else if (command == 'go down') {\n            if (car.currentCell.down == 'unknown') {\n                displayBotMessage('There is nothing below the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.down);\n            }\n        }\n        else if (command == 'go left') {\n            if (car.currentCell.left == 'unknown') {\n                displayBotMessage('There is nothing to the left of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.left);\n            }\n        }\n        else if (command == 'go right') {\n            if (car.currentCell.right == 'unknown') {\n                displayBotMessage('There is nothing to the right of the car.');\n            }\n            else {\n                moveCarTo(car.currentCell.right);\n            }\n        }\n        else if (command == 'auto drive') {\n            if (car.currentCell != car.startCell) {\n                displayBotMessage('Reset the position of the car before using the \"auto drive\" command.');\n            }\n            else {\n                autoMode = true;\n                decideNextMove();\n            }\n        }\n\t\telse if (command == 'show feedback') {\n\t\t\tdisplayBotMessage('Sure, real-time feedback is now turned on.');\n\t\t\tshowFeedback = true;\n\t\t}\n\t\telse if (command == 'hide feedback') {\n\t\t\tdisplayBotMessage('Okay, feedback is turned off.');\n\t\t\tshowFeedback = false;\n\t\t}\n        else if (command == 'speed up') {\n            setSpeed(speed *= 0.7);\n        }\n        else if (command == 'slow down') {\n            setSpeed(speed /= 0.7);\n        }\n        else if (command == 'stop') {\n            displayBotMessage('\"auto drive\" stopped, total iterations: ' + iteration);\n            autoMode = false;\n        }\n        else if (command == 'reset') {\n            if (autoMode == true) {\n                displayBotMessage('You must stop the car before resetting.');\n            }\n            else {\n                resetCar();\n            }\n        }\n        else if (command == 'play back') {\n            if (autoMode == true) {\n                displayBotMessage('You must stop the car first.');\n            }\n            else {\n                showShortestPath();\n            }\n        }\n\t\t##CUSTOM_COMMANDS##\n        else {\n            displayBotMessage(\"Sorry, I didn't understand your command: \" + command);\n        }\n    }\n\n    userInput.focus();\n}\n\nfunction setSpeed(t) {\n    speed = t;\n    car.style.transitionDuration = t + 's, ' + t + 's, ' + (t / 4) + 's';\n}\n\nfunction newIteration() {\n    shortTermMemory = [];\n    iteration += 1;\n    setTimeout(decideNextMove, 500);\n}\n\nfunction decideNextMove() {\n    var currentCell = car.currentCell;\n    var prevCell = car.prevCell;\n    var availableCells = [];\n\n    if (currentCell.right != prevCell && currentCell.reachableRoads.includes(currentCell.right)) {\n        availableCells.push(currentCell.right);\n    }\n    if (currentCell.up != prevCell && currentCell.reachableRoads.includes(currentCell.up)) {\n        availableCells.push(currentCell.up);\n    }\n    if (currentCell.down != prevCell && currentCell.reachableRoads.includes(currentCell.down)) {\n        availableCells.push(currentCell.down);\n    }\n    if (currentCell.left != prevCell && currentCell.reachableRoads.includes(currentCell.left)) {\n        availableCells.push(currentCell.left);\n    }\n\n    if (availableCells.length == 1) {\n        moveCarTo(availableCells[0]);\n        shortTermMemory.push(availableCells[0]);\n    }\n    else if (availableCells.length > 1) {\n        var randomNumber = Math.random() * availableCells.length;\n        var randomIndex = Math.floor(randomNumber);\n        var randomCell = availableCells[randomIndex];\n\n        moveCarTo(randomCell);\n        shortTermMemory.push(randomCell);\n    }\n    else {\n        if (currentCell.id == 'finish') {\n            autoMode = false;\n            shortestPath = shortTermMemory;\n            displayBotMessage('Your AutoDrive system worked, the car has reached the finish line in ' + shortestPath.length + ' steps!');\n        }\n        else {\n            displayBotMessage('The AutoDrive system failed to determine where to go next.');\n            newIteration();\n        }\n\n        resetCar();\n        shortTermMemory = [];\n    }\n}\n\nfunction resetCar() {\n    car.style.transitionDuration = '0s, 0s, 0s';\n    car.rotation = 0;\n    car.prevCell = null;\n    car.currentCell = null;\n    moveCarTo(car.startCell);\n    setTimeout(() => { setSpeed(speed) }, 100);\n}\n\nfunction checkPrevMove() {\n    if (!car.prevCell) return;\n    if (event && event.propertyName == 'transform') return;\n\n    if (autoMode == true) {\n        if (shortestPath.length > 0 && shortTermMemory.length == shortestPath.length) {\n            displayBotMessage('The algorithm failed to find a shorter path.');\n            resetCar();\n            newIteration();\n        }\n        else {\n            decideNextMove();\n        }\n    }\n    else if (viewingMode == true) {\n        playbackIndex += 1;\n\n        if (playbackIndex == shortestPath.length) {\n            displayBotMessage('Playback ended.');\n            btnSend.enable();\n        }\n        else {\n            moveCarTo(shortestPath[playbackIndex]);\n        }\n    }\n    else {\n        btnSend.enable();\n\n        var currentCell = car.currentCell;\n        var prevCell = car.prevCell;\n\n        //  make sure the path to the current cell is valid\n        if (prevCell.reachableRoads.includes(currentCell)) {\n            if (currentCell.id == 'finish') {\n                displayBotMessage('You have reached the finish line!');\n            }\n        }\n        else if (currentCell.className != 'road' || (prevCell.className == currentCell.className)) {\n            displayBotMessage('You drove the car off road.');\n        }\n        else {\n            displayBotMessage('The car is back on the road.');\n        }\n    }\n}\n\nfunction showShortestPath() {\n    if (car.currentCell != car.startCell) {\n        displayBotMessage('Please reset the car before viewing the found path.');\n    }\n    else {\n        btnSend.disable();\n\n        viewingMode = true;\n        playbackIndex = 0;\n        moveCarTo(shortestPath[playbackIndex]);\n    }\n}\n\nfunction moveCarTo(nextCell) {\n    steerCarToward(nextCell);\n    car.prevCell = car.currentCell;\n    car.currentCell = nextCell;\n    car.style.top = nextCell.style.top;\n    car.style.left = nextCell.style.left;\n}\n\n//  must be called before moveCarTo(nextCell)\nfunction steerCarToward(cell) {\n    //  rotate the car\n    if (car.currentCell) {\n        var clockwise;\n        var antiClockwise;\n\n        if (car.prevCell) {\n            clockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.left) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.right);\n\n            antiClockwise =\n                (car.prevCell == car.currentCell.right && cell == car.currentCell.down) ||\n                (car.prevCell == car.currentCell.left && cell == car.currentCell.up) ||\n                (car.prevCell == car.currentCell.up && cell == car.currentCell.right) ||\n                (car.prevCell == car.currentCell.down && cell == car.currentCell.left);\n        }\n        else {\n            clockwise = cell.up == car.currentCell;\n            antiClockwise = cell.down == car.currentCell;\n        }\n\n        if (clockwise) {\n            car.rotation += 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning right.');\n\t\t\t}\n        }\n        else if (antiClockwise) {\n            car.rotation -= 90;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning left.');\n\t\t\t}\n        }\n        else if (cell == car.prevCell) {\n            car.rotation -= 180;\n\n\t\t\tif (showFeedback == true) {\n\t\t\t\tdisplayBotMessage('Turning around.');\n\t\t\t}\n        }\n\t\telse if (showFeedback == true) {\n\t\t\tdisplayBotMessage('Straight ahead.');\n\t\t}\n    }\n\n    car.style.transform = 'rotate(' + car.rotation + 'deg)';\n}\n\nfunction plotPath() {\n    car.startCell = randomItemFrom(gridCells)[0];\n\n    var prevRoadCell = car.startCell;\n    var newRoadCell;\n    var removeDeadEnd = roadCell => {\n        if (roadCell.roadType.length > 1) {\n            delete roadCell.deadend;\n        }\n    };\n    var expandFrom = targetCell => {\n        //  remove target cell from the available paths of the previous road cell\n        remove(targetCell).from(prevRoadCell.paths);\n        //  remove the previous road cell from the available paths of target cell\n        remove(prevRoadCell).from(targetCell.paths);\n\n        //  assign road type for previous and target cells\n        if (targetCell.up == prevRoadCell) {\n            prevRoadCell.roadType.push('down');\n            targetCell.roadType.push('up');\n        }\n        else if (targetCell.down == prevRoadCell) {\n            prevRoadCell.roadType.push('up');\n            targetCell.roadType.push('down');\n        }\n        else if (targetCell.left == prevRoadCell) {\n            prevRoadCell.roadType.push('right');\n            targetCell.roadType.push('left');\n        }\n        else {\n            prevRoadCell.roadType.push('left');\n            targetCell.roadType.push('right');\n        }\n\n        newRoadCell.reachableRoads.push(prevRoadCell);\n        prevRoadCell.reachableRoads.push(newRoadCell);\n\n        //  assign appropriate road type image\n        prevRoadCell.setRoadType(prevRoadCell.roadType.sort().join(''));\n        removeDeadEnd(prevRoadCell);\n\n        if (targetCell.className == 'road' || targetCell.deadend) {\n            targetCell.setRoadType(targetCell.roadType.sort().join(''));\n            removeDeadEnd(targetCell);\n        }\n\n        prevRoadCell = targetCell;\n    };\n\n    /*\n        plot a single path from start to finish\n    */\n\n    prevRoadCell.roadType.push('left');\n\n    moveCarTo(prevRoadCell);\n\n    do {\n        var filteredPaths = prevRoadCell.paths.filter(cell => cell != prevRoadCell.left);\n        newRoadCell = randomItemFrom(filteredPaths);\n\n        expandFrom(newRoadCell);\n\n        newRoadCell.paths.forEach(neighbourCell => {\n            //  check whether target cell blocks off paths of neighbouring cells\n            if (neighbourCell.className == 'road') {\n                remove(newRoadCell).from(neighbourCell.paths);\n                remove(neighbourCell).from(newRoadCell.paths);\n            }\n        });\n    }\n    while (newRoadCell.endOfRow == false);\n\n    //  set road type on the last cell in a row\n    newRoadCell.setRoadType('finish');\n    newRoadCell.id = 'finish';\n\n    /*\n        plot branches until entire map is filled\n    */\n\n    var branch = [];\n    var emptyCells = gridCells.flat().filter(cell => cell.className == '' && cell.right != 'unknown');\n\n    while (emptyCells.length > 0) {\n        //  check if a branch is already created\n        if (branch.length == 0) {\n            //  select a cell from the first path\n            var branchCell = randomItemFrom(gridCells.flat().filter(cell =>\n                cell.className == 'road' &&\n                cell.id != 'finish' &&\n                cell.right != 'unknown' &&\n                cell.right.right != 'unknown' &&\n                cell.right.id != 'finish' &&\n                cell.paths.filter(neighbourCell => neighbourCell.className == '').length > 0\n            ));\n\n            prevRoadCell = branchCell;\n            newRoadCell = randomItemFrom(branchCell.paths.filter(cell => cell.className == ''));\n        }\n        else {\n            newRoadCell = randomItemFrom(branch[branch.length - 1].paths);\n            remove(prevRoadCell).from(emptyCells);\n\n            //  determine whether new road cell is a deadend\n            if (newRoadCell.className != 'road' && Math.random() > deadends) {\n                newRoadCell.deadend = true;\n                remove(newRoadCell).from(emptyCells);\n            }\n        }\n\n        //  remove paths that lead to the last column\n        if (newRoadCell.right.right == 'unknown') {\n            remove(newRoadCell.right).from(newRoadCell.paths);\n        }\n\n        expandFrom(newRoadCell);\n\n        if (newRoadCell.className == 'road' || newRoadCell.deadend) {\n            branch = [];\n        }\n        else {\n            branch.push(newRoadCell);\n        }\n    }\n}\n\nfunction drawGrid() {\n    resizeGrid();\n\n    //  create an array or undefined items whose length is equal to nRow\n    var rows = new Array(nRow).fill();\n\n    //  build the trackCells 2D array\n    rows.forEach((row, rowIndex) => {\n        //  create an array of undefined items whose length is equal to nColumn\n        row = new Array(nColumn).fill();\n        gridCells.push(row);\n\n        row.forEach((cell, cellIndex) => {\n            cell = document.createElement('div');\n            cell.style.width = cellSize + 'vw';\n            cell.style.height = cell.style.width;\n            cell.style.top = (100 / nRow) * rowIndex + '%';\n            cell.style.left = (100 / nColumn) * cellIndex + '%';\n            cell.endOfRow = cellIndex == nColumn - 1;\n            row[cellIndex] = cell;\n            grid.appendChild(cell);\n        });\n    });\n\n    //  store neighbouring cells for each cell\n    gridCells.forEach((row, nthRow) => {\n        row.forEach((cell, nthColumn) => {\n            cell.up = 'unknown';\n            cell.down = 'unknown';\n            cell.left = 'unknown';\n            cell.right = 'unknown';\n            cell.paths = [];\n            cell.reachableRoads = [];\n            cell.roadType = [];\n            cell.setRoadType = type => {\n                cell.className = 'road';\n                cell.style.backgroundImage = \"url('\" + imagePath + '/road_' + type + \".png')\";\n            };\n\n            if (nthRow > 0) {\n                cell.up = gridCells[nthRow - 1][nthColumn];\n                cell.paths.push(cell.up);\n            }\n            if (nthRow < nRow - 1) {\n                cell.down = gridCells[nthRow + 1][nthColumn];\n                cell.paths.push(cell.down);\n            }\n            if (nthColumn > 0) {\n                cell.left = gridCells[nthRow][nthColumn - 1];\n                cell.paths.push(cell.left);\n            }\n            if (nthColumn < nColumn - 1) {\n                cell.right = gridCells[nthRow][nthColumn + 1];\n                cell.paths.push(cell.right);\n            }\n        });\n    });\n}\n\nfunction displayUserMessage(message) {\n    attachMessage(message, 'userMessage');\n}\n\nfunction displayBotMessage(message) {\n    attachMessage(message, 'botMessage');\n}\n\nfunction attachMessage(message, type) {\n    var lastMessage = messages.lastElementChild;\n\n    if (lastMessage == null || message != lastMessage.textContent) {\n        var text = document.createElement('p');\n\n        text.className = type;\n        text.textContent = message;\n        messages.appendChild(text);\n        messages.scrollTo(0, messages.scrollHeight);\n    }\n    else {\n        lastMessage.style.color = 'plum';\n\n        setTimeout(() => {\n            lastMessage.style.color = '';\n            setTimeout(() => {\n                lastMessage.style.color = 'plum';\n                setTimeout(() => lastMessage.style.color = '', 100);\n            }, 100);\n        }, 100);\n    }\n\n    if (type == 'userMessage') {\n        userInput.value = '';\n    }\n}\n\nfunction handleKeyPress() {\n    if (event.keyCode == 13) {\n        btnSend.click();\n    }\n}\n\nfunction resizeGrid() {\n    grid.style.height = 90 * (nRow / nColumn) + 'vw';\n    title.style.fontSize = grid.offsetHeight * 0.2 + 'px';\n}\n\nfunction resizeContent() {\n    resizeGrid();\n\n    var contentRatio = content.offsetWidth / content.offsetHeight;\n    var windowRatio = window.innerWidth / (window.innerHeight - chatbot.offsetHeight);\n    var scaleRatio = contentRatio > windowRatio ? window.innerWidth * 0.9 / content.offsetWidth : (window.innerHeight - chatbot.offsetHeight) * 0.9 / content.offsetHeight;\n\n    content.style.top = (window.innerHeight - chatbot.offsetHeight - content.offsetHeight) / 2 + 'px';\n    content.style.transform = 'scale(' + scaleRatio + ')';\n}\n\nfunction randomIndexFrom(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n\nfunction randomItemFrom(arr) {\n    return arr[randomIndexFrom(arr)];\n}\n\nfunction remove(item) {\n    return { from: arr => arr.splice(arr.indexOf(item), 1) };\n}`;\nconst customCommands = codeWithoutMarkup.replace(/[\\s\\S]*\\/\\/  ## CUSTOM COMMANDS ##/, '').split('').reverse().join('').replace(/[\\s\\S]*## SDNAMMOC MOTSUC FO DNE ##  \\/\\//, '').split('').reverse().join('').trim();\nreturn output.replace(/##CUSTOM_COMMANDS##/, customCommands);",
          "mode": "modify",
          "answers": []
        },
        "style.css": {
          "contents": "/* font converted using font-converter.net. thank you! */\n@font-face {\n    font-family: \"FailedAttempt\";\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot\");\n    /* IE9 Compat Modes */\n    src: url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.eot?#iefix\") format(\"embedded-opentype\"),\n        /* IE6-IE8 */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.otf\") format(\"opentype\"),\n        /* Open Type Font */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.svg\") format(\"svg\"),\n        /* Legacy iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.ttf\") format(\"truetype\"),\n        /* Safari, Android, iOS */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff\") format(\"woff\"),\n        /* Modern Browsers */\n        url(\"https://imding.github.io/fonts/FailedAttempt/FailedAttempt.woff2\") format(\"woff2\");\n    /* Modern Browsers */\n    font-weight: normal;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    height: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-family: #BEGIN_EDITABLE#'FailedAttempt'#END_EDITABLE#;\n    background-color: #333;\n}\n\nbutton,\ninput,\ntextarea {\n    outline: none;\n    border: none;\n    transition: box-shadow 0.2s ease-in-out;\n}\n\nbutton {\n    cursor: pointer;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\n#title {\n    padding-top: 10px;\n    margin-bottom: 10px;\n    color: #BEGIN_EDITABLE#white#END_EDITABLE#;\n}\n\n#content {\n    width: 90vw;\n    margin: auto;\n}\n\n#content,\n#grid {\n    position: relative;\n}\n\n/*\n    simulation area styles\n*/\n#grid {\n    border-radius: 5px;\n    background-color: mediumseagreen;\n    background-image: url('#BEGIN_EDITABLE#  #END_EDITABLE#');\n    background-size: 32px;\n    box-shadow: 0 0 15px #111;\n    overflow: hidden;\n}\n\n#grid>div {\n    position: absolute;\n}\n\n#car {\n    background-image: url('#BEGIN_EDITABLE#https://app.bsd.education/resources/car_blue.png#END_EDITABLE#');\n    background-size: 60%;\n    background-position: 25% center;\n    background-repeat: no-repeat;\n    transition-property: left, top, transform;\n    transition-timing-function: linear, linear, ease-in-out;\n    z-index: 1;\n}\n\n.road {\n    background-repeat: no-repeat;\n    background-origin: border-box;\n    background-size: 100%;\n    transform: scale(1.015);\n}\n\n#btnRun {\n    position: fixed;\n    bottom: 20px;\n    padding: 10px 30px 10px 15px;\n    font-size: 50px;\n    border-radius: 20px;\n    font-family: 'FailedAttempt';\n    color: ghostwhite;\n    background-color: dodgerblue;\n    transform: translateX(-50%);\n    transform-origin: 0;\n}\n\n#btnRun:hover {\n    box-shadow: 0 0 20px #111;\n}\n\n#btnRun:active {\n    transform: scale(0.98) translate(-50%);\n}\n\n#btnRun>.fa {\n    transform: scale(0.6);\n}\n\n/*\n    chat-bot styles\n*/\n#chatbot {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px 20px;\n    max-width: 600px;\n    transform: translateX(-50%);\n}\n\n#inputContainer {\n    display: flex;\n}\n\n#messages,\n#userInput {\n    font-family: 'VT323';\n}\n\n#messages {\n    height: 120px;\n    border-radius: 10px;\n    margin: auto auto 10px;\n    padding-bottom: 8px;\n    font-size: 18px;\n    overflow-y: auto;\n    background-color: #222;\n    color: gainsboro;\n}\n\n.userMessage,\n.botMessage {\n    padding: 8px 15px 0;\n    border-radius: 15px;\n}\n\n.userMessage {\n    text-align: right;\n    color: ghostwhite;\n}\n\n.botMessage {\n    text-align: left;\n    color: lightblue;\n}\n\n#userInput {\n    height: 40px;\n    padding: 10px 20px;\n    border-radius: 23px;\n    font-size: 20px;\n    color: #333;\n    flex: auto;\n}\n\n#userInput:hover,\n#userInput:focus,\n#btnSend:hover {\n    box-shadow: 0 0 10px #111;\n}\n\n#btnSend {\n    margin-left: 10px;\n    height: 40px;\n    padding: 0 10px;\n    border-radius: 10px;\n    background-color: dodgerblue;\n    color: white;\n    font-size: 20px;\n    flex: none;\n}\n\n#messages::-webkit-scrollbar {\n    width: 10px;\n}\n\n#messages::-webkit-scrollbar-thumb {\n    border-style: solid;\n    border-color: transparent;\n    border-radius: 5px;\n    background-color: silver;\n    background-clip: content-box;\n}\n\n#messages::-webkit-scrollbar-track {\n    margin: 10px;\n}\n",
          "mode": "new_contents",
          "answers": [
            "'FailedAttempt'",
            "white"
          ]
        }
      },
      "tests": {}
    }
  }
}